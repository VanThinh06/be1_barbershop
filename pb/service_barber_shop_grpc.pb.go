// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.4
// source: service_barber_shop.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BarberShopClient is the client API for BarberShop service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BarberShopClient interface {
	CreateBarber(ctx context.Context, in *CreateBarberRequest, opts ...grpc.CallOption) (*CreateBarberResponse, error)
	LoginBarber(ctx context.Context, in *LoginBarberRequest, opts ...grpc.CallOption) (*LoginBarberResponse, error)
}

type barberShopClient struct {
	cc grpc.ClientConnInterface
}

func NewBarberShopClient(cc grpc.ClientConnInterface) BarberShopClient {
	return &barberShopClient{cc}
}

func (c *barberShopClient) CreateBarber(ctx context.Context, in *CreateBarberRequest, opts ...grpc.CallOption) (*CreateBarberResponse, error) {
	out := new(CreateBarberResponse)
	err := c.cc.Invoke(ctx, "/pb.BarberShop/CreateBarber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberShopClient) LoginBarber(ctx context.Context, in *LoginBarberRequest, opts ...grpc.CallOption) (*LoginBarberResponse, error) {
	out := new(LoginBarberResponse)
	err := c.cc.Invoke(ctx, "/pb.BarberShop/LoginBarber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BarberShopServer is the server API for BarberShop service.
// All implementations must embed UnimplementedBarberShopServer
// for forward compatibility
type BarberShopServer interface {
	CreateBarber(context.Context, *CreateBarberRequest) (*CreateBarberResponse, error)
	LoginBarber(context.Context, *LoginBarberRequest) (*LoginBarberResponse, error)
	mustEmbedUnimplementedBarberShopServer()
}

// UnimplementedBarberShopServer must be embedded to have forward compatible implementations.
type UnimplementedBarberShopServer struct {
}

func (UnimplementedBarberShopServer) CreateBarber(context.Context, *CreateBarberRequest) (*CreateBarberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBarber not implemented")
}
func (UnimplementedBarberShopServer) LoginBarber(context.Context, *LoginBarberRequest) (*LoginBarberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginBarber not implemented")
}
func (UnimplementedBarberShopServer) mustEmbedUnimplementedBarberShopServer() {}

// UnsafeBarberShopServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BarberShopServer will
// result in compilation errors.
type UnsafeBarberShopServer interface {
	mustEmbedUnimplementedBarberShopServer()
}

func RegisterBarberShopServer(s grpc.ServiceRegistrar, srv BarberShopServer) {
	s.RegisterService(&BarberShop_ServiceDesc, srv)
}

func _BarberShop_CreateBarber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBarberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberShopServer).CreateBarber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BarberShop/CreateBarber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberShopServer).CreateBarber(ctx, req.(*CreateBarberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberShop_LoginBarber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginBarberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberShopServer).LoginBarber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BarberShop/LoginBarber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberShopServer).LoginBarber(ctx, req.(*LoginBarberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BarberShop_ServiceDesc is the grpc.ServiceDesc for BarberShop service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BarberShop_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.BarberShop",
	HandlerType: (*BarberShopServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBarber",
			Handler:    _BarberShop_CreateBarber_Handler,
		},
		{
			MethodName: "LoginBarber",
			Handler:    _BarberShop_LoginBarber_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_barber_shop.proto",
}
