syntax = "proto3";

package pb;

import "barber/rpc_barber_roles_update.proto";


import "barber/rpc_barbershop_chains_create.proto";
import "barber/rpc_barbershop_chains_get.proto";
import "barber/rpc_barbershop_chains_update.proto";
import "barber/rpc_barbershop_chains_delete.proto";


import "barber/rpc_barbershops_create.proto";
import "barber/rpc_barbershops_get.proto";
import "barber/rpc_barbershops_update.proto";
import "barber/rpc_barbershops_delete.proto";
import "barber/rpc_barbershops_list_nearby.proto";
import "barber/rpc_barbershops_search_by_name.proto";


import "barber/rpc_barbers_create.proto";
import "barber/rpc_barbers_get.proto";
import "barber/rpc_barbers_update.proto";
import "barber/rpc_barber_login.proto";
import "barber/rpc_barber_refresh_token.proto";


import "barber/rpc_barber_managers_create.proto";
import "barber/rpc_barber_managers_list.proto";
import "barber/rpc_barber_managers_delete.proto";

import "barber/rpc_appointments_create.proto";
import "barber/rpc_appointments_list_bydate.proto";

import "barber/rpc_service_categories_create.proto";
import "barber/rpc_service_categories_get.proto";
import "barber/rpc_service_categories_delete.proto";
import "barber/rpc_service_categories_update.proto";

import "barber/rpc_barbershop_service_categories_create.proto";


import "google/api/annotations.proto";

import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "barbershop/src/pb/barber";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    info: {
      title: "Barber Shop API",
      version: "1.0";
      contact: {
        name: "Thinh Kai";
        url: "";
        email: "dvanthinh06@gmail.com";
      };
    //   license: {
    //     name: "BSD 3-Clause License";
    //     url: "https://github.com/grpc-ecosystem/grpc-gateway/blob/main/LICENSE";
    //   };
    //   extensions: {
    //     key: "x-something-something";
    //     value {string_value: "yadda"}
    //   }
    };
};

service BarberService {
  
  /// BARBER ROLES
rpc UpdateBarberRoles (UpdateBarberRolesRequest) returns (UpdateBarberRolesResponse){
  option (google.api.http) = {
    put: "/v1/barber-roles"
    body: "*"
  };
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
  description: "API endpoint to update role_id a barber roles"
  summary: "Update barber roles"
  tags: "barber roles"
};
}

//BARBERSHOP 
// chains
rpc CreateBarberShopChains (CreateBarberShopChainsRequest) returns (CreateBarberShopChainsResponse){
  option (google.api.http) = {
    post: "/v1/barbershop-chains"
    body: "*"
  };
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
  description: "API endpoint to create a barber shop chains"
  summary: "Create barber chains"
  tags: "barber shop chains"
};
}
rpc GetBarberShopChains (GetBarberShopChainsRequest) returns (GetBarberShopChainsResponse){
  option (google.api.http) = {
    get: "/v1/barbershop-chains/{id}"
  };
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
  description: "API endpoint to get a barber shop chains"
  summary: "Get barber chains"
  tags: "barber shop chains"
};
}

rpc UpdateBarberShopChains (UpdateBarberShopChainsRequest) returns (UpdateBarberShopChainsResponse){
  option (google.api.http) = {
    put: "/v1/barbershop-chains"
    body: "*"
  };
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
  description: "API endpoint to update role_id a barber roles"
  summary: "Update barber shop chain"
  tags: "barber shop chains"
};
}

rpc DeleteBarberShopChains (DeleteBarberShopChainsRequest) returns (DeleteBarberShopChainsResponse){
  option (google.api.http) = {
    delete: "/v1/barbershop-chains/{id}"
  };
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
  description: "API endpoint to delete a barber shop chains"
  summary: "Delete barber chains"
  tags: "barber shop chains"
};
}

///barbershops
rpc CreateBarberShops (CreateBarberShopsRequest) returns (CreateBarberShopsResponse){
  option (google.api.http) = {
            post: "/v1/barbershops"
            body: "*"
          };
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    description: "API endpoint to create a new barber shop"
    summary: "Create a barber shop shop"
    tags: "barber shops"
  };
}

rpc GetBarberShops (GetBarberShopsRequest) returns (GetBarberShopsResponse){
  option (google.api.http) = {
            get: "/v1/barbershops/{id}"
            };
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    description: "API endpoint to create a new barber shop"
    summary: "Get a details barber shop"
    tags: "barber shops"
  };
}

rpc SearchByNameBarberShops (SearchByNameBarberShopsRequest) returns (SearchByNameBarberShopsResponse){
  option (google.api.http) = {
            post: "/v1/barbershops/{name}"
            body: "*"
          };
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    description: "API endpoint to query a new barber shop"
    summary: "Query barber shop"
    tags: "barber shops"
  };
}

rpc ListNearbyBarberShops (ListNearbyBarberShopsRequest) returns (ListNearbyBarberShopsResponse){
  option (google.api.http) = {
            post: "/v1/barbershops/nearby"
            body: "*"
          };
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    description: "API endpoint to update a new barber shop"
    summary: "Delete barber shop"
    tags: "barber shops"
  };
}

rpc UpdateBarberShops (UpdateBarberShopsRequest) returns (UpdateBarberShopsResponse){
  option (google.api.http) = {
            patch: "/v1/barbershops/{id}"
            body:  "*"
            };
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    description: "API endpoint to update a new barber shop"
    summary: "Update barber shop"
    tags: "barber shops"
  };
}

rpc DeleteBarberShops (DeleteBarberShopsRequest) returns (DeleteBarberShopsResponse){
  option (google.api.http) = {
            delete: "/v1/barbershops/{id}"
          };
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    description: "API endpoint to update a new barber shop"
    summary: "Delete barber shop"
    tags: "barber shops"
  };
}

// BARBERMANAGERS
rpc CreateBarberManagers (CreateBarberManagersRequest) returns (CreateBarberManagersResponse){
  option (google.api.http) = {
            post: "/v1/barber-managers"
            body: "*"
          };
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    description: "API endpoint to create a new barber manager"
    summary: "Create a barber manager"
    tags: "barber managers"
  };
}

rpc ListBarberManagers (ListBarberManagersRequest) returns (ListBarberManagersResponse){
  option (google.api.http) = {
            get: "/v1/barber-managers/{id}"
          };
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    description: "API endpoint to get detail barber manager"
    summary: "Get a barber manager"
    tags: "barber managers"
  };
}

rpc DeleteBarberManagers (DeleteBarberManagersRequest) returns (DeleteBarberManagersResponse){
  option (google.api.http) = {
            delete: "/v1/barber-managers"
          };
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    description: "API endpoint to get detail barber manager"
    summary: "Delete a barber manager"
    tags: "barber managers"
  };
}

  // service categories
  rpc CreateBarberShopServiceCategories (CreateBarberShopServiceCategoriesRequest) returns (CreateBarberShopServiceCategoriesResponse){
    option (google.api.http) = {
              post: "/v1/barbershop/service-categories"
              body: "*"
            };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "API endpoint to create a new barber"
      summary: "Create a service category"
      tags: "barber shops"
    };
  }



/// SERVICE CATEGORIES
rpc CreateServiceCategories (CreateServiceCategoriesRequest) returns (CreateServiceCategoriesResponse){
  option (google.api.http) = {
    post: "/v1/service-categories"
    body: "*"
  };
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
  description: "API endpoint to create a service category"
  summary: "Create service categories"
  tags: "service categories"
};
}
rpc GetServiceCategories (GetServiceCategoriesRequest) returns (GetServiceCategoriesResponse){
  option (google.api.http) = {
    get: "/v1/service-categories/{id}"
  };
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
  description: "API endpoint to get a service category"
  summary: "Get service categories"
  tags: "service categories"
};
}

rpc UpdateServiceCategories (UpdateServiceCategoriesRequest) returns (UpdateServiceCategoriesResponse){
  option (google.api.http) = {
    patch: "/v1/service-categories/{id}"
    body: "*"
  };
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
  description: "API endpoint to update a service category"
  summary: "Update service categories"
  tags: "service categories"
};
}

rpc DeleteServiceCategories (DeleteServiceCategoriesRequest) returns (DeleteServiceCategoriesResponse){
  option (google.api.http) = {
    delete: "/v1/service-categories/{id}"
  };
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
  description: "API endpoint to delete a service category"
  summary: "Delete service categories"
  tags: "service categories"
};
}

// Appointments
rpc CreateAppointments (CreateAppointmentsRequest) returns (CreateAppointmentsResponse){
  option (google.api.http) = {
            post: "/v1/appointments"
            body: "*"
          };
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    description: "API endpoint to create a new appointment"
    summary: "Create a appointments"
    tags: "appointments"

  };
}

rpc ListAppointmentsByDate (ListAppointmentsByDateRequest) returns (ListAppointmentsByDateResponse){
option (google.api.http) = {
          get: "/v1/appointments"
        };
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
  description: "API endpoint to list appointments by date"
  summary: "list appointments by date"
  tags: "appointments"
};
}

// Barber
    rpc CreateBarber (CreateBarbersRequest) returns (CreateBarbersResponse){
        option (google.api.http) = {
                  post: "/v1/barber"
                  body: "*"
                };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
          description: "API endpoint to create a new barber"
          summary: "Create a barber shop"
          tags: "barbers"

        };
    }
    
    rpc GetBarber (GetBarbersRequest) returns (GetBarbersResponse){
      option (google.api.http) = {
                get: "/v1/barber/{id}"
              };
      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        description: "API endpoint to create a new barber"
        summary: "Create a barber"
        tags: "barbers"
      };
    }


    rpc UpdateBarber (UpdateBarbersRequest) returns (UpdateBarbersResponse) {
      option (google.api.http) = {
        patch: "/v1/barber"
        body: "*"
      };
      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        description: "API endpoint for barber authentication" 
        summary: "Authenticate a barber"
        tags: "barbers"
      };
    }

    
    rpc LoginBarber (LoginBarberRequest) returns (LoginBarberResponse) {
      option (google.api.http) = {
        post: "/v1/barber/login"
        body: "*"
      };
      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        description: "API endpoint for barber authentication" 
        summary: "Authenticate a barber"
        tags: "barbers"
      };
    }
    rpc RefreshTokenBarber (RefreshTokenBarberRequest) returns (RefreshTokenBarberResponse) {
      option (google.api.http) = {
        post: "/v1/barber/refresh-token"
        body: "*"
      };
      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        description: "API endpoint for barber authentication" 
        summary: "Authenticate a barber"
        tags: "barbers"
      };
    }
}
    
