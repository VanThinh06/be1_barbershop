syntax = "proto3";

package pb;

import "barber/rpc_barber_roles_create.proto";
import "barber/rpc_barber_roles_get.proto";
import "barber/rpc_barber_roles_list.proto";
import "barber/rpc_barber_roles_update.proto";
import "barber/rpc_barber_roles_delete.proto";



import "barber/rpc_barber_create.proto";
import "barber/rpc_barber_get.proto";
import "barber/rpc_barber_update.proto";
import "barber/rpc_barber_login.proto";
import "barber/rpc_barber_refresh_token.proto";

import "barber/rpc_barbershop_create.proto";
import "barber/rpc_barbershop_update.proto";
import "barber/rpc_barbershop_query.proto";

import "google/api/annotations.proto";
import "barber/rpc_create_service_category.proto";
import "barber/rpc_create_service.proto";
import "barber/rpc_find_barbershops_nearby.proto";
import "barber/rpc_code_barbershop.proto";
import "barber/rpc_create_chain.proto";
import "barber/rpc_get_services.proto";
import "barber/rpc_get_service_categories.proto";
import "barber/rpc_get_service_details.proto";
import "barber/rpc_get_barbers_in_barbershop.proto";
import "barber/rpc_barbershop_get.proto";


import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "barbershop/src/pb/barber";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    info: {
      title: "Barber Shop API",
      version: "1.0";
      contact: {
        name: "Thinh Kai";
        url: "";
        email: "dvanthinh06@gmail.com";
      };
    //   license: {
    //     name: "BSD 3-Clause License";
    //     url: "https://github.com/grpc-ecosystem/grpc-gateway/blob/main/LICENSE";
    //   };
    //   extensions: {
    //     key: "x-something-something";
    //     value {string_value: "yadda"}
    //   }
    };
};

service BarberService {
  
  rpc CreateBarberRoles (CreateBarberRolesRequest) returns (CreateBarberRolesResponse){
      option (google.api.http) = {
        post: "/v1/barber-roles"
        body: "*"
      };
      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "API endpoint to create a barber roles"
      summary: "Create a barber roles"
      tags: "barber roles"
    };
  }

  rpc GetBarberRoles (GetBarberRolesRequest) returns (GetBarberRolesResponse){
    option (google.api.http) = {
      get: "/v1/barber-roles"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    description: "API endpoint to get a barber roles"
    summary: "Get a barber roles"
    tags: "barber roles"
  };
}

  rpc ListBarberRoles (ListBarberRolesRequest) returns (ListBarberRolesResponse){
    option (google.api.http) = {
      get: "/v1/barber-roles/{barbershop_id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    description: "API endpoint to get list barber roles"
    summary: "List barber roles"
    tags: "barber roles"
  };
}

rpc UpdateBarberRoles (UpdateBarberRolesRequest) returns (UpdateBarberRolesResponse){
  option (google.api.http) = {
    put: "/v1/barber-roles"
    body: "*"
  };
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
  description: "API endpoint to update role_id a barber roles"
  summary: "Update barber roles"
  tags: "barber roles"
};
}

rpc DeleteBarberRoles (DeleteBarberRolesRequest) returns (DeleteBarberRolesResponse){
  option (google.api.http) = {
    delete: "/v1/barber-roles/{id}"
  };
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
  description: "API endpoint to delete a barber roles"
  summary: "Delete barber roles"
  tags: "barber roles"
};
}


    rpc CreateBarber (CreateBarberRequest) returns (CreateBarberResponse){
        option (google.api.http) = {
                  post: "/v1/barber"
                  body: "*"
                };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
          description: "API endpoint to create a new barber"
          summary: "Create a barber"
          tags: "barber"

        };
    }
    
    rpc GetBarber (GetBarberRequest) returns (GetBarberResponse){
      option (google.api.http) = {
                get: "/v1/barber/{barber_id}"
              };
      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        description: "API endpoint to create a new barber"
        summary: "Create a barber"
        tags: "barber"
      };
    }


    rpc UpdateBarber (UpdateBarberRequest) returns (UpdateBarberResponse) {
      option (google.api.http) = {
        patch: "/v1/barber"
        body: "*"
      };
      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        description: "API endpoint for barber authentication" 
        summary: "Authenticate a barber"
        tags: "barber"
      };
    }

    
    rpc LoginBarber (LoginBarberRequest) returns (LoginBarberResponse) {
      option (google.api.http) = {
        post: "/v1/barber/login"
        body: "*"
      };
      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        description: "API endpoint for barber authentication" 
        summary: "Authenticate a barber"
        tags: "barber"
      };
    }
    rpc RefreshTokenBarber (RefreshTokenBarberRequest) returns (RefreshTokenBarberResponse) {
      option (google.api.http) = {
        post: "/v1/barber/refresh-token"
        body: "*"
      };
      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        description: "API endpoint for barber authentication" 
        summary: "Authenticate a barber"
        tags: "barber"

      };
    }


  rpc FindBarberShopsNearby (FindBarberShopsNearbyRequest) returns (FindBarberShopsNearbyResponse){
    option (google.api.http) = {
              post: "/v1/barbershop/nearby"
              body: "*"
            };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "API endpoint to create a new barber"
      summary: "find barber shop nearby"
      tags: "barbershop"
    };
  }

      
  rpc CreateBarberShop (CreateBarberShopRequest) returns (CreateBarberShopResponse){
    option (google.api.http) = {
              post: "/v1/manager/barbershop"
              body: "*"
            };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "API endpoint to create a new barber"
      summary: "Create a barber"
      tags: "barbershop"
    };
}

      
rpc GetBarberShop (GetBarberShopRequest) returns (GetBarberShopResponse){
  option (google.api.http) = {
            get: "/v1/barbershop/{shop_id}"
          };
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    description: "API endpoint to create a new barber"
    summary: "Create a barber"
    tags: "barbershop"
  };
}

rpc UpdateBarberShop (UpdateBarberShopRequest) returns (UpdateBarberShopResponse){
  option (google.api.http) = {
            patch: "/v1/manager/barbershop"
            body: "*"
          };
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    description: "API endpoint to create a new barber"
    summary: "Update a barbershop"
    tags: "barbershop"
  };
}

rpc QueryBarberShops (QueryBarberShopsRequest) returns (QueryBarberShopsResponse){
  option (google.api.http) = {
            get: "/v1/barbershop/query"
          };
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    description: "API endpoint to create a new barber"
    summary: "Update a barbershop"
    tags: "barbershop"
  };
}

rpc GenerateCodeBarberShop (CodeBarberShopRequest) returns (CodeBarberShopResponse){
  option (google.api.http) = {
            post: "/v1/manager/generate-code"
            body: "*"
          };
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    description: "API endpoint to create a new barber"
    summary: "Create a service category"
};
}

rpc GetBarberInShop (GetBarberInShopRequest) returns (GetBarberInShopResponse){
  option (google.api.http) = {
            post: "/v1/barbershop/barbers"
            body: "*"
          };
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    description: "API endpoint to create a new barber"
    summary: "Create a service category"
};


}

  /// service
  rpc CreateServiceCategory (CreateServiceCategoryRequest) returns (CreateServiceCategoryResponse){
    option (google.api.http) = {
              post: "/v1/manager/service-category"
              body: "*"
            };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "API endpoint to create a new barber"
      summary: "Create a service category"
      tags: "Service"
    };
  }

  rpc CreateServiceCategoryPrivate (CreateServiceCategoryPrivateRequest) returns (CreateServiceCategoryResponse){
    option (google.api.http) = {
              post: "/v1/manager/service-category/private"
              body: "*"
            };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "API endpoint to create a new barber"
      summary: "Create a service category"
      tags: "Service"
    };
  }

  rpc GetServiceCategories (GetServiceCategoriesRequest) returns (GetServiceCategoriesResponse){
    option (google.api.http) = {
              get: "/v1/service-categories/{shop_id}"
            };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "API endpoint to create a new barber"
      summary: "Create a service category"
      tags: "Service"
    };
  }
  
  rpc CreateService (CreateServiceRequest) returns (CreateServiceResponse){
      option (google.api.http) = {
                post: "/v1/manager/service"
                body: "*"
              };
      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        description: "API endpoint to create a new barber"
        summary: "Create a service category"
        tags: "Service"
      };
    }
    
    rpc CreateServicePrivate (CreateServicePrivateRequest) returns (CreateServiceResponse){
      option (google.api.http) = {
                post: "/v1/manager/service/private"
                body: "*"
              };
      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        description: "API endpoint to create a new barber"
        summary: "Create a service category"
        tags: "Service"
      };
    }

    rpc GetServices (GetServicesRequest) returns (GetServicesResponse){
      option (google.api.http) = {
                post: "/v1/services"
                body: "*"
              };
      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        description: "API endpoint to create a new barber"
        summary: "Create a service category"
        tags: "Service"
      };
    }

    rpc GetServiceDetails (GetServiceDetailsRequest) returns (GetServiceDetailsResponse){
      option (google.api.http) = {
                post: "/v1/service-details"
                body: "*"
              };
      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        description: "API endpoint to create a new barber"
        summary: "Create a service category"
        tags: "Service"
      };
    }

    ///Chain 
    rpc CreateChain (CreateChainRequest) returns (CreateChainResponse){
      option (google.api.http) = {
                post: "/v1/manager/chain"
                body: "*"
              };
      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        description: "API endpoint to create a new barber"
        summary: "Create a service category"
      };
    }
}
