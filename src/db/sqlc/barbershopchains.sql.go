// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: barbershopchains.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createBarberShopChains = `-- name: CreateBarberShopChains :one
INSERT INTO "BarberShopChains" ("name")
VALUES ($1)
RETURNING id, name, create_at, update_at
`

func (q *Queries) CreateBarberShopChains(ctx context.Context, name string) (BarberShopChain, error) {
	row := q.db.QueryRowContext(ctx, createBarberShopChains, name)
	var i BarberShopChain
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreateAt,
		&i.UpdateAt,
	)
	return i, err
}

const deleteBarberShopChain = `-- name: DeleteBarberShopChain :exec
DELETE FROM "BarberShopChains"
WHERE "id" = $1
RETURNING id, name, create_at, update_at
`

func (q *Queries) DeleteBarberShopChain(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteBarberShopChain, id)
	return err
}

const updateBarberShopChain = `-- name: UpdateBarberShopChain :one
UPDATE "BarberShopChains"
SET "name" = $1
WHERE "id" = $2
RETURNING id, name, create_at, update_at
`

type UpdateBarberShopChainParams struct {
	Name string    `json:"name"`
	ID   uuid.UUID `json:"id"`
}

func (q *Queries) UpdateBarberShopChain(ctx context.Context, arg UpdateBarberShopChainParams) (BarberShopChain, error) {
	row := q.db.QueryRowContext(ctx, updateBarberShopChain, arg.Name, arg.ID)
	var i BarberShopChain
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreateAt,
		&i.UpdateAt,
	)
	return i, err
}
