// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: lookup.sql

package db

import (
	"context"
)

const getDistricts = `-- name: GetDistricts :many
SELECT id, name, province_id
FROM "Districts"
WHERE province_id = $1
`

func (q *Queries) GetDistricts(ctx context.Context, provinceID int16) ([]District, error) {
	rows, err := q.db.QueryContext(ctx, getDistricts, provinceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []District{}
	for rows.Next() {
		var i District
		if err := rows.Scan(&i.ID, &i.Name, &i.ProvinceID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProvinces = `-- name: GetProvinces :many
SELECT id, name
FROM "Provinces"
`

func (q *Queries) GetProvinces(ctx context.Context) ([]Province, error) {
	rows, err := q.db.QueryContext(ctx, getProvinces)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Province{}
	for rows.Next() {
		var i Province
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWards = `-- name: GetWards :many
SELECT id, name, district_id
FROM "Wards"
WHERE district_id = $1
`

func (q *Queries) GetWards(ctx context.Context, districtID int16) ([]Ward, error) {
	rows, err := q.db.QueryContext(ctx, getWards, districtID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Ward{}
	for rows.Next() {
		var i Ward
		if err := rows.Scan(&i.ID, &i.Name, &i.DistrictID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
