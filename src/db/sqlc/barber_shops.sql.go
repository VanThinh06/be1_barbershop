// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: barber_shops.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgtype"
)

const barberShopInChain = `-- name: BarberShopInChain :one
SELECT EXISTS (
  SELECT 1
  FROM "BarberShops"
  WHERE "owner_id" = $1
    AND "chain_id" IS NULL
) AS "barbershop_not_in_chain"
`

func (q *Queries) BarberShopInChain(ctx context.Context, ownerID uuid.UUID) (bool, error) {
	row := q.db.QueryRowContext(ctx, barberShopInChain, ownerID)
	var barbershop_not_in_chain bool
	err := row.Scan(&barbershop_not_in_chain)
	return barbershop_not_in_chain, err
}

const createBarberShop = `-- name: CreateBarberShop :one

INSERT INTO "BarberShops" (
                           owner_id,
                           chain_id,
                           name,
                           coordinates,
                           address,
                           image,
                           facility
                           )
VALUES (
        $1,
        $2,
        $3,
        ST_GeographyFromText('POINT(' || $4::float8 || ' ' || $5::float8 || ')'),
        $6,
        $7,
        $8
        ) RETURNING id, owner_id, chain_id, name, facility, address, coordinates, image, status, rate, start_time, end_time, break_time, break_minutes, interval_scheduler, reputation, created_at, updated_at
`

type CreateBarberShopParams struct {
	OwnerID   uuid.UUID      `json:"owner_id"`
	ChainID   uuid.NullUUID  `json:"chain_id"`
	Name      string         `json:"name"`
	Longitude float64        `json:"longitude"`
	Latitude  float64        `json:"latitude"`
	Address   string         `json:"address"`
	Image     sql.NullString `json:"image"`
	Facility  int32          `json:"facility"`
}

func (q *Queries) CreateBarberShop(ctx context.Context, arg CreateBarberShopParams) (BarberShop, error) {
	row := q.db.QueryRowContext(ctx, createBarberShop,
		arg.OwnerID,
		arg.ChainID,
		arg.Name,
		arg.Longitude,
		arg.Latitude,
		arg.Address,
		arg.Image,
		arg.Facility,
	)
	var i BarberShop
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.ChainID,
		&i.Name,
		&i.Facility,
		&i.Address,
		&i.Coordinates,
		&i.Image,
		&i.Status,
		&i.Rate,
		&i.StartTime,
		&i.EndTime,
		&i.BreakTime,
		&i.BreakMinutes,
		&i.IntervalScheduler,
		&i.Reputation,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findBarberShopsNearbyLocations = `-- name: FindBarberShopsNearbyLocations :many

SELECT
    id,
    owner_id,
    status,
    name,
    coordinates,
    address,
    image,
    created_at,
    CAST(ST_X(ST_GeomFromWKB(coordinates::geometry)) AS float8) AS longitude,
    CAST(ST_Y(ST_GeomFromWKB(coordinates::geometry)) AS float8) AS latitude,
    CAST(ST_Distance(
        ST_SetSRID(ST_MakePoint($1::float, $2::float), 4326),
        coordinates::geography
    ) AS float) AS distance
FROM "BarberShops"
WHERE  ST_Distance(coordinates, ST_SetSRID(ST_MakePoint($1::float, $2::float), 4326)) <= $3::int
ORDER BY ST_Distance(coordinates, ST_SetSRID(ST_MakePoint($1::float, $2::float), 4326))
`

type FindBarberShopsNearbyLocationsParams struct {
	CurrentLongitude float64 `json:"current_longitude"`
	CurrentLatitude  float64 `json:"current_latitude"`
	DistanceInMeters int32   `json:"distance_in_meters"`
}

type FindBarberShopsNearbyLocationsRow struct {
	ID          uuid.UUID      `json:"id"`
	OwnerID     uuid.UUID      `json:"owner_id"`
	Status      int32          `json:"status"`
	Name        string         `json:"name"`
	Coordinates string         `json:"coordinates"`
	Address     string         `json:"address"`
	Image       sql.NullString `json:"image"`
	CreatedAt   time.Time      `json:"created_at"`
	Longitude   float64        `json:"longitude"`
	Latitude    float64        `json:"latitude"`
	Distance    float64        `json:"distance"`
}

func (q *Queries) FindBarberShopsNearbyLocations(ctx context.Context, arg FindBarberShopsNearbyLocationsParams) ([]FindBarberShopsNearbyLocationsRow, error) {
	rows, err := q.db.QueryContext(ctx, findBarberShopsNearbyLocations, arg.CurrentLongitude, arg.CurrentLatitude, arg.DistanceInMeters)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FindBarberShopsNearbyLocationsRow{}
	for rows.Next() {
		var i FindBarberShopsNearbyLocationsRow
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.Status,
			&i.Name,
			&i.Coordinates,
			&i.Address,
			&i.Image,
			&i.CreatedAt,
			&i.Longitude,
			&i.Latitude,
			&i.Distance,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBarberShop = `-- name: GetBarberShop :one

SELECT id, owner_id, chain_id, name, facility, address, coordinates, image, status, rate, start_time, end_time, break_time, break_minutes, interval_scheduler, reputation, created_at, updated_at
FROM "BarberShops"
WHERE id = $1
`

func (q *Queries) GetBarberShop(ctx context.Context, id uuid.UUID) (BarberShop, error) {
	row := q.db.QueryRowContext(ctx, getBarberShop, id)
	var i BarberShop
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.ChainID,
		&i.Name,
		&i.Facility,
		&i.Address,
		&i.Coordinates,
		&i.Image,
		&i.Status,
		&i.Rate,
		&i.StartTime,
		&i.EndTime,
		&i.BreakTime,
		&i.BreakMinutes,
		&i.IntervalScheduler,
		&i.Reputation,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const queryBarberShops = `-- name: QueryBarberShops :many
SELECT bs.id, bs.owner_id, bs.chain_id, bs.name, bs.facility, bs.address, bs.coordinates, bs.image, bs.status, bs.rate, bs.start_time, bs.end_time, bs.break_time, bs.break_minutes, bs.interval_scheduler, bs.reputation, bs.created_at, bs.updated_at
FROM "BarberShops" bs
WHERE bs."name" = $1
  OR bs."chain_id" IN (
    SELECT c."chain_id"
    FROM "Chains" c
    WHERE c."name" = $1
)
`

func (q *Queries) QueryBarberShops(ctx context.Context, name string) ([]BarberShop, error) {
	rows, err := q.db.QueryContext(ctx, queryBarberShops, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []BarberShop{}
	for rows.Next() {
		var i BarberShop
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.ChainID,
			&i.Name,
			&i.Facility,
			&i.Address,
			&i.Coordinates,
			&i.Image,
			&i.Status,
			&i.Rate,
			&i.StartTime,
			&i.EndTime,
			&i.BreakTime,
			&i.BreakMinutes,
			&i.IntervalScheduler,
			&i.Reputation,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBarberShop = `-- name: UpdateBarberShop :one
UPDATE "BarberShops"
SET 
    name = coalesce($2, name),
    facility = coalesce($3, facility),
    address = coalesce($4, address),
    coordinates = coalesce(ST_GeographyFromText('POINT(' || $5::float8 || ' ' || $6::float8 || ')'), coordinates),
    image = coalesce($7, image),
    start_time = coalesce($8, start_time),
    end_time = coalesce($9, end_time),
    break_time = coalesce($10, break_time),
    status = coalesce($11, status),
    interval_scheduler = coalesce($12, interval_scheduler),
    updated_at = now()
WHERE "id" = $1
RETURNING id, owner_id, chain_id, name, facility, address, coordinates, image, status, rate, start_time, end_time, break_time, break_minutes, interval_scheduler, reputation, created_at, updated_at
`

type UpdateBarberShopParams struct {
	ID                uuid.UUID       `json:"id"`
	Name              sql.NullString  `json:"name"`
	Facility          sql.NullInt32   `json:"facility"`
	Address           sql.NullString  `json:"address"`
	Longitude         sql.NullFloat64 `json:"longitude"`
	Latitude          sql.NullFloat64 `json:"latitude"`
	Image             sql.NullString  `json:"image"`
	StartTime         pgtype.Time     `json:"start_time"`
	EndTime           pgtype.Time     `json:"end_time"`
	BreakTime         pgtype.Time     `json:"break_time"`
	Status            sql.NullInt32   `json:"status"`
	IntervalScheduler sql.NullInt32   `json:"interval_scheduler"`
}

func (q *Queries) UpdateBarberShop(ctx context.Context, arg UpdateBarberShopParams) (BarberShop, error) {
	row := q.db.QueryRowContext(ctx, updateBarberShop,
		arg.ID,
		arg.Name,
		arg.Facility,
		arg.Address,
		arg.Longitude,
		arg.Latitude,
		arg.Image,
		arg.StartTime,
		arg.EndTime,
		arg.BreakTime,
		arg.Status,
		arg.IntervalScheduler,
	)
	var i BarberShop
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.ChainID,
		&i.Name,
		&i.Facility,
		&i.Address,
		&i.Coordinates,
		&i.Image,
		&i.Status,
		&i.Rate,
		&i.StartTime,
		&i.EndTime,
		&i.BreakTime,
		&i.BreakMinutes,
		&i.IntervalScheduler,
		&i.Reputation,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateChainForBarberShops = `-- name: UpdateChainForBarberShops :exec
UPDATE "BarberShops"
SET "chain_id" = $2::uuid
WHERE "owner_id" = $1 AND "chain_id" IS NULL
`

type UpdateChainForBarberShopsParams struct {
	OwnerID uuid.UUID `json:"owner_id"`
	ChainID uuid.UUID `json:"chain_id"`
}

func (q *Queries) UpdateChainForBarberShops(ctx context.Context, arg UpdateChainForBarberShopsParams) error {
	_, err := q.db.ExecContext(ctx, updateChainForBarberShops, arg.OwnerID, arg.ChainID)
	return err
}
