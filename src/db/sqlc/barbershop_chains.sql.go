// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: barbershop_chains.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createBarberShopChains = `-- name: CreateBarberShopChains :one
INSERT INTO "BarberShopChains" ("name", "description", "founder", "founding_date", website)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, name, description, founder, founding_date, website, create_at, update_at
`

type CreateBarberShopChainsParams struct {
	Name         string         `json:"name"`
	Description  sql.NullString `json:"description"`
	Founder      string         `json:"founder"`
	FoundingDate time.Time      `json:"founding_date"`
	Website      sql.NullString `json:"website"`
}

func (q *Queries) CreateBarberShopChains(ctx context.Context, arg CreateBarberShopChainsParams) (BarberShopChain, error) {
	row := q.db.QueryRowContext(ctx, createBarberShopChains,
		arg.Name,
		arg.Description,
		arg.Founder,
		arg.FoundingDate,
		arg.Website,
	)
	var i BarberShopChain
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Founder,
		&i.FoundingDate,
		&i.Website,
		&i.CreateAt,
		&i.UpdateAt,
	)
	return i, err
}

const deleteBarberShopChains = `-- name: DeleteBarberShopChains :exec
DELETE FROM "BarberShopChains"
WHERE "id" = $1
`

func (q *Queries) DeleteBarberShopChains(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteBarberShopChains, id)
	return err
}

const getBarberShopChains = `-- name: GetBarberShopChains :one
SELECT id, name, description, founder, founding_date, website, create_at, update_at
FROM "BarberShopChains"
WHERE "id" = $1
`

func (q *Queries) GetBarberShopChains(ctx context.Context, id uuid.UUID) (BarberShopChain, error) {
	row := q.db.QueryRowContext(ctx, getBarberShopChains, id)
	var i BarberShopChain
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Founder,
		&i.FoundingDate,
		&i.Website,
		&i.CreateAt,
		&i.UpdateAt,
	)
	return i, err
}

const updateBarberShopChains = `-- name: UpdateBarberShopChains :one
UPDATE "BarberShopChains"
SET "name" = coalesce($1, name),
    "description" = coalesce($2, description),
    founder = coalesce($3,founder),
    founding_date = coalesce($4, founding_date),
    website = coalesce($5, website),
    "update_at" = NOW()
WHERE "id" = $6
RETURNING id, name, description, founder, founding_date, website, create_at, update_at
`

type UpdateBarberShopChainsParams struct {
	Name         sql.NullString `json:"name"`
	Description  sql.NullString `json:"description"`
	Founder      sql.NullString `json:"founder"`
	FoundingDate sql.NullTime   `json:"founding_date"`
	Website      sql.NullString `json:"website"`
	ID           uuid.UUID      `json:"id"`
}

func (q *Queries) UpdateBarberShopChains(ctx context.Context, arg UpdateBarberShopChainsParams) (BarberShopChain, error) {
	row := q.db.QueryRowContext(ctx, updateBarberShopChains,
		arg.Name,
		arg.Description,
		arg.Founder,
		arg.FoundingDate,
		arg.Website,
		arg.ID,
	)
	var i BarberShopChain
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Founder,
		&i.FoundingDate,
		&i.Website,
		&i.CreateAt,
		&i.UpdateAt,
	)
	return i, err
}
