// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: barbers.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgtype"
)

const createBarber = `-- name: CreateBarber :one
INSERT INTO "Barbers" (
    gender_id,
    email,
    phone,
    hashed_password,
    nick_name,
    full_name,
    avatar_url
  )
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7
  )
RETURNING id, gender_id, email, phone, hashed_password, nick_name, full_name, haircut, avatar_url, password_changed_at, create_at, update_at
`

type CreateBarberParams struct {
	GenderID       sql.NullInt32  `json:"gender_id"`
	Email          string         `json:"email"`
	Phone          string         `json:"phone"`
	HashedPassword string         `json:"hashed_password"`
	NickName       string         `json:"nick_name"`
	FullName       string         `json:"full_name"`
	AvatarUrl      sql.NullString `json:"avatar_url"`
}

func (q *Queries) CreateBarber(ctx context.Context, arg CreateBarberParams) (Barber, error) {
	row := q.db.QueryRowContext(ctx, createBarber,
		arg.GenderID,
		arg.Email,
		arg.Phone,
		arg.HashedPassword,
		arg.NickName,
		arg.FullName,
		arg.AvatarUrl,
	)
	var i Barber
	err := row.Scan(
		&i.ID,
		&i.GenderID,
		&i.Email,
		&i.Phone,
		&i.HashedPassword,
		&i.NickName,
		&i.FullName,
		&i.Haircut,
		&i.AvatarUrl,
		&i.PasswordChangedAt,
		&i.CreateAt,
		&i.UpdateAt,
	)
	return i, err
}

const deleteBarber = `-- name: DeleteBarber :exec
DELETE FROM "Barbers"
WHERE "id" = $1
`

func (q *Queries) DeleteBarber(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteBarber, id)
	return err
}

const getBarber = `-- name: GetBarber :one
SELECT
  b.id, b.gender_id, b.email, b.phone, b.hashed_password, b.nick_name, b.full_name, b.haircut, b.avatar_url, b.password_changed_at, b.create_at, b.update_at, 
  bs."name" as "shop_name",
  bs."address" as "shop_address",
  bs."coordinates" as "shop_coordinates",
  bs."start_time" as "shop_start_time",
  bs."end_time" as "shop_end_time",
  bs."break_time" as "shop_break_time",
  bs."break_minutes" as "shop_break_minutes",
  bs."interval_scheduler" as "shop_interval_scheduler",
  bs."reputation" as "shop_reputation",
  bs."rate" as "shop_rate",
  bs."branch_count" as "shop_branch_count",
  br."role_id" as "barber_role_id",
  br."barbershop_id" as "barber_role_barbershop_id"
FROM
  "Barbers" b
JOIN
  "BarberRoles" br ON b."id" = br."barber_id"
JOIN
  "BarberShops" bs ON br."barbershop_id" = bs."id"
WHERE
  b."id" = $1
  AND bs."id" = $2
`

type GetBarberParams struct {
	ID   uuid.UUID `json:"id"`
	ID_2 uuid.UUID `json:"id_2"`
}

type GetBarberRow struct {
	ID                     uuid.UUID      `json:"id"`
	GenderID               sql.NullInt32  `json:"gender_id"`
	Email                  string         `json:"email"`
	Phone                  string         `json:"phone"`
	HashedPassword         string         `json:"hashed_password"`
	NickName               string         `json:"nick_name"`
	FullName               string         `json:"full_name"`
	Haircut                bool           `json:"haircut"`
	AvatarUrl              sql.NullString `json:"avatar_url"`
	PasswordChangedAt      time.Time      `json:"password_changed_at"`
	CreateAt               time.Time      `json:"create_at"`
	UpdateAt               time.Time      `json:"update_at"`
	ShopName               string         `json:"shop_name"`
	ShopAddress            string         `json:"shop_address"`
	ShopCoordinates        string         `json:"shop_coordinates"`
	ShopStartTime          pgtype.Time    `json:"shop_start_time"`
	ShopEndTime            pgtype.Time    `json:"shop_end_time"`
	ShopBreakTime          pgtype.Time    `json:"shop_break_time"`
	ShopBreakMinutes       int32          `json:"shop_break_minutes"`
	ShopIntervalScheduler  int32          `json:"shop_interval_scheduler"`
	ShopReputation         bool           `json:"shop_reputation"`
	ShopRate               float64        `json:"shop_rate"`
	ShopBranchCount        int32          `json:"shop_branch_count"`
	BarberRoleID           int32          `json:"barber_role_id"`
	BarberRoleBarbershopID uuid.UUID      `json:"barber_role_barbershop_id"`
}

func (q *Queries) GetBarber(ctx context.Context, arg GetBarberParams) (GetBarberRow, error) {
	row := q.db.QueryRowContext(ctx, getBarber, arg.ID, arg.ID_2)
	var i GetBarberRow
	err := row.Scan(
		&i.ID,
		&i.GenderID,
		&i.Email,
		&i.Phone,
		&i.HashedPassword,
		&i.NickName,
		&i.FullName,
		&i.Haircut,
		&i.AvatarUrl,
		&i.PasswordChangedAt,
		&i.CreateAt,
		&i.UpdateAt,
		&i.ShopName,
		&i.ShopAddress,
		&i.ShopCoordinates,
		&i.ShopStartTime,
		&i.ShopEndTime,
		&i.ShopBreakTime,
		&i.ShopBreakMinutes,
		&i.ShopIntervalScheduler,
		&i.ShopReputation,
		&i.ShopRate,
		&i.ShopBranchCount,
		&i.BarberRoleID,
		&i.BarberRoleBarbershopID,
	)
	return i, err
}

const getEmailBarber = `-- name: GetEmailBarber :one
SELECT id, gender_id, email, phone, hashed_password, nick_name, full_name, haircut, avatar_url, password_changed_at, create_at, update_at
FROM "Barbers"
WHERE email = $1
LIMIT 1
`

func (q *Queries) GetEmailBarber(ctx context.Context, email string) (Barber, error) {
	row := q.db.QueryRowContext(ctx, getEmailBarber, email)
	var i Barber
	err := row.Scan(
		&i.ID,
		&i.GenderID,
		&i.Email,
		&i.Phone,
		&i.HashedPassword,
		&i.NickName,
		&i.FullName,
		&i.Haircut,
		&i.AvatarUrl,
		&i.PasswordChangedAt,
		&i.CreateAt,
		&i.UpdateAt,
	)
	return i, err
}

const listBarbersInBarberShop = `-- name: ListBarbersInBarberShop :many
SELECT
  b.id, b.gender_id, b.email, b.phone, b.hashed_password, b.nick_name, b.full_name, b.haircut, b.avatar_url, b.password_changed_at, b.create_at, b.update_at,
  br."role_id" as "barber_role_id"
FROM
  "Barbers" b
JOIN
  "BarberRoles" br ON b."id" = br."barber_id"
WHERE
  br."barbershop_id" = $1
`

type ListBarbersInBarberShopRow struct {
	ID                uuid.UUID      `json:"id"`
	GenderID          sql.NullInt32  `json:"gender_id"`
	Email             string         `json:"email"`
	Phone             string         `json:"phone"`
	HashedPassword    string         `json:"hashed_password"`
	NickName          string         `json:"nick_name"`
	FullName          string         `json:"full_name"`
	Haircut           bool           `json:"haircut"`
	AvatarUrl         sql.NullString `json:"avatar_url"`
	PasswordChangedAt time.Time      `json:"password_changed_at"`
	CreateAt          time.Time      `json:"create_at"`
	UpdateAt          time.Time      `json:"update_at"`
	BarberRoleID      int32          `json:"barber_role_id"`
}

func (q *Queries) ListBarbersInBarberShop(ctx context.Context, barbershopID uuid.UUID) ([]ListBarbersInBarberShopRow, error) {
	rows, err := q.db.QueryContext(ctx, listBarbersInBarberShop, barbershopID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListBarbersInBarberShopRow{}
	for rows.Next() {
		var i ListBarbersInBarberShopRow
		if err := rows.Scan(
			&i.ID,
			&i.GenderID,
			&i.Email,
			&i.Phone,
			&i.HashedPassword,
			&i.NickName,
			&i.FullName,
			&i.Haircut,
			&i.AvatarUrl,
			&i.PasswordChangedAt,
			&i.CreateAt,
			&i.UpdateAt,
			&i.BarberRoleID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBarber = `-- name: UpdateBarber :one
UPDATE "Barbers"
SET 
  gender_id = coalesce($2, gender_id),
  email = coalesce($3, email),
  phone = coalesce($4, phone),
  "hashed_password" = coalesce($5, hashed_password),
  nick_name = coalesce($6, nick_name),
  full_name = coalesce($7, full_name),
  haircut = coalesce($8, haircut),
  avatar_url = coalesce($9, avatar_url),
  "password_changed_at" = coalesce(
    $10,
    password_changed_at
  ),
  "updated_at" = now()
  WHERE "id" = $1
RETURNING id, gender_id, email, phone, hashed_password, nick_name, full_name, haircut, avatar_url, password_changed_at, create_at, update_at
`

type UpdateBarberParams struct {
	ID                uuid.UUID      `json:"id"`
	GenderID          sql.NullInt32  `json:"gender_id"`
	Email             sql.NullString `json:"email"`
	Phone             sql.NullString `json:"phone"`
	HashedPassword    sql.NullString `json:"hashed_password"`
	NickName          sql.NullString `json:"nick_name"`
	FullName          sql.NullString `json:"full_name"`
	Haircut           sql.NullBool   `json:"haircut"`
	AvatarUrl         sql.NullString `json:"avatar_url"`
	PasswordChangedAt sql.NullTime   `json:"password_changed_at"`
}

func (q *Queries) UpdateBarber(ctx context.Context, arg UpdateBarberParams) (Barber, error) {
	row := q.db.QueryRowContext(ctx, updateBarber,
		arg.ID,
		arg.GenderID,
		arg.Email,
		arg.Phone,
		arg.HashedPassword,
		arg.NickName,
		arg.FullName,
		arg.Haircut,
		arg.AvatarUrl,
		arg.PasswordChangedAt,
	)
	var i Barber
	err := row.Scan(
		&i.ID,
		&i.GenderID,
		&i.Email,
		&i.Phone,
		&i.HashedPassword,
		&i.NickName,
		&i.FullName,
		&i.Haircut,
		&i.AvatarUrl,
		&i.PasswordChangedAt,
		&i.CreateAt,
		&i.UpdateAt,
	)
	return i, err
}
