// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: barbers.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createBarber = `-- name: CreateBarber :one
INSERT INTO "Barbers" (
    gender_id,
    email,
    phone,
    hashed_password,
    nick_name,
    full_name
  )
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6
  )
RETURNING id, gender_id, phone, nick_name, email, hashed_password, full_name, haircut, work_status, avatar_url, password_changed_at, create_at
`

type CreateBarberParams struct {
	GenderID       int16          `json:"gender_id"`
	Email          sql.NullString `json:"email"`
	Phone          string         `json:"phone"`
	HashedPassword sql.NullString `json:"hashed_password"`
	NickName       string         `json:"nick_name"`
	FullName       string         `json:"full_name"`
}

func (q *Queries) CreateBarber(ctx context.Context, arg CreateBarberParams) (Barber, error) {
	row := q.db.QueryRow(ctx, createBarber,
		arg.GenderID,
		arg.Email,
		arg.Phone,
		arg.HashedPassword,
		arg.NickName,
		arg.FullName,
	)
	var i Barber
	err := row.Scan(
		&i.ID,
		&i.GenderID,
		&i.Phone,
		&i.NickName,
		&i.Email,
		&i.HashedPassword,
		&i.FullName,
		&i.Haircut,
		&i.WorkStatus,
		&i.AvatarUrl,
		&i.PasswordChangedAt,
		&i.CreateAt,
	)
	return i, err
}

const createBarberEmployee = `-- name: CreateBarberEmployee :one
INSERT INTO "Barbers" (
    phone,
    hashed_password,
    nick_name,
    full_name
  )
VALUES (
    $1,
    $2,
    $3,
    $4
  )
RETURNING id, gender_id, phone, nick_name, email, hashed_password, full_name, haircut, work_status, avatar_url, password_changed_at, create_at
`

type CreateBarberEmployeeParams struct {
	Phone          string         `json:"phone"`
	HashedPassword sql.NullString `json:"hashed_password"`
	NickName       string         `json:"nick_name"`
	FullName       string         `json:"full_name"`
}

func (q *Queries) CreateBarberEmployee(ctx context.Context, arg CreateBarberEmployeeParams) (Barber, error) {
	row := q.db.QueryRow(ctx, createBarberEmployee,
		arg.Phone,
		arg.HashedPassword,
		arg.NickName,
		arg.FullName,
	)
	var i Barber
	err := row.Scan(
		&i.ID,
		&i.GenderID,
		&i.Phone,
		&i.NickName,
		&i.Email,
		&i.HashedPassword,
		&i.FullName,
		&i.Haircut,
		&i.WorkStatus,
		&i.AvatarUrl,
		&i.PasswordChangedAt,
		&i.CreateAt,
	)
	return i, err
}

const deleteBarber = `-- name: DeleteBarber :exec
DELETE FROM "Barbers"
WHERE "id" = $1
`

func (q *Queries) DeleteBarber(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteBarber, id)
	return err
}

const getBarber = `-- name: GetBarber :one
SELECT
  b.id, b.gender_id, b.phone, b.nick_name, b.email, b.hashed_password, b.full_name, b.haircut, b.work_status, b.avatar_url, b.password_changed_at, b.create_at, 
  br.id, br.barber_id, br.barber_shop_id, br.role_id
FROM
  "Barbers" b
JOIN
  "BarberRoles" br ON b."id" = br."barber_id"
WHERE
  b."id" = $1
  AND br."barber_shop_id" = $2
`

type GetBarberParams struct {
	ID           uuid.UUID `json:"id"`
	BarberShopID uuid.UUID `json:"barber_shop_id"`
}

type GetBarberRow struct {
	ID                uuid.UUID      `json:"id"`
	GenderID          int16          `json:"gender_id"`
	Phone             string         `json:"phone"`
	NickName          string         `json:"nick_name"`
	Email             sql.NullString `json:"email"`
	HashedPassword    sql.NullString `json:"hashed_password"`
	FullName          string         `json:"full_name"`
	Haircut           bool           `json:"haircut"`
	WorkStatus        bool           `json:"work_status"`
	AvatarUrl         sql.NullString `json:"avatar_url"`
	PasswordChangedAt time.Time      `json:"password_changed_at"`
	CreateAt          time.Time      `json:"create_at"`
	ID_2              uuid.UUID      `json:"id_2"`
	BarberID          uuid.UUID      `json:"barber_id"`
	BarberShopID      uuid.UUID      `json:"barber_shop_id"`
	RoleID            int16          `json:"role_id"`
}

func (q *Queries) GetBarber(ctx context.Context, arg GetBarberParams) (GetBarberRow, error) {
	row := q.db.QueryRow(ctx, getBarber, arg.ID, arg.BarberShopID)
	var i GetBarberRow
	err := row.Scan(
		&i.ID,
		&i.GenderID,
		&i.Phone,
		&i.NickName,
		&i.Email,
		&i.HashedPassword,
		&i.FullName,
		&i.Haircut,
		&i.WorkStatus,
		&i.AvatarUrl,
		&i.PasswordChangedAt,
		&i.CreateAt,
		&i.ID_2,
		&i.BarberID,
		&i.BarberShopID,
		&i.RoleID,
	)
	return i, err
}

const getBarberEmployee = `-- name: GetBarberEmployee :one
SELECT
  b.id, b.gender_id, b.phone, b.nick_name, b.email, b.hashed_password, b.full_name, b.haircut, b.work_status, b.avatar_url, b.password_changed_at, b.create_at, 
  br.id, br.barber_id, br.barber_shop_id, br.role_id
FROM
  "Barbers" b
LEFT JOIN
  "BarberRoles" br ON b."id" = br."barber_id"
WHERE
  b."id" = $1
  AND (br."barber_shop_id" = $2 OR br."barber_shop_id" IS NULL)
`

type GetBarberEmployeeParams struct {
	ID           uuid.UUID `json:"id"`
	BarberShopID uuid.UUID `json:"barber_shop_id"`
}

type GetBarberEmployeeRow struct {
	ID                uuid.UUID      `json:"id"`
	GenderID          int16          `json:"gender_id"`
	Phone             string         `json:"phone"`
	NickName          string         `json:"nick_name"`
	Email             sql.NullString `json:"email"`
	HashedPassword    sql.NullString `json:"hashed_password"`
	FullName          string         `json:"full_name"`
	Haircut           bool           `json:"haircut"`
	WorkStatus        bool           `json:"work_status"`
	AvatarUrl         sql.NullString `json:"avatar_url"`
	PasswordChangedAt time.Time      `json:"password_changed_at"`
	CreateAt          time.Time      `json:"create_at"`
	ID_2              uuid.NullUUID  `json:"id_2"`
	BarberID          uuid.NullUUID  `json:"barber_id"`
	BarberShopID      uuid.NullUUID  `json:"barber_shop_id"`
	RoleID            pgtype.Int2    `json:"role_id"`
}

func (q *Queries) GetBarberEmployee(ctx context.Context, arg GetBarberEmployeeParams) (GetBarberEmployeeRow, error) {
	row := q.db.QueryRow(ctx, getBarberEmployee, arg.ID, arg.BarberShopID)
	var i GetBarberEmployeeRow
	err := row.Scan(
		&i.ID,
		&i.GenderID,
		&i.Phone,
		&i.NickName,
		&i.Email,
		&i.HashedPassword,
		&i.FullName,
		&i.Haircut,
		&i.WorkStatus,
		&i.AvatarUrl,
		&i.PasswordChangedAt,
		&i.CreateAt,
		&i.ID_2,
		&i.BarberID,
		&i.BarberShopID,
		&i.RoleID,
	)
	return i, err
}

const getBarberEmployees = `-- name: GetBarberEmployees :many
SELECT b.id, gender_id, phone, nick_name, email, hashed_password, full_name, haircut, work_status, avatar_url, password_changed_at, create_at, br.id, barber_id, barber_shop_id, role_id, r.id, name, type,
       (SELECT COUNT(*) FROM "Barbers" b
        JOIN "BarberRoles" br ON b."id" = br."barber_id"
        JOIN "Roles" r ON br."role_id" = r."id"
        WHERE br."barber_shop_id" = $1
          AND r."type" = 'Staff') AS total_employees
FROM "Barbers" b
JOIN "BarberRoles" br ON b."id" = br."barber_id"
JOIN "Roles" r ON br."role_id" = r."id"
WHERE br."barber_shop_id" = $1
  AND r."type" = 'Staff'
ORDER BY br."role_id"
LIMIT $2 OFFSET $3
`

type GetBarberEmployeesParams struct {
	BarberShopID uuid.UUID `json:"barber_shop_id"`
	Limit        int32     `json:"limit"`
	Offset       int32     `json:"offset"`
}

type GetBarberEmployeesRow struct {
	ID                uuid.UUID      `json:"id"`
	GenderID          int16          `json:"gender_id"`
	Phone             string         `json:"phone"`
	NickName          string         `json:"nick_name"`
	Email             sql.NullString `json:"email"`
	HashedPassword    sql.NullString `json:"hashed_password"`
	FullName          string         `json:"full_name"`
	Haircut           bool           `json:"haircut"`
	WorkStatus        bool           `json:"work_status"`
	AvatarUrl         sql.NullString `json:"avatar_url"`
	PasswordChangedAt time.Time      `json:"password_changed_at"`
	CreateAt          time.Time      `json:"create_at"`
	ID_2              uuid.UUID      `json:"id_2"`
	BarberID          uuid.UUID      `json:"barber_id"`
	BarberShopID      uuid.UUID      `json:"barber_shop_id"`
	RoleID            int16          `json:"role_id"`
	ID_3              int16          `json:"id_3"`
	Name              string         `json:"name"`
	Type              sql.NullString `json:"type"`
	TotalEmployees    int64          `json:"total_employees"`
}

func (q *Queries) GetBarberEmployees(ctx context.Context, arg GetBarberEmployeesParams) ([]GetBarberEmployeesRow, error) {
	rows, err := q.db.Query(ctx, getBarberEmployees, arg.BarberShopID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetBarberEmployeesRow{}
	for rows.Next() {
		var i GetBarberEmployeesRow
		if err := rows.Scan(
			&i.ID,
			&i.GenderID,
			&i.Phone,
			&i.NickName,
			&i.Email,
			&i.HashedPassword,
			&i.FullName,
			&i.Haircut,
			&i.WorkStatus,
			&i.AvatarUrl,
			&i.PasswordChangedAt,
			&i.CreateAt,
			&i.ID_2,
			&i.BarberID,
			&i.BarberShopID,
			&i.RoleID,
			&i.ID_3,
			&i.Name,
			&i.Type,
			&i.TotalEmployees,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserBarber = `-- name: GetUserBarber :one
SELECT 
  b.id, b.gender_id, b.phone, b.nick_name, b.email, b.hashed_password, b.full_name, b.haircut, b.work_status, b.avatar_url, b.password_changed_at, b.create_at,
  br."role_id" as "barber_role_id"
FROM "Barbers" b
LEFT JOIN
  "BarberRoles" br ON b."id" = br."barber_id"
WHERE  (
        ($2::varchar = 'email' AND email = $1)
        OR
        ($2::varchar = 'phone' AND phone = $1)
    )
`

type GetUserBarberParams struct {
	Email        sql.NullString `json:"email"`
	TypeUsername string         `json:"type_username"`
}

type GetUserBarberRow struct {
	ID                uuid.UUID      `json:"id"`
	GenderID          int16          `json:"gender_id"`
	Phone             string         `json:"phone"`
	NickName          string         `json:"nick_name"`
	Email             sql.NullString `json:"email"`
	HashedPassword    sql.NullString `json:"hashed_password"`
	FullName          string         `json:"full_name"`
	Haircut           bool           `json:"haircut"`
	WorkStatus        bool           `json:"work_status"`
	AvatarUrl         sql.NullString `json:"avatar_url"`
	PasswordChangedAt time.Time      `json:"password_changed_at"`
	CreateAt          time.Time      `json:"create_at"`
	BarberRoleID      pgtype.Int2    `json:"barber_role_id"`
}

func (q *Queries) GetUserBarber(ctx context.Context, arg GetUserBarberParams) (GetUserBarberRow, error) {
	row := q.db.QueryRow(ctx, getUserBarber, arg.Email, arg.TypeUsername)
	var i GetUserBarberRow
	err := row.Scan(
		&i.ID,
		&i.GenderID,
		&i.Phone,
		&i.NickName,
		&i.Email,
		&i.HashedPassword,
		&i.FullName,
		&i.Haircut,
		&i.WorkStatus,
		&i.AvatarUrl,
		&i.PasswordChangedAt,
		&i.CreateAt,
		&i.BarberRoleID,
	)
	return i, err
}

const updateBarber = `-- name: UpdateBarber :one
UPDATE "Barbers"
SET 
  gender_id = coalesce($2, gender_id),
  email = coalesce($3, email),
  phone = coalesce($4, phone),
  nick_name = coalesce($5, nick_name),
  full_name = coalesce($6, full_name),
  haircut = coalesce($7, haircut),
  work_status = coalesce($8, work_status),
  avatar_url = coalesce($9, avatar_url)
  WHERE "id" = $1
RETURNING id, gender_id, phone, nick_name, email, hashed_password, full_name, haircut, work_status, avatar_url, password_changed_at, create_at
`

type UpdateBarberParams struct {
	ID         uuid.UUID      `json:"id"`
	GenderID   pgtype.Int2    `json:"gender_id"`
	Email      sql.NullString `json:"email"`
	Phone      sql.NullString `json:"phone"`
	NickName   sql.NullString `json:"nick_name"`
	FullName   sql.NullString `json:"full_name"`
	Haircut    pgtype.Bool    `json:"haircut"`
	WorkStatus pgtype.Bool    `json:"work_status"`
	AvatarUrl  sql.NullString `json:"avatar_url"`
}

func (q *Queries) UpdateBarber(ctx context.Context, arg UpdateBarberParams) (Barber, error) {
	row := q.db.QueryRow(ctx, updateBarber,
		arg.ID,
		arg.GenderID,
		arg.Email,
		arg.Phone,
		arg.NickName,
		arg.FullName,
		arg.Haircut,
		arg.WorkStatus,
		arg.AvatarUrl,
	)
	var i Barber
	err := row.Scan(
		&i.ID,
		&i.GenderID,
		&i.Phone,
		&i.NickName,
		&i.Email,
		&i.HashedPassword,
		&i.FullName,
		&i.Haircut,
		&i.WorkStatus,
		&i.AvatarUrl,
		&i.PasswordChangedAt,
		&i.CreateAt,
	)
	return i, err
}
