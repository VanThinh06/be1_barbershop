// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: service_category.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createServicesCategoryPrivate = `-- name: CreateServicesCategoryPrivate :one
INSERT INTO "ServiceCategory" (
shop_id,
"name"
) VALUES (
  $1, $2
)
RETURNING id, chain_id, shop_id, name, created_at, update_at
`

type CreateServicesCategoryPrivateParams struct {
	ShopID uuid.NullUUID `json:"shop_id"`
	Name   string        `json:"name"`
}

func (q *Queries) CreateServicesCategoryPrivate(ctx context.Context, arg CreateServicesCategoryPrivateParams) (ServiceCategory, error) {
	row := q.db.QueryRowContext(ctx, createServicesCategoryPrivate, arg.ShopID, arg.Name)
	var i ServiceCategory
	err := row.Scan(
		&i.ID,
		&i.ChainID,
		&i.ShopID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}

const createServicesCategoryPublic = `-- name: CreateServicesCategoryPublic :one
INSERT INTO "ServiceCategory" (
"name",
"chain_id"
) VALUES (
  $1, $2
)
RETURNING id, chain_id, shop_id, name, created_at, update_at
`

type CreateServicesCategoryPublicParams struct {
	Name    string        `json:"name"`
	ChainID uuid.NullUUID `json:"chain_id"`
}

func (q *Queries) CreateServicesCategoryPublic(ctx context.Context, arg CreateServicesCategoryPublicParams) (ServiceCategory, error) {
	row := q.db.QueryRowContext(ctx, createServicesCategoryPublic, arg.Name, arg.ChainID)
	var i ServiceCategory
	err := row.Scan(
		&i.ID,
		&i.ChainID,
		&i.ShopID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}

const updateServicesCategoryPublicSeparate = `-- name: UpdateServicesCategoryPublicSeparate :one
INSERT INTO "ServiceCategory" (
    "shop_id",
    "chain_id",
    "name"
  )
VALUES ($1, $2, $3)
RETURNING id, chain_id, shop_id, name, created_at, update_at
`

type UpdateServicesCategoryPublicSeparateParams struct {
	ShopID  uuid.NullUUID `json:"shop_id"`
	ChainID uuid.NullUUID `json:"chain_id"`
	Name    string        `json:"name"`
}

func (q *Queries) UpdateServicesCategoryPublicSeparate(ctx context.Context, arg UpdateServicesCategoryPublicSeparateParams) (ServiceCategory, error) {
	row := q.db.QueryRowContext(ctx, updateServicesCategoryPublicSeparate, arg.ShopID, arg.ChainID, arg.Name)
	var i ServiceCategory
	err := row.Scan(
		&i.ID,
		&i.ChainID,
		&i.ShopID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}
