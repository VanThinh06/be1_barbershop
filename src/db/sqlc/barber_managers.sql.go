// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: barber_managers.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createBarberManagers = `-- name: CreateBarberManagers :one
INSERT INTO "BarberManagers" (
    barber_id,
    manager_id
  )
VALUES (
    $1,
    $2
  )
RETURNING barber_id, manager_id
`

type CreateBarberManagersParams struct {
	BarberID  uuid.UUID `json:"barber_id"`
	ManagerID uuid.UUID `json:"manager_id"`
}

func (q *Queries) CreateBarberManagers(ctx context.Context, arg CreateBarberManagersParams) (BarberManager, error) {
	row := q.db.QueryRow(ctx, createBarberManagers, arg.BarberID, arg.ManagerID)
	var i BarberManager
	err := row.Scan(&i.BarberID, &i.ManagerID)
	return i, err
}

const deleteBarberManagers = `-- name: DeleteBarberManagers :exec
DELETE FROM "BarberManagers"
WHERE "barber_id" = $1 AND "manager_id" = $2
`

type DeleteBarberManagersParams struct {
	BarberID  uuid.UUID `json:"barber_id"`
	ManagerID uuid.UUID `json:"manager_id"`
}

func (q *Queries) DeleteBarberManagers(ctx context.Context, arg DeleteBarberManagersParams) error {
	_, err := q.db.Exec(ctx, deleteBarberManagers, arg.BarberID, arg.ManagerID)
	return err
}

const listBarberManagers = `-- name: ListBarberManagers :many
SELECT "manager_id"
FROM "BarberManagers"
WHERE "barber_id" = $1
`

func (q *Queries) ListBarberManagers(ctx context.Context, barberID uuid.UUID) ([]uuid.UUID, error) {
	rows, err := q.db.Query(ctx, listBarberManagers, barberID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []uuid.UUID{}
	for rows.Next() {
		var manager_id uuid.UUID
		if err := rows.Scan(&manager_id); err != nil {
			return nil, err
		}
		items = append(items, manager_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
