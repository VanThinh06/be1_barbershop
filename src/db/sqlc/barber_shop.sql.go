// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: barber_shop.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createBarberShops = `-- name: CreateBarberShops :one

INSERT INTO "BarberShops" (code_barber_shop,
                           owner_id,
                           name,
                           location,
                           address,
                           image)
VALUES ($1,
        $2,
        $3,
        $4,
        $5,
        $6) RETURNING shop_id, code_barber_shop, owner_id, name, location, address, image, list_image, status, created_at, update_at
`

type CreateBarberShopsParams struct {
	CodeBarberShop string         `json:"code_barber_shop"`
	OwnerID        uuid.UUID      `json:"owner_id"`
	Name           string         `json:"name"`
	Location       float32        `json:"location"`
	Address        string         `json:"address"`
	Image          sql.NullString `json:"image"`
}

func (q *Queries) CreateBarberShops(ctx context.Context, arg CreateBarberShopsParams) (BarberShop, error) {
	row := q.db.QueryRowContext(ctx, createBarberShops,
		arg.CodeBarberShop,
		arg.OwnerID,
		arg.Name,
		arg.Location,
		arg.Address,
		arg.Image,
	)
	var i BarberShop
	err := row.Scan(
		&i.ShopID,
		&i.CodeBarberShop,
		&i.OwnerID,
		&i.Name,
		&i.Location,
		&i.Address,
		&i.Image,
		pq.Array(&i.ListImage),
		&i.Status,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}

const getCodeBarberShop = `-- name: GetCodeBarberShop :one

SELECT "shop_id"
FROM "BarberShops"
WHERE code_barber_shop = $1
LIMIT 1
`

func (q *Queries) GetCodeBarberShop(ctx context.Context, codeBarberShop string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getCodeBarberShop, codeBarberShop)
	var shop_id uuid.UUID
	err := row.Scan(&shop_id)
	return shop_id, err
}
