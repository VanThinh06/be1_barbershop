// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: barbershops.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/jackc/pgtype"
)

const createBarberShop = `-- name: CreateBarberShop :one
INSERT INTO "BarberShops" (
                           barbershop_chain_id,
                           name,
                           is_main_branch,
                           branch_count,
                           coordinates,
                           address,
                           image
                           )
VALUES (
        $1,
        $2,
        $3,
        $4,
        ST_GeographyFromText('POINT(' || $5::float8 || ' ' || $6::float8 || ')'),
        $7,
        $8
        ) RETURNING id, barbershop_chain_id, name, is_main_branch, branch_count, coordinates, address, image, status, rate, start_time, end_time, break_time, break_minutes, interval_scheduler, is_reputation, is_verified, create_at, update_at
`

type CreateBarberShopParams struct {
	BarbershopChainID uuid.NullUUID  `json:"barbershop_chain_id"`
	Name              string         `json:"name"`
	IsMainBranch      sql.NullBool   `json:"is_main_branch"`
	BranchCount       int32          `json:"branch_count"`
	Longitude         float64        `json:"longitude"`
	Latitude          float64        `json:"latitude"`
	Address           string         `json:"address"`
	Image             sql.NullString `json:"image"`
}

// admin
func (q *Queries) CreateBarberShop(ctx context.Context, arg CreateBarberShopParams) (BarberShop, error) {
	row := q.db.QueryRowContext(ctx, createBarberShop,
		arg.BarbershopChainID,
		arg.Name,
		arg.IsMainBranch,
		arg.BranchCount,
		arg.Longitude,
		arg.Latitude,
		arg.Address,
		arg.Image,
	)
	var i BarberShop
	err := row.Scan(
		&i.ID,
		&i.BarbershopChainID,
		&i.Name,
		&i.IsMainBranch,
		&i.BranchCount,
		&i.Coordinates,
		&i.Address,
		&i.Image,
		&i.Status,
		&i.Rate,
		&i.StartTime,
		&i.EndTime,
		&i.BreakTime,
		&i.BreakMinutes,
		&i.IntervalScheduler,
		&i.IsReputation,
		&i.IsVerified,
		&i.CreateAt,
		&i.UpdateAt,
	)
	return i, err
}

const deleteBarberShops = `-- name: DeleteBarberShops :exec
DELETE FROM "BarberShops"
WHERE id = $1
`

func (q *Queries) DeleteBarberShops(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteBarberShops, id)
	return err
}

const getBarberShop = `-- name: GetBarberShop :one
SELECT id, barbershop_chain_id, name, is_main_branch, branch_count, coordinates, address, image, status, rate, start_time, end_time, break_time, break_minutes, interval_scheduler, is_reputation, is_verified, create_at, update_at
FROM "BarberShops"
WHERE id = $1
`

func (q *Queries) GetBarberShop(ctx context.Context, id uuid.UUID) (BarberShop, error) {
	row := q.db.QueryRowContext(ctx, getBarberShop, id)
	var i BarberShop
	err := row.Scan(
		&i.ID,
		&i.BarbershopChainID,
		&i.Name,
		&i.IsMainBranch,
		&i.BranchCount,
		&i.Coordinates,
		&i.Address,
		&i.Image,
		&i.Status,
		&i.Rate,
		&i.StartTime,
		&i.EndTime,
		&i.BreakTime,
		&i.BreakMinutes,
		&i.IntervalScheduler,
		&i.IsReputation,
		&i.IsVerified,
		&i.CreateAt,
		&i.UpdateAt,
	)
	return i, err
}

const listNearbyBarberShops = `-- name: ListNearbyBarberShops :many
SELECT
    id,
    barbershop_chain_id,
    name,
    branch_count,
    coordinates,
    address,
    image,
    status,
    rate,
    "is_reputation",
    CAST(ST_X(ST_GeomFromWKB(coordinates::geometry)) AS float8) AS longitude,
    CAST(ST_Y(ST_GeomFromWKB(coordinates::geometry)) AS float8) AS latitude,
    CAST(ST_Distance(
        ST_SetSRID(ST_MakePoint($1::float, $2::float), 4326),
        coordinates::geography
    ) AS float) AS distance
FROM "BarberShops"
WHERE  ST_Distance(coordinates, ST_SetSRID(ST_MakePoint($1::float, $2::float), 4326)) <= $3::int
ORDER BY ST_Distance(coordinates, ST_SetSRID(ST_MakePoint($1::float, $2::float), 4326))
`

type ListNearbyBarberShopsParams struct {
	CurrentLongitude float64 `json:"current_longitude"`
	CurrentLatitude  float64 `json:"current_latitude"`
	DistanceInMeters int32   `json:"distance_in_meters"`
}

type ListNearbyBarberShopsRow struct {
	ID                uuid.UUID      `json:"id"`
	BarbershopChainID uuid.NullUUID  `json:"barbershop_chain_id"`
	Name              string         `json:"name"`
	BranchCount       int32          `json:"branch_count"`
	Coordinates       string         `json:"coordinates"`
	Address           string         `json:"address"`
	Image             sql.NullString `json:"image"`
	Status            int32          `json:"status"`
	Rate              float64        `json:"rate"`
	IsReputation      bool           `json:"is_reputation"`
	Longitude         float64        `json:"longitude"`
	Latitude          float64        `json:"latitude"`
	Distance          float64        `json:"distance"`
}

func (q *Queries) ListNearbyBarberShops(ctx context.Context, arg ListNearbyBarberShopsParams) ([]ListNearbyBarberShopsRow, error) {
	rows, err := q.db.QueryContext(ctx, listNearbyBarberShops, arg.CurrentLongitude, arg.CurrentLatitude, arg.DistanceInMeters)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListNearbyBarberShopsRow{}
	for rows.Next() {
		var i ListNearbyBarberShopsRow
		if err := rows.Scan(
			&i.ID,
			&i.BarbershopChainID,
			&i.Name,
			&i.BranchCount,
			&i.Coordinates,
			&i.Address,
			&i.Image,
			&i.Status,
			&i.Rate,
			&i.IsReputation,
			&i.Longitude,
			&i.Latitude,
			&i.Distance,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchByNameBarberShops = `-- name: SearchByNameBarberShops :many
SELECT
    bs.id,
    bs.barbershop_chain_id,
    bs.name,
    bs.branch_count,
    bs.coordinates,
    bs.address,
    bs.image,
    bs.status,
    bs.rate,
    bs."is_reputation",
    CAST(ST_X(ST_GeomFromWKB(bs.coordinates::geometry)) AS float8) AS longitude,
    CAST(ST_Y(ST_GeomFromWKB(bs.coordinates::geometry)) AS float8) AS latitude,
    CAST(ST_Distance(
        ST_SetSRID(ST_MakePoint($2::float, $3::float), 4326),
        bs.coordinates::geography
    ) AS float) AS distance
FROM "BarberShops" bs
JOIN "BarberShopChains" bsc ON bs.barbershop_chain_id = bsc.id
WHERE bsc."name" = $1
ORDER BY ST_Distance(bs.coordinates, ST_SetSRID(ST_MakePoint($2::float, $3::float), 4326))
`

type SearchByNameBarberShopsParams struct {
	Name             string  `json:"name"`
	CurrentLongitude float64 `json:"current_longitude"`
	CurrentLatitude  float64 `json:"current_latitude"`
}

type SearchByNameBarberShopsRow struct {
	ID                uuid.UUID      `json:"id"`
	BarbershopChainID uuid.NullUUID  `json:"barbershop_chain_id"`
	Name              string         `json:"name"`
	BranchCount       int32          `json:"branch_count"`
	Coordinates       string         `json:"coordinates"`
	Address           string         `json:"address"`
	Image             sql.NullString `json:"image"`
	Status            int32          `json:"status"`
	Rate              float64        `json:"rate"`
	IsReputation      bool           `json:"is_reputation"`
	Longitude         float64        `json:"longitude"`
	Latitude          float64        `json:"latitude"`
	Distance          float64        `json:"distance"`
}

func (q *Queries) SearchByNameBarberShops(ctx context.Context, arg SearchByNameBarberShopsParams) ([]SearchByNameBarberShopsRow, error) {
	rows, err := q.db.QueryContext(ctx, searchByNameBarberShops, arg.Name, arg.CurrentLongitude, arg.CurrentLatitude)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SearchByNameBarberShopsRow{}
	for rows.Next() {
		var i SearchByNameBarberShopsRow
		if err := rows.Scan(
			&i.ID,
			&i.BarbershopChainID,
			&i.Name,
			&i.BranchCount,
			&i.Coordinates,
			&i.Address,
			&i.Image,
			&i.Status,
			&i.Rate,
			&i.IsReputation,
			&i.Longitude,
			&i.Latitude,
			&i.Distance,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBarberShop = `-- name: UpdateBarberShop :one
UPDATE "BarberShops"
SET 
    name = coalesce($2, name),
    is_main_branch = coalesce($3, is_main_branch),
    branch_count = coalesce($4, branch_count),
    coordinates = coalesce(ST_GeographyFromText('POINT(' || $5::float8 || ' ' || $6::float8 || ')'), coordinates),
    address = coalesce($7, address),
    image = coalesce($8, image),
    status = coalesce($9, status),
    rate = coalesce($10, rate),
    start_time = coalesce($11, start_time),
    end_time = coalesce($12, end_time),
    break_time = coalesce($13, break_time),
    interval_scheduler = coalesce($14, interval_scheduler),
    is_reputation = coalesce($15, is_reputation),
    is_verified = coalesce($16, is_verified),
    update_at = now()
WHERE "id" = $1
RETURNING id, barbershop_chain_id, name, is_main_branch, branch_count, coordinates, address, image, status, rate, start_time, end_time, break_time, break_minutes, interval_scheduler, is_reputation, is_verified, create_at, update_at
`

type UpdateBarberShopParams struct {
	ID                uuid.UUID       `json:"id"`
	Name              sql.NullString  `json:"name"`
	IsMainBranch      sql.NullBool    `json:"is_main_branch"`
	BranchCount       sql.NullInt32   `json:"branch_count"`
	Longitude         sql.NullFloat64 `json:"longitude"`
	Latitude          sql.NullFloat64 `json:"latitude"`
	Address           sql.NullString  `json:"address"`
	Image             sql.NullString  `json:"image"`
	Status            sql.NullInt32   `json:"status"`
	Rate              sql.NullFloat64 `json:"rate"`
	StartTime         pgtype.Time     `json:"start_time"`
	EndTime           pgtype.Time     `json:"end_time"`
	BreakTime         pgtype.Time     `json:"break_time"`
	IntervalScheduler sql.NullInt32   `json:"interval_scheduler"`
	IsReputation      bool            `json:"is_reputation"`
	IsVerified        bool            `json:"is_verified"`
}

func (q *Queries) UpdateBarberShop(ctx context.Context, arg UpdateBarberShopParams) (BarberShop, error) {
	row := q.db.QueryRowContext(ctx, updateBarberShop,
		arg.ID,
		arg.Name,
		arg.IsMainBranch,
		arg.BranchCount,
		arg.Longitude,
		arg.Latitude,
		arg.Address,
		arg.Image,
		arg.Status,
		arg.Rate,
		arg.StartTime,
		arg.EndTime,
		arg.BreakTime,
		arg.IntervalScheduler,
		arg.IsReputation,
		arg.IsVerified,
	)
	var i BarberShop
	err := row.Scan(
		&i.ID,
		&i.BarbershopChainID,
		&i.Name,
		&i.IsMainBranch,
		&i.BranchCount,
		&i.Coordinates,
		&i.Address,
		&i.Image,
		&i.Status,
		&i.Rate,
		&i.StartTime,
		&i.EndTime,
		&i.BreakTime,
		&i.BreakMinutes,
		&i.IntervalScheduler,
		&i.IsReputation,
		&i.IsVerified,
		&i.CreateAt,
		&i.UpdateAt,
	)
	return i, err
}
