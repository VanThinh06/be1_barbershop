// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: barbershops.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createBarberShop = `-- name: CreateBarberShop :one
INSERT INTO "BarberShops" (
                           barber_shop_chain_id,
                           name,
                           is_main_branch,
                           branch_number,
                           coordinates
                           )
VALUES (
        $1,
        $2,
        $3,
        $4,
        ST_GeographyFromText('POINT(' || $5::float8 || ' ' || $6::float8 || ')')
        ) RETURNING id, barber_shop_chain_id, branch_number, name, province_id, district_id, ward_id, phone, email, website_url, coordinates, avatar_url, cover_photo_url, photo_url, start_time_monday, end_time_monday, start_time_tuesday, end_time_tuesday, start_time_wednesday, end_time_wednesday, start_time_thursday, end_time_thursday, start_time_friday, end_time_friday, start_time_saturday, end_time_saturday, start_time_sunday, end_time_sunday, interval_scheduler, is_main_branch, is_reputation, is_verified, create_at
`

type CreateBarberShopParams struct {
	BarberShopChainID uuid.NullUUID `json:"barber_shop_chain_id"`
	Name              string        `json:"name"`
	IsMainBranch      sql.NullBool  `json:"is_main_branch"`
	BranchNumber      sql.NullInt16 `json:"branch_number"`
	Longitude         float64       `json:"longitude"`
	Latitude          float64       `json:"latitude"`
}

// admin
func (q *Queries) CreateBarberShop(ctx context.Context, arg CreateBarberShopParams) (BarberShop, error) {
	row := q.db.QueryRowContext(ctx, createBarberShop,
		arg.BarberShopChainID,
		arg.Name,
		arg.IsMainBranch,
		arg.BranchNumber,
		arg.Longitude,
		arg.Latitude,
	)
	var i BarberShop
	err := row.Scan(
		&i.ID,
		&i.BarberShopChainID,
		&i.BranchNumber,
		&i.Name,
		&i.ProvinceID,
		&i.DistrictID,
		&i.WardID,
		&i.Phone,
		&i.Email,
		&i.WebsiteUrl,
		&i.Coordinates,
		&i.AvatarUrl,
		&i.CoverPhotoUrl,
		&i.PhotoUrl,
		&i.StartTimeMonday,
		&i.EndTimeMonday,
		&i.StartTimeTuesday,
		&i.EndTimeTuesday,
		&i.StartTimeWednesday,
		&i.EndTimeWednesday,
		&i.StartTimeThursday,
		&i.EndTimeThursday,
		&i.StartTimeFriday,
		&i.EndTimeFriday,
		&i.StartTimeSaturday,
		&i.EndTimeSaturday,
		&i.StartTimeSunday,
		&i.EndTimeSunday,
		&i.IntervalScheduler,
		&i.IsMainBranch,
		&i.IsReputation,
		&i.IsVerified,
		&i.CreateAt,
	)
	return i, err
}

const deleteBarberShops = `-- name: DeleteBarberShops :exec
DELETE FROM "BarberShops"
WHERE id = $1
`

func (q *Queries) DeleteBarberShops(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteBarberShops, id)
	return err
}

const getBarberShop = `-- name: GetBarberShop :one
SELECT id, barber_shop_chain_id, branch_number, name, province_id, district_id, ward_id, phone, email, website_url, coordinates, avatar_url, cover_photo_url, photo_url, start_time_monday, end_time_monday, start_time_tuesday, end_time_tuesday, start_time_wednesday, end_time_wednesday, start_time_thursday, end_time_thursday, start_time_friday, end_time_friday, start_time_saturday, end_time_saturday, start_time_sunday, end_time_sunday, interval_scheduler, is_main_branch, is_reputation, is_verified, create_at
FROM "BarberShops"
WHERE id = $1
`

func (q *Queries) GetBarberShop(ctx context.Context, id uuid.UUID) (BarberShop, error) {
	row := q.db.QueryRowContext(ctx, getBarberShop, id)
	var i BarberShop
	err := row.Scan(
		&i.ID,
		&i.BarberShopChainID,
		&i.BranchNumber,
		&i.Name,
		&i.ProvinceID,
		&i.DistrictID,
		&i.WardID,
		&i.Phone,
		&i.Email,
		&i.WebsiteUrl,
		&i.Coordinates,
		&i.AvatarUrl,
		&i.CoverPhotoUrl,
		&i.PhotoUrl,
		&i.StartTimeMonday,
		&i.EndTimeMonday,
		&i.StartTimeTuesday,
		&i.EndTimeTuesday,
		&i.StartTimeWednesday,
		&i.EndTimeWednesday,
		&i.StartTimeThursday,
		&i.EndTimeThursday,
		&i.StartTimeFriday,
		&i.EndTimeFriday,
		&i.StartTimeSaturday,
		&i.EndTimeSaturday,
		&i.StartTimeSunday,
		&i.EndTimeSunday,
		&i.IntervalScheduler,
		&i.IsMainBranch,
		&i.IsReputation,
		&i.IsVerified,
		&i.CreateAt,
	)
	return i, err
}

const listNearbyBarberShops = `-- name: ListNearbyBarberShops :many
SELECT
    id,
    barber_shop_chain_id,
    name,
    branch_number,
    coordinates,
    "is_reputation",
    CAST(ST_X(ST_GeomFromWKB(coordinates::geometry)) AS float8) AS longitude,
    CAST(ST_Y(ST_GeomFromWKB(coordinates::geometry)) AS float8) AS latitude,
    CAST(ST_Distance(
        ST_SetSRID(ST_MakePoint($1::float, $2::float), 4326),
        coordinates::geography
    ) AS float) AS distance
FROM "BarberShops"
WHERE  ST_Distance(coordinates, ST_SetSRID(ST_MakePoint($1::float, $2::float), 4326)) <= $3::int
ORDER BY ST_Distance(coordinates, ST_SetSRID(ST_MakePoint($1::float, $2::float), 4326))
`

type ListNearbyBarberShopsParams struct {
	CurrentLongitude float64 `json:"current_longitude"`
	CurrentLatitude  float64 `json:"current_latitude"`
	DistanceInMeters int32   `json:"distance_in_meters"`
}

type ListNearbyBarberShopsRow struct {
	ID                uuid.UUID     `json:"id"`
	BarberShopChainID uuid.NullUUID `json:"barber_shop_chain_id"`
	Name              string        `json:"name"`
	BranchNumber      sql.NullInt16 `json:"branch_number"`
	Coordinates       string        `json:"coordinates"`
	IsReputation      bool          `json:"is_reputation"`
	Longitude         float64       `json:"longitude"`
	Latitude          float64       `json:"latitude"`
	Distance          float64       `json:"distance"`
}

func (q *Queries) ListNearbyBarberShops(ctx context.Context, arg ListNearbyBarberShopsParams) ([]ListNearbyBarberShopsRow, error) {
	rows, err := q.db.QueryContext(ctx, listNearbyBarberShops, arg.CurrentLongitude, arg.CurrentLatitude, arg.DistanceInMeters)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListNearbyBarberShopsRow{}
	for rows.Next() {
		var i ListNearbyBarberShopsRow
		if err := rows.Scan(
			&i.ID,
			&i.BarberShopChainID,
			&i.Name,
			&i.BranchNumber,
			&i.Coordinates,
			&i.IsReputation,
			&i.Longitude,
			&i.Latitude,
			&i.Distance,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchByNameBarberShops = `-- name: SearchByNameBarberShops :many
SELECT
    bs.id,
    bs.barber_shop_chain_id,
    bs.name,
    bs.branch_number,
    bs.coordinates,
    bs."is_reputation",
    CAST(ST_X(ST_GeomFromWKB(bs.coordinates::geometry)) AS float8) AS longitude,
    CAST(ST_Y(ST_GeomFromWKB(bs.coordinates::geometry)) AS float8) AS latitude,
    CAST(ST_Distance(
        ST_SetSRID(ST_MakePoint($2::float, $3::float), 4326),
        bs.coordinates::geography
    ) AS float) AS distance
FROM "BarberShops" bs
JOIN "BarberShopChains" bsc ON bs.barber_shop_chain_id = bsc.id
WHERE bsc."name" = $1
ORDER BY ST_Distance(bs.coordinates, ST_SetSRID(ST_MakePoint($2::float, $3::float), 4326))
`

type SearchByNameBarberShopsParams struct {
	Name             string  `json:"name"`
	CurrentLongitude float64 `json:"current_longitude"`
	CurrentLatitude  float64 `json:"current_latitude"`
}

type SearchByNameBarberShopsRow struct {
	ID                uuid.UUID     `json:"id"`
	BarberShopChainID uuid.NullUUID `json:"barber_shop_chain_id"`
	Name              string        `json:"name"`
	BranchNumber      sql.NullInt16 `json:"branch_number"`
	Coordinates       string        `json:"coordinates"`
	IsReputation      bool          `json:"is_reputation"`
	Longitude         float64       `json:"longitude"`
	Latitude          float64       `json:"latitude"`
	Distance          float64       `json:"distance"`
}

func (q *Queries) SearchByNameBarberShops(ctx context.Context, arg SearchByNameBarberShopsParams) ([]SearchByNameBarberShopsRow, error) {
	rows, err := q.db.QueryContext(ctx, searchByNameBarberShops, arg.Name, arg.CurrentLongitude, arg.CurrentLatitude)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SearchByNameBarberShopsRow{}
	for rows.Next() {
		var i SearchByNameBarberShopsRow
		if err := rows.Scan(
			&i.ID,
			&i.BarberShopChainID,
			&i.Name,
			&i.BranchNumber,
			&i.Coordinates,
			&i.IsReputation,
			&i.Longitude,
			&i.Latitude,
			&i.Distance,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBarberShop = `-- name: UpdateBarberShop :one
UPDATE "BarberShops"
SET 
    name = coalesce($2, name),
    is_main_branch = coalesce($3, is_main_branch),
    branch_number = coalesce($4, branch_number),
    coordinates = coalesce(ST_GeographyFromText('POINT(' || $5::float8 || ' ' || $6::float8 || ')'), coordinates),
    interval_scheduler = coalesce($7, interval_scheduler),
    is_reputation = coalesce($8, is_reputation),
    is_verified = coalesce($9, is_verified),
    update_at = now()
WHERE "id" = $1
RETURNING id, barber_shop_chain_id, branch_number, name, province_id, district_id, ward_id, phone, email, website_url, coordinates, avatar_url, cover_photo_url, photo_url, start_time_monday, end_time_monday, start_time_tuesday, end_time_tuesday, start_time_wednesday, end_time_wednesday, start_time_thursday, end_time_thursday, start_time_friday, end_time_friday, start_time_saturday, end_time_saturday, start_time_sunday, end_time_sunday, interval_scheduler, is_main_branch, is_reputation, is_verified, create_at
`

type UpdateBarberShopParams struct {
	ID                uuid.UUID       `json:"id"`
	Name              sql.NullString  `json:"name"`
	IsMainBranch      sql.NullBool    `json:"is_main_branch"`
	BranchNumber      sql.NullInt16   `json:"branch_number"`
	Longitude         sql.NullFloat64 `json:"longitude"`
	Latitude          sql.NullFloat64 `json:"latitude"`
	IntervalScheduler sql.NullInt16   `json:"interval_scheduler"`
	IsReputation      bool            `json:"is_reputation"`
	IsVerified        bool            `json:"is_verified"`
}

func (q *Queries) UpdateBarberShop(ctx context.Context, arg UpdateBarberShopParams) (BarberShop, error) {
	row := q.db.QueryRowContext(ctx, updateBarberShop,
		arg.ID,
		arg.Name,
		arg.IsMainBranch,
		arg.BranchNumber,
		arg.Longitude,
		arg.Latitude,
		arg.IntervalScheduler,
		arg.IsReputation,
		arg.IsVerified,
	)
	var i BarberShop
	err := row.Scan(
		&i.ID,
		&i.BarberShopChainID,
		&i.BranchNumber,
		&i.Name,
		&i.ProvinceID,
		&i.DistrictID,
		&i.WardID,
		&i.Phone,
		&i.Email,
		&i.WebsiteUrl,
		&i.Coordinates,
		&i.AvatarUrl,
		&i.CoverPhotoUrl,
		&i.PhotoUrl,
		&i.StartTimeMonday,
		&i.EndTimeMonday,
		&i.StartTimeTuesday,
		&i.EndTimeTuesday,
		&i.StartTimeWednesday,
		&i.EndTimeWednesday,
		&i.StartTimeThursday,
		&i.EndTimeThursday,
		&i.StartTimeFriday,
		&i.EndTimeFriday,
		&i.StartTimeSaturday,
		&i.EndTimeSaturday,
		&i.StartTimeSunday,
		&i.EndTimeSunday,
		&i.IntervalScheduler,
		&i.IsMainBranch,
		&i.IsReputation,
		&i.IsVerified,
		&i.CreateAt,
	)
	return i, err
}
