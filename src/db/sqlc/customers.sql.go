// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: customers.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const changePasswordCustomer = `-- name: ChangePasswordCustomer :one
UPDATE "Customers" 
set   
  "hashed_password" = $1::varchar(255),
  "password_changed_at" = $2
WHERE "customer_id" = $3
RETURNING customer_id, name, email, phone, gender, hashed_password, avatar, is_social_auth, password_changed_at, created_at, updated_at
`

type ChangePasswordCustomerParams struct {
	HashedPassword    string    `json:"hashed_password"`
	PasswordChangedAt time.Time `json:"password_changed_at"`
	CustomerID        uuid.UUID `json:"customer_id"`
}

func (q *Queries) ChangePasswordCustomer(ctx context.Context, arg ChangePasswordCustomerParams) (Customer, error) {
	row := q.db.QueryRowContext(ctx, changePasswordCustomer, arg.HashedPassword, arg.PasswordChangedAt, arg.CustomerID)
	var i Customer
	err := row.Scan(
		&i.CustomerID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Gender,
		&i.HashedPassword,
		&i.Avatar,
		&i.IsSocialAuth,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO "Customers" (
   "name",
    email,
    phone,
    gender,
    hashed_password,
    is_social_auth
  )
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6::bool
  )
RETURNING customer_id, name, email, phone, gender, hashed_password, avatar, is_social_auth, password_changed_at, created_at, updated_at
`

type CreateCustomerParams struct {
	Name           string         `json:"name"`
	Email          string         `json:"email"`
	Phone          sql.NullString `json:"phone"`
	Gender         int32          `json:"gender"`
	HashedPassword sql.NullString `json:"hashed_password"`
	IsSocialAuth   bool           `json:"is_social_auth"`
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (Customer, error) {
	row := q.db.QueryRowContext(ctx, createCustomer,
		arg.Name,
		arg.Email,
		arg.Phone,
		arg.Gender,
		arg.HashedPassword,
		arg.IsSocialAuth,
	)
	var i Customer
	err := row.Scan(
		&i.CustomerID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Gender,
		&i.HashedPassword,
		&i.Avatar,
		&i.IsSocialAuth,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getContactCustomer = `-- name: GetContactCustomer :one
SELECT customer_id, name, email, phone, gender, hashed_password, avatar, is_social_auth, password_changed_at, created_at, updated_at
FROM "Customers"
WHERE
    (
        ($2::varchar = 'email' AND email = $1)
        OR
        ($2::varchar = 'phone' AND phone = $1)
    )
LIMIT 1
`

type GetContactCustomerParams struct {
	Email        string `json:"email"`
	TypeUsername string `json:"type_username"`
}

func (q *Queries) GetContactCustomer(ctx context.Context, arg GetContactCustomerParams) (Customer, error) {
	row := q.db.QueryRowContext(ctx, getContactCustomer, arg.Email, arg.TypeUsername)
	var i Customer
	err := row.Scan(
		&i.CustomerID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Gender,
		&i.HashedPassword,
		&i.Avatar,
		&i.IsSocialAuth,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCustomer = `-- name: GetCustomer :one
SELECT customer_id, name, email, phone, gender, hashed_password, avatar, is_social_auth, password_changed_at, created_at, updated_at
  FROM "Customers"
  WHERE "customer_id" = $1
LIMIT 1
`

func (q *Queries) GetCustomer(ctx context.Context, customerID uuid.UUID) (Customer, error) {
	row := q.db.QueryRowContext(ctx, getCustomer, customerID)
	var i Customer
	err := row.Scan(
		&i.CustomerID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Gender,
		&i.HashedPassword,
		&i.Avatar,
		&i.IsSocialAuth,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateCustomer = `-- name: UpdateCustomer :one
UPDATE "Customers"
set name = coalesce($1, name),
  email = coalesce($2, email),
  phone = coalesce($3, phone),
  gender = coalesce($4, gender),
  avatar = coalesce($5, avatar),
  "updated_at" = $6
  WHERE "customer_id" = $7
RETURNING customer_id, name, email, phone, gender, hashed_password, avatar, is_social_auth, password_changed_at, created_at, updated_at
`

type UpdateCustomerParams struct {
	Name       sql.NullString `json:"name"`
	Email      sql.NullString `json:"email"`
	Phone      sql.NullString `json:"phone"`
	Gender     sql.NullInt32  `json:"gender"`
	Avatar     sql.NullString `json:"avatar"`
	UpdatedAt  sql.NullTime   `json:"updated_at"`
	CustomerID uuid.UUID      `json:"customer_id"`
}

func (q *Queries) UpdateCustomer(ctx context.Context, arg UpdateCustomerParams) (Customer, error) {
	row := q.db.QueryRowContext(ctx, updateCustomer,
		arg.Name,
		arg.Email,
		arg.Phone,
		arg.Gender,
		arg.Avatar,
		arg.UpdatedAt,
		arg.CustomerID,
	)
	var i Customer
	err := row.Scan(
		&i.CustomerID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Gender,
		&i.HashedPassword,
		&i.Avatar,
		&i.IsSocialAuth,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
