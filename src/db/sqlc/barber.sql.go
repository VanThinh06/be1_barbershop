// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: barber.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const barberGetIdShop = `-- name: BarberGetIdShop :one
SELECT shop_id::varchar, "role"
FROM "Barbers"
WHERE barber_id = $1
LIMIT 1
`

type BarberGetIdShopRow struct {
	ShopID string `json:"shop_id"`
	Role   int32  `json:"role"`
}

func (q *Queries) BarberGetIdShop(ctx context.Context, barberID uuid.UUID) (BarberGetIdShopRow, error) {
	row := q.db.QueryRowContext(ctx, barberGetIdShop, barberID)
	var i BarberGetIdShopRow
	err := row.Scan(&i.ShopID, &i.Role)
	return i, err
}

const createBarber = `-- name: CreateBarber :one
INSERT INTO "Barbers" (
    shop_id,
    nick_name,
    full_name,
    phone,
    email,
    gender,
    "role",
    hashed_password,
    avatar,
    manager_id,
    "haircut"
  )
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11
  )
RETURNING barber_id, shop_id, manager_id, nick_name, full_name, phone, email, gender, role, haircut, hashed_password, avatar, status, password_changed_at, created_at, update_at
`

type CreateBarberParams struct {
	ShopID         uuid.NullUUID  `json:"shop_id"`
	NickName       string         `json:"nick_name"`
	FullName       string         `json:"full_name"`
	Phone          string         `json:"phone"`
	Email          string         `json:"email"`
	Gender         int32          `json:"gender"`
	Role           int32          `json:"role"`
	HashedPassword string         `json:"hashed_password"`
	Avatar         sql.NullString `json:"avatar"`
	ManagerID      uuid.NullUUID  `json:"manager_id"`
	Haircut        bool           `json:"haircut"`
}

func (q *Queries) CreateBarber(ctx context.Context, arg CreateBarberParams) (Barber, error) {
	row := q.db.QueryRowContext(ctx, createBarber,
		arg.ShopID,
		arg.NickName,
		arg.FullName,
		arg.Phone,
		arg.Email,
		arg.Gender,
		arg.Role,
		arg.HashedPassword,
		arg.Avatar,
		arg.ManagerID,
		arg.Haircut,
	)
	var i Barber
	err := row.Scan(
		&i.BarberID,
		&i.ShopID,
		&i.ManagerID,
		&i.NickName,
		&i.FullName,
		&i.Phone,
		&i.Email,
		&i.Gender,
		&i.Role,
		&i.Haircut,
		&i.HashedPassword,
		&i.Avatar,
		&i.Status,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}

const getBarberInBarberShop = `-- name: GetBarberInBarberShop :many
SELECT barber_id, shop_id, manager_id, nick_name, full_name, phone, email, gender, role, haircut, hashed_password, avatar, status, password_changed_at, created_at, update_at
FROM "Barbers"
WHERE shop_id =$1 AND "haircut" = true
`

func (q *Queries) GetBarberInBarberShop(ctx context.Context, shopID uuid.NullUUID) ([]Barber, error) {
	rows, err := q.db.QueryContext(ctx, getBarberInBarberShop, shopID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Barber{}
	for rows.Next() {
		var i Barber
		if err := rows.Scan(
			&i.BarberID,
			&i.ShopID,
			&i.ManagerID,
			&i.NickName,
			&i.FullName,
			&i.Phone,
			&i.Email,
			&i.Gender,
			&i.Role,
			&i.Haircut,
			&i.HashedPassword,
			&i.Avatar,
			&i.Status,
			&i.PasswordChangedAt,
			&i.CreatedAt,
			&i.UpdateAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEmailBarber = `-- name: GetEmailBarber :one
SELECT barber_id, shop_id, manager_id, nick_name, full_name, phone, email, gender, role, haircut, hashed_password, avatar, status, password_changed_at, created_at, update_at
FROM "Barbers"
WHERE email = $1
LIMIT 1
`

func (q *Queries) GetEmailBarber(ctx context.Context, email string) (Barber, error) {
	row := q.db.QueryRowContext(ctx, getEmailBarber, email)
	var i Barber
	err := row.Scan(
		&i.BarberID,
		&i.ShopID,
		&i.ManagerID,
		&i.NickName,
		&i.FullName,
		&i.Phone,
		&i.Email,
		&i.Gender,
		&i.Role,
		&i.Haircut,
		&i.HashedPassword,
		&i.Avatar,
		&i.Status,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}

const updateBarber = `-- name: UpdateBarber :one
UPDATE "Barbers"
set shop_id = coalesce($1, shop_id),
  nick_name = coalesce($2, nick_name),
  full_name = coalesce($3, full_name),
  phone = coalesce($4, phone),
  email = coalesce($5, email),
  gender = coalesce($6, gender),
  avatar = coalesce($7, avatar),
  "status" = coalesce($8, status),
  "hashed_password" = coalesce($9, hashed_password),
  "password_changed_at" = coalesce(
    $10,
    password_changed_at
  ),
  "update_at" = $11,
  "haircut" = coalesce($12, haircut)
  WHERE "barber_id" = $13
RETURNING barber_id, shop_id, manager_id, nick_name, full_name, phone, email, gender, role, haircut, hashed_password, avatar, status, password_changed_at, created_at, update_at
`

type UpdateBarberParams struct {
	ShopID            uuid.NullUUID  `json:"shop_id"`
	NickName          sql.NullString `json:"nick_name"`
	FullName          sql.NullString `json:"full_name"`
	Phone             sql.NullString `json:"phone"`
	Email             sql.NullString `json:"email"`
	Gender            sql.NullInt32  `json:"gender"`
	Avatar            sql.NullString `json:"avatar"`
	Status            sql.NullInt32  `json:"status"`
	HashedPassword    sql.NullString `json:"hashed_password"`
	PasswordChangedAt sql.NullTime   `json:"password_changed_at"`
	UpdateAt          sql.NullTime   `json:"update_at"`
	Haircut           sql.NullBool   `json:"haircut"`
	BarberID          uuid.UUID      `json:"barber_id"`
}

func (q *Queries) UpdateBarber(ctx context.Context, arg UpdateBarberParams) (Barber, error) {
	row := q.db.QueryRowContext(ctx, updateBarber,
		arg.ShopID,
		arg.NickName,
		arg.FullName,
		arg.Phone,
		arg.Email,
		arg.Gender,
		arg.Avatar,
		arg.Status,
		arg.HashedPassword,
		arg.PasswordChangedAt,
		arg.UpdateAt,
		arg.Haircut,
		arg.BarberID,
	)
	var i Barber
	err := row.Scan(
		&i.BarberID,
		&i.ShopID,
		&i.ManagerID,
		&i.NickName,
		&i.FullName,
		&i.Phone,
		&i.Email,
		&i.Gender,
		&i.Role,
		&i.Haircut,
		&i.HashedPassword,
		&i.Avatar,
		&i.Status,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}
