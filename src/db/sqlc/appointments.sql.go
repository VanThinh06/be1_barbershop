// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: appointments.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const getAppointmentByDateWithService = `-- name: GetAppointmentByDateWithService :many
SELECT 
    "Appointments".appointment_id, "Appointments".barbershops_id, "Appointments".customer_id, "Appointments".barber_id, "Appointments".appointment_datetime, "Appointments".status, "Appointments".created_at, "Appointments".updated_at,
    SUM("Services"."timer") AS "service_timer"
FROM "Appointments"
LEFT JOIN "Services_Appointments" ON "Appointments"."appointment_id" = "Services_Appointments"."Appointments_service_id"
LEFT JOIN "Services" ON "Services_Appointments"."Services_id" = "Services"."id"
WHERE DATE("Appointments"."appointment_datetime") = $1
    AND "Appointments"."barber_id" = $2
GROUP BY "Appointments"."appointment_id", "Appointments"."appointment_datetime" 
ORDER BY "Appointments"."appointment_datetime"
`

type GetAppointmentByDateWithServiceParams struct {
	AppointmentDatetime time.Time `json:"appointment_datetime"`
	BarberID            uuid.UUID `json:"barber_id"`
}

type GetAppointmentByDateWithServiceRow struct {
	AppointmentID       uuid.UUID    `json:"appointment_id"`
	BarbershopsID       uuid.UUID    `json:"barbershops_id"`
	CustomerID          uuid.UUID    `json:"customer_id"`
	BarberID            uuid.UUID    `json:"barber_id"`
	AppointmentDatetime time.Time    `json:"appointment_datetime"`
	Status              int32        `json:"status"`
	CreatedAt           time.Time    `json:"created_at"`
	UpdatedAt           sql.NullTime `json:"updated_at"`
	ServiceTimer        int64        `json:"service_timer"`
}

func (q *Queries) GetAppointmentByDateWithService(ctx context.Context, arg GetAppointmentByDateWithServiceParams) ([]GetAppointmentByDateWithServiceRow, error) {
	rows, err := q.db.QueryContext(ctx, getAppointmentByDateWithService, arg.AppointmentDatetime, arg.BarberID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAppointmentByDateWithServiceRow{}
	for rows.Next() {
		var i GetAppointmentByDateWithServiceRow
		if err := rows.Scan(
			&i.AppointmentID,
			&i.BarbershopsID,
			&i.CustomerID,
			&i.BarberID,
			&i.AppointmentDatetime,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ServiceTimer,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertAppointmentAndGetInfo = `-- name: InsertAppointmentAndGetInfo :one
WITH inserted_appointment AS (
    INSERT INTO "Appointments" (
        barbershops_id,
        customer_id,
        barber_id,    
        appointment_datetime,
        "status"  
    )
    VALUES ($1, $2, $3, $4, $5)
    RETURNING appointment_id, barbershops_id, customer_id, barber_id, appointment_datetime, status, created_at, updated_at
)
SELECT 
    inserted_appointment.appointment_id, inserted_appointment.barbershops_id, inserted_appointment.customer_id, inserted_appointment.barber_id, inserted_appointment.appointment_datetime, inserted_appointment.status, inserted_appointment.created_at, inserted_appointment.updated_at,
    "Barbers".nick_name AS barber_nick_name,
    "SessionsBarbers".fcm_device,
    "BarberShops"."name" AS name_barber_shop
FROM 
    "inserted_appointment"
JOIN 
    "Barbers" ON "inserted_appointment".barber_id = "Barbers".barber_id
JOIN 
    "BarberShops" ON "inserted_appointment".barbershops_id = "BarberShops".shop_id
LEFT JOIN 
    "SessionsBarbers" ON "Barbers".barber_id = "SessionsBarbers".barber_id
ORDER BY 
    "SessionsBarbers".created_at DESC
LIMIT 1
`

type InsertAppointmentAndGetInfoParams struct {
	BarbershopsID       uuid.UUID `json:"barbershops_id"`
	CustomerID          uuid.UUID `json:"customer_id"`
	BarberID            uuid.UUID `json:"barber_id"`
	AppointmentDatetime time.Time `json:"appointment_datetime"`
	Status              int32     `json:"status"`
}

type InsertAppointmentAndGetInfoRow struct {
	AppointmentID       uuid.UUID      `json:"appointment_id"`
	BarbershopsID       uuid.UUID      `json:"barbershops_id"`
	CustomerID          uuid.UUID      `json:"customer_id"`
	BarberID            uuid.UUID      `json:"barber_id"`
	AppointmentDatetime time.Time      `json:"appointment_datetime"`
	Status              int32          `json:"status"`
	CreatedAt           time.Time      `json:"created_at"`
	UpdatedAt           sql.NullTime   `json:"updated_at"`
	BarberNickName      string         `json:"barber_nick_name"`
	FcmDevice           sql.NullString `json:"fcm_device"`
	NameBarberShop      string         `json:"name_barber_shop"`
}

func (q *Queries) InsertAppointmentAndGetInfo(ctx context.Context, arg InsertAppointmentAndGetInfoParams) (InsertAppointmentAndGetInfoRow, error) {
	row := q.db.QueryRowContext(ctx, insertAppointmentAndGetInfo,
		arg.BarbershopsID,
		arg.CustomerID,
		arg.BarberID,
		arg.AppointmentDatetime,
		arg.Status,
	)
	var i InsertAppointmentAndGetInfoRow
	err := row.Scan(
		&i.AppointmentID,
		&i.BarbershopsID,
		&i.CustomerID,
		&i.BarberID,
		&i.AppointmentDatetime,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BarberNickName,
		&i.FcmDevice,
		&i.NameBarberShop,
	)
	return i, err
}

const insertServicesForAppointment = `-- name: InsertServicesForAppointment :many
WITH inserted_services AS (
  INSERT INTO "Services_Appointments" ("Services_id", "Appointments_service_id")
  SELECT unnest($2::uuid[]), $1
  RETURNING "Services_id", "Appointments_service_id"
)
SELECT "Services_id", "Appointments_service_id", s.id, s.category_id, s.shop_id, s.name, s.timer, s.price, s.description, s.image, s.hidden, s.created_at, s.updated_at
FROM inserted_services
JOIN "Services" s ON "Services_id" = s."id"
`

type InsertServicesForAppointmentParams struct {
	AppointmentsServiceID uuid.UUID   `json:"Appointments_service_id"`
	ServicesID            []uuid.UUID `json:"services_id"`
}

type InsertServicesForAppointmentRow struct {
	ServicesID            uuid.UUID       `json:"Services_id"`
	AppointmentsServiceID uuid.UUID       `json:"Appointments_service_id"`
	ID                    uuid.UUID       `json:"id"`
	CategoryID            uuid.UUID       `json:"category_id"`
	ShopID                uuid.NullUUID   `json:"shop_id"`
	Name                  string          `json:"name"`
	Timer                 sql.NullInt32   `json:"timer"`
	Price                 sql.NullFloat64 `json:"price"`
	Description           sql.NullString  `json:"description"`
	Image                 sql.NullString  `json:"image"`
	Hidden                bool            `json:"hidden"`
	CreatedAt             time.Time       `json:"created_at"`
	UpdatedAt             sql.NullTime    `json:"updated_at"`
}

func (q *Queries) InsertServicesForAppointment(ctx context.Context, arg InsertServicesForAppointmentParams) ([]InsertServicesForAppointmentRow, error) {
	rows, err := q.db.QueryContext(ctx, insertServicesForAppointment, arg.AppointmentsServiceID, pq.Array(arg.ServicesID))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []InsertServicesForAppointmentRow{}
	for rows.Next() {
		var i InsertServicesForAppointmentRow
		if err := rows.Scan(
			&i.ServicesID,
			&i.AppointmentsServiceID,
			&i.ID,
			&i.CategoryID,
			&i.ShopID,
			&i.Name,
			&i.Timer,
			&i.Price,
			&i.Description,
			&i.Image,
			&i.Hidden,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
