// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: appointments.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createAppointment = `-- name: CreateAppointment :one
INSERT INTO "Appointments" (
    barbershops_id,
    customer_id,
    barber_id,    
    service_id,    
    appointment_datetime,
    "status"  
    )
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING appointment_id, barbershops_id, customer_id, barber_id, service_id, appointment_datetime, status, created_at, update_at
`

type CreateAppointmentParams struct {
	BarbershopsID       uuid.UUID `json:"barbershops_id"`
	CustomerID          uuid.UUID `json:"customer_id"`
	BarberID            uuid.UUID `json:"barber_id"`
	ServiceID           uuid.UUID `json:"service_id"`
	AppointmentDatetime time.Time `json:"appointment_datetime"`
	Status              int32     `json:"status"`
}

func (q *Queries) CreateAppointment(ctx context.Context, arg CreateAppointmentParams) (Appointment, error) {
	row := q.db.QueryRowContext(ctx, createAppointment,
		arg.BarbershopsID,
		arg.CustomerID,
		arg.BarberID,
		arg.ServiceID,
		arg.AppointmentDatetime,
		arg.Status,
	)
	var i Appointment
	err := row.Scan(
		&i.AppointmentID,
		&i.BarbershopsID,
		&i.CustomerID,
		&i.BarberID,
		&i.ServiceID,
		&i.AppointmentDatetime,
		&i.Status,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}

const getAppointmentBarber = `-- name: GetAppointmentBarber :one
SELECT appointment_id, barbershops_id, customer_id, barber_id, service_id, appointment_datetime, status, created_at, update_at FROM "Appointments"
WHERE DATE(appointment_datetime) = $1
AND employee_id = $1
ORDER BY appointment_datetime
`

func (q *Queries) GetAppointmentBarber(ctx context.Context, appointmentDatetime time.Time) (Appointment, error) {
	row := q.db.QueryRowContext(ctx, getAppointmentBarber, appointmentDatetime)
	var i Appointment
	err := row.Scan(
		&i.AppointmentID,
		&i.BarbershopsID,
		&i.CustomerID,
		&i.BarberID,
		&i.ServiceID,
		&i.AppointmentDatetime,
		&i.Status,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}
