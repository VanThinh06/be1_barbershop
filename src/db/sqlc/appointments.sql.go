// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: appointments.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const getAppointmentByDate = `-- name: GetAppointmentByDate :many
SELECT appointment_id, barbershops_id, customer_id, barber_id, appointment_datetime, status, created_at, updated_at FROM "Appointments"
WHERE DATE(appointment_datetime) = $1
AND barber_id = $2
ORDER BY appointment_datetime
`

type GetAppointmentByDateParams struct {
	AppointmentDatetime time.Time `json:"appointment_datetime"`
	BarberID            uuid.UUID `json:"barber_id"`
}

func (q *Queries) GetAppointmentByDate(ctx context.Context, arg GetAppointmentByDateParams) ([]Appointment, error) {
	rows, err := q.db.QueryContext(ctx, getAppointmentByDate, arg.AppointmentDatetime, arg.BarberID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Appointment{}
	for rows.Next() {
		var i Appointment
		if err := rows.Scan(
			&i.AppointmentID,
			&i.BarbershopsID,
			&i.CustomerID,
			&i.BarberID,
			&i.AppointmentDatetime,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertAppointment = `-- name: InsertAppointment :one
INSERT INTO "Appointments" (
    barbershops_id,
    customer_id,
    barber_id,    
    appointment_datetime,
    "status"  
    )
VALUES ($1, $2, $3, $4, $5)
RETURNING appointment_id, barbershops_id, customer_id, barber_id, appointment_datetime, status, created_at, updated_at
`

type InsertAppointmentParams struct {
	BarbershopsID       uuid.UUID `json:"barbershops_id"`
	CustomerID          uuid.UUID `json:"customer_id"`
	BarberID            uuid.UUID `json:"barber_id"`
	AppointmentDatetime time.Time `json:"appointment_datetime"`
	Status              int32     `json:"status"`
}

func (q *Queries) InsertAppointment(ctx context.Context, arg InsertAppointmentParams) (Appointment, error) {
	row := q.db.QueryRowContext(ctx, insertAppointment,
		arg.BarbershopsID,
		arg.CustomerID,
		arg.BarberID,
		arg.AppointmentDatetime,
		arg.Status,
	)
	var i Appointment
	err := row.Scan(
		&i.AppointmentID,
		&i.BarbershopsID,
		&i.CustomerID,
		&i.BarberID,
		&i.AppointmentDatetime,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertServicesForAppointment = `-- name: InsertServicesForAppointment :many
WITH inserted_services AS (
  INSERT INTO "Services_Appointments" ("Services_id", "Appointments_service_id")
  SELECT unnest($2::uuid[]), $1
  RETURNING "Services_id", "Appointments_service_id"
)
SELECT "Services_id", "Appointments_service_id", s.id, s.category_id, s.chain_id, s.shop_id, s.name, s.timer, s.price, s.description, s.image, s.hidden, s.created_at, s.updated_at
FROM inserted_services
JOIN "Services" s ON "Services_id" = s."id"
`

type InsertServicesForAppointmentParams struct {
	AppointmentsServiceID uuid.UUID   `json:"Appointments_service_id"`
	ServicesID            []uuid.UUID `json:"services_id"`
}

type InsertServicesForAppointmentRow struct {
	ServicesID            uuid.UUID       `json:"Services_id"`
	AppointmentsServiceID uuid.UUID       `json:"Appointments_service_id"`
	ID                    uuid.UUID       `json:"id"`
	CategoryID            uuid.UUID       `json:"category_id"`
	ChainID               uuid.NullUUID   `json:"chain_id"`
	ShopID                uuid.NullUUID   `json:"shop_id"`
	Name                  string          `json:"name"`
	Timer                 sql.NullInt32   `json:"timer"`
	Price                 sql.NullFloat64 `json:"price"`
	Description           sql.NullString  `json:"description"`
	Image                 sql.NullString  `json:"image"`
	Hidden                bool            `json:"hidden"`
	CreatedAt             time.Time       `json:"created_at"`
	UpdatedAt             sql.NullTime    `json:"updated_at"`
}

func (q *Queries) InsertServicesForAppointment(ctx context.Context, arg InsertServicesForAppointmentParams) ([]InsertServicesForAppointmentRow, error) {
	rows, err := q.db.QueryContext(ctx, insertServicesForAppointment, arg.AppointmentsServiceID, pq.Array(arg.ServicesID))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []InsertServicesForAppointmentRow{}
	for rows.Next() {
		var i InsertServicesForAppointmentRow
		if err := rows.Scan(
			&i.ServicesID,
			&i.AppointmentsServiceID,
			&i.ID,
			&i.CategoryID,
			&i.ChainID,
			&i.ShopID,
			&i.Name,
			&i.Timer,
			&i.Price,
			&i.Description,
			&i.Image,
			&i.Hidden,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
