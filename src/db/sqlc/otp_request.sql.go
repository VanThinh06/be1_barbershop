// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: otp_request.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const confirmOTPRequest = `-- name: ConfirmOTPRequest :exec
UPDATE "OTPRequests"
SET is_confirm = $1
WHERE id = $2
`

type ConfirmOTPRequestParams struct {
	IsConfirm bool      `json:"is_confirm"`
	ID        uuid.UUID `json:"id"`
}

func (q *Queries) ConfirmOTPRequest(ctx context.Context, arg ConfirmOTPRequestParams) error {
	_, err := q.db.Exec(ctx, confirmOTPRequest, arg.IsConfirm, arg.ID)
	return err
}

const insertOTPRequest = `-- name: InsertOTPRequest :exec
INSERT INTO "OTPRequests" (
    barber_id,
    otp) 
VALUES ($1, $2)
`

type InsertOTPRequestParams struct {
	BarberID uuid.UUID `json:"barber_id"`
	Otp      string    `json:"otp"`
}

func (q *Queries) InsertOTPRequest(ctx context.Context, arg InsertOTPRequestParams) error {
	_, err := q.db.Exec(ctx, insertOTPRequest, arg.BarberID, arg.Otp)
	return err
}

const selectOTPRequest = `-- name: SelectOTPRequest :one
SELECT id, otp, requested_at, is_confirm
FROM "OTPRequests" 
WHERE barber_id = $1 AND otp = $2 
ORDER BY requested_at DESC 
LIMIT 1
`

type SelectOTPRequestParams struct {
	BarberID uuid.UUID `json:"barber_id"`
	Otp      string    `json:"otp"`
}

type SelectOTPRequestRow struct {
	ID          uuid.UUID `json:"id"`
	Otp         string    `json:"otp"`
	RequestedAt time.Time `json:"requested_at"`
	IsConfirm   bool      `json:"is_confirm"`
}

func (q *Queries) SelectOTPRequest(ctx context.Context, arg SelectOTPRequestParams) (SelectOTPRequestRow, error) {
	row := q.db.QueryRow(ctx, selectOTPRequest, arg.BarberID, arg.Otp)
	var i SelectOTPRequestRow
	err := row.Scan(
		&i.ID,
		&i.Otp,
		&i.RequestedAt,
		&i.IsConfirm,
	)
	return i, err
}

const selectRequestOTPNumber = `-- name: SelectRequestOTPNumber :one
SELECT COUNT(*)
FROM "OTPRequests"
WHERE barber_id = $1
AND date_trunc('day', requested_at) = date_trunc('day', now())
`

func (q *Queries) SelectRequestOTPNumber(ctx context.Context, barberID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, selectRequestOTPNumber, barberID)
	var count int64
	err := row.Scan(&count)
	return count, err
}
