// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: barbershop_services.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createBarberShopService = `-- name: CreateBarberShopService :one
INSERT INTO "BarberShopServices" (
barber_shop_id,
category_id,
gender_id,
name,
timer,
price,
description,
image_url
  )
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, barber_shop_id, category_id, gender_id, name, timer, price, discount_price, discount_start_time, discount_end_time, description, image_url, is_active
`

type CreateBarberShopServiceParams struct {
	BarberShopID uuid.UUID      `json:"barber_shop_id"`
	CategoryID   int16          `json:"category_id"`
	GenderID     int16          `json:"gender_id"`
	Name         string         `json:"name"`
	Timer        int16          `json:"timer"`
	Price        float32        `json:"price"`
	Description  sql.NullString `json:"description"`
	ImageUrl     sql.NullString `json:"image_url"`
}

func (q *Queries) CreateBarberShopService(ctx context.Context, arg CreateBarberShopServiceParams) (BarberShopService, error) {
	row := q.db.QueryRow(ctx, createBarberShopService,
		arg.BarberShopID,
		arg.CategoryID,
		arg.GenderID,
		arg.Name,
		arg.Timer,
		arg.Price,
		arg.Description,
		arg.ImageUrl,
	)
	var i BarberShopService
	err := row.Scan(
		&i.ID,
		&i.BarberShopID,
		&i.CategoryID,
		&i.GenderID,
		&i.Name,
		&i.Timer,
		&i.Price,
		&i.DiscountPrice,
		&i.DiscountStartTime,
		&i.DiscountEndTime,
		&i.Description,
		&i.ImageUrl,
		&i.IsActive,
	)
	return i, err
}

const createComboServiceItems = `-- name: CreateComboServiceItems :one
INSERT INTO "ComboServiceItems" (
combo_service_id,
barber_shop_service_id
  )
VALUES ($1, $2)
RETURNING id, combo_service_id, barber_shop_service_id
`

type CreateComboServiceItemsParams struct {
	ComboServiceID      uuid.UUID `json:"combo_service_id"`
	BarberShopServiceID uuid.UUID `json:"barber_shop_service_id"`
}

func (q *Queries) CreateComboServiceItems(ctx context.Context, arg CreateComboServiceItemsParams) (ComboServiceItem, error) {
	row := q.db.QueryRow(ctx, createComboServiceItems, arg.ComboServiceID, arg.BarberShopServiceID)
	var i ComboServiceItem
	err := row.Scan(&i.ID, &i.ComboServiceID, &i.BarberShopServiceID)
	return i, err
}

const createComboServices = `-- name: CreateComboServices :one


INSERT INTO "ComboServices" (
barber_shop_id,
name,
gender_id,
timer,
price,
description,
image_url
  )
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, barber_shop_id, name, gender_id, timer, price, discount_price, discount_start_time, discount_end_time, description, image_url, is_active
`

type CreateComboServicesParams struct {
	BarberShopID uuid.UUID      `json:"barber_shop_id"`
	Name         string         `json:"name"`
	GenderID     int16          `json:"gender_id"`
	Timer        int16          `json:"timer"`
	Price        float32        `json:"price"`
	Description  sql.NullString `json:"description"`
	ImageUrl     sql.NullString `json:"image_url"`
}

// -- name: DeleteBarberShopServices :exec
// DELETE FROM "BarberShopServices"
// WHERE
//
//	"id" = $1;
//
// COMBO SERVICE
func (q *Queries) CreateComboServices(ctx context.Context, arg CreateComboServicesParams) (ComboService, error) {
	row := q.db.QueryRow(ctx, createComboServices,
		arg.BarberShopID,
		arg.Name,
		arg.GenderID,
		arg.Timer,
		arg.Price,
		arg.Description,
		arg.ImageUrl,
	)
	var i ComboService
	err := row.Scan(
		&i.ID,
		&i.BarberShopID,
		&i.Name,
		&i.GenderID,
		&i.Timer,
		&i.Price,
		&i.DiscountPrice,
		&i.DiscountStartTime,
		&i.DiscountEndTime,
		&i.Description,
		&i.ImageUrl,
		&i.IsActive,
	)
	return i, err
}

const getBarberShopService = `-- name: GetBarberShopService :one
SELECT bs.id, bs.barber_shop_id, bs.category_id, bs.gender_id, bs.name, bs.timer, bs.price, bs.discount_price, bs.discount_start_time, bs.discount_end_time, bs.description, bs.image_url, bs.is_active, sc."name" AS "category_name"
FROM "BarberShopServices" bs
LEFT JOIN 
    "ServiceCategories" sc ON sc."id" = bs."category_id"
WHERE bs."id" = $1
`

type GetBarberShopServiceRow struct {
	ID                uuid.UUID        `json:"id"`
	BarberShopID      uuid.UUID        `json:"barber_shop_id"`
	CategoryID        int16            `json:"category_id"`
	GenderID          int16            `json:"gender_id"`
	Name              string           `json:"name"`
	Timer             int16            `json:"timer"`
	Price             float32          `json:"price"`
	DiscountPrice     pgtype.Float4    `json:"discount_price"`
	DiscountStartTime pgtype.Timestamp `json:"discount_start_time"`
	DiscountEndTime   pgtype.Timestamp `json:"discount_end_time"`
	Description       sql.NullString   `json:"description"`
	ImageUrl          sql.NullString   `json:"image_url"`
	IsActive          bool             `json:"is_active"`
	CategoryName      sql.NullString   `json:"category_name"`
}

func (q *Queries) GetBarberShopService(ctx context.Context, id uuid.UUID) (GetBarberShopServiceRow, error) {
	row := q.db.QueryRow(ctx, getBarberShopService, id)
	var i GetBarberShopServiceRow
	err := row.Scan(
		&i.ID,
		&i.BarberShopID,
		&i.CategoryID,
		&i.GenderID,
		&i.Name,
		&i.Timer,
		&i.Price,
		&i.DiscountPrice,
		&i.DiscountStartTime,
		&i.DiscountEndTime,
		&i.Description,
		&i.ImageUrl,
		&i.IsActive,
		&i.CategoryName,
	)
	return i, err
}

const getComboService = `-- name: GetComboService :many
SELECT 
  cs.id,
  cs.name AS combo_service_name,
  cs.description AS combo_service_description,
  cs.price AS combo_service_price,
  cs.image_url AS combo_service_image_url,
  cs.timer AS combo_service_timer,
  cs.gender_id AS combo_service_gender,
  cs.is_active AS combo_service_is_active,
  bss.id AS barber_shop_service_id,
  bss.name AS barber_shop_service_name,
  bss.price AS barber_shop_service_price
FROM 
  "ComboServiceItems" csi
JOIN 
  "ComboServices" cs ON csi.combo_service_id = cs.id
JOIN 
  "BarberShopServices" bss ON csi.barber_shop_service_id = bss.id
WHERE 
  cs.id = $1
`

type GetComboServiceRow struct {
	ID                      uuid.UUID      `json:"id"`
	ComboServiceName        string         `json:"combo_service_name"`
	ComboServiceDescription sql.NullString `json:"combo_service_description"`
	ComboServicePrice       float32        `json:"combo_service_price"`
	ComboServiceImageUrl    sql.NullString `json:"combo_service_image_url"`
	ComboServiceTimer       int16          `json:"combo_service_timer"`
	ComboServiceGender      int16          `json:"combo_service_gender"`
	ComboServiceIsActive    bool           `json:"combo_service_is_active"`
	BarberShopServiceID     uuid.UUID      `json:"barber_shop_service_id"`
	BarberShopServiceName   string         `json:"barber_shop_service_name"`
	BarberShopServicePrice  float32        `json:"barber_shop_service_price"`
}

func (q *Queries) GetComboService(ctx context.Context, id uuid.UUID) ([]GetComboServiceRow, error) {
	rows, err := q.db.Query(ctx, getComboService, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetComboServiceRow{}
	for rows.Next() {
		var i GetComboServiceRow
		if err := rows.Scan(
			&i.ID,
			&i.ComboServiceName,
			&i.ComboServiceDescription,
			&i.ComboServicePrice,
			&i.ComboServiceImageUrl,
			&i.ComboServiceTimer,
			&i.ComboServiceGender,
			&i.ComboServiceIsActive,
			&i.BarberShopServiceID,
			&i.BarberShopServiceName,
			&i.BarberShopServicePrice,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTimerBarberShopServices = `-- name: GetTimerBarberShopServices :one
SELECT SUM("timer") AS total_timer
FROM "BarberShopServices"
WHERE "id" = ANY($1::uuid[])
`

func (q *Queries) GetTimerBarberShopServices(ctx context.Context, dollar_1 []uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, getTimerBarberShopServices, dollar_1)
	var total_timer int64
	err := row.Scan(&total_timer)
	return total_timer, err
}

const listComboServices = `-- name: ListComboServices :many
SELECT id, barber_shop_id, combo_service_gender, combo_service_name, combo_service_timer, combo_service_price, combo_service_discount_price, combo_service_discount_start_time, combo_service_discount_end_time, combo_service_description, combo_service_image_url, combo_service_is_active, barber_shop_service_ids FROM "view_combo_service"
WHERE barber_shop_id = $1
`

func (q *Queries) ListComboServices(ctx context.Context, barberShopID uuid.UUID) ([]ViewComboService, error) {
	rows, err := q.db.Query(ctx, listComboServices, barberShopID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ViewComboService{}
	for rows.Next() {
		var i ViewComboService
		if err := rows.Scan(
			&i.ID,
			&i.BarberShopID,
			&i.ComboServiceGender,
			&i.ComboServiceName,
			&i.ComboServiceTimer,
			&i.ComboServicePrice,
			&i.ComboServiceDiscountPrice,
			&i.ComboServiceDiscountStartTime,
			&i.ComboServiceDiscountEndTime,
			&i.ComboServiceDescription,
			&i.ComboServiceImageUrl,
			&i.ComboServiceIsActive,
			&i.BarberShopServiceIds,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listServicesByCategory = `-- name: ListServicesByCategory :many
SELECT 
    sc."id" AS "category_id", 
    sc."name" AS "category_name", 
    bs."id" AS "service_id", 
    bs."name" AS "service_name",
    bs."timer",
    bs."price",
    bs."description",
    bs."image_url",
    bs."gender_id",
    bs."is_active",
    bs."discount_price",
    bs."discount_start_time",
    bs."discount_end_time"
FROM 
    "ServiceCategories" sc
LEFT JOIN 
    "BarberShopServices" bs ON sc."id" = bs."category_id"
LEFT JOIN 
    "CategoryPositions" cp ON sc."id" = cp."category_id"
WHERE 
    bs."barber_shop_id" = $1
    AND (cp."visible" = true)  
ORDER BY
    cp."position",  -- Sắp xếp theo vị trí của category
    sc."id",
    bs."gender_id"
`

type ListServicesByCategoryRow struct {
	CategoryID        int16            `json:"category_id"`
	CategoryName      string           `json:"category_name"`
	ServiceID         uuid.NullUUID    `json:"service_id"`
	ServiceName       sql.NullString   `json:"service_name"`
	Timer             pgtype.Int2      `json:"timer"`
	Price             pgtype.Float4    `json:"price"`
	Description       sql.NullString   `json:"description"`
	ImageUrl          sql.NullString   `json:"image_url"`
	GenderID          pgtype.Int2      `json:"gender_id"`
	IsActive          pgtype.Bool      `json:"is_active"`
	DiscountPrice     pgtype.Float4    `json:"discount_price"`
	DiscountStartTime pgtype.Timestamp `json:"discount_start_time"`
	DiscountEndTime   pgtype.Timestamp `json:"discount_end_time"`
}

func (q *Queries) ListServicesByCategory(ctx context.Context, barberShopID uuid.UUID) ([]ListServicesByCategoryRow, error) {
	rows, err := q.db.Query(ctx, listServicesByCategory, barberShopID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListServicesByCategoryRow{}
	for rows.Next() {
		var i ListServicesByCategoryRow
		if err := rows.Scan(
			&i.CategoryID,
			&i.CategoryName,
			&i.ServiceID,
			&i.ServiceName,
			&i.Timer,
			&i.Price,
			&i.Description,
			&i.ImageUrl,
			&i.GenderID,
			&i.IsActive,
			&i.DiscountPrice,
			&i.DiscountStartTime,
			&i.DiscountEndTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBarberShopService = `-- name: UpdateBarberShopService :exec


UPDATE "BarberShopServices"
SET 
    name = COALESCE($2, name),
    timer = COALESCE($3, timer),
    category_id = COALESCE($4, category_id),
    gender_id = COALESCE($5, gender_id),
    price = COALESCE($6, price),
    description = COALESCE($7, description),
    image_url = COALESCE($8, image_url),
    is_active = COALESCE($9, is_active),
    discount_price = $10,
    discount_start_time = $11,
    discount_end_time = $12
WHERE "id" = $1
`

type UpdateBarberShopServiceParams struct {
	ID                uuid.UUID        `json:"id"`
	Name              string           `json:"name"`
	Timer             int16            `json:"timer"`
	CategoryID        int16            `json:"category_id"`
	GenderID          int16            `json:"gender_id"`
	Price             float32          `json:"price"`
	Description       sql.NullString   `json:"description"`
	ImageUrl          sql.NullString   `json:"image_url"`
	IsActive          bool             `json:"is_active"`
	DiscountPrice     pgtype.Float4    `json:"discount_price"`
	DiscountStartTime pgtype.Timestamp `json:"discount_start_time"`
	DiscountEndTime   pgtype.Timestamp `json:"discount_end_time"`
}

// Để phân loại theo gender_id nếu cần thiết
func (q *Queries) UpdateBarberShopService(ctx context.Context, arg UpdateBarberShopServiceParams) error {
	_, err := q.db.Exec(ctx, updateBarberShopService,
		arg.ID,
		arg.Name,
		arg.Timer,
		arg.CategoryID,
		arg.GenderID,
		arg.Price,
		arg.Description,
		arg.ImageUrl,
		arg.IsActive,
		arg.DiscountPrice,
		arg.DiscountStartTime,
		arg.DiscountEndTime,
	)
	return err
}
