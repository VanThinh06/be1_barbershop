// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: barbershop_services.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createBarberShopService = `-- name: CreateBarberShopService :one
INSERT INTO "BarberShopServices" (
barber_shop_id,
category_id,
gender_id,
name,
timer,
price,
description,
image_url,
combo_services
  )
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id, barber_shop_id, category_id, gender_id, name, timer, price, description, image_url, combo_services
`

type CreateBarberShopServiceParams struct {
	BarberShopID  uuid.UUID      `json:"barber_shop_id"`
	CategoryID    int16          `json:"category_id"`
	GenderID      int16          `json:"gender_id"`
	Name          string         `json:"name"`
	Timer         int16          `json:"timer"`
	Price         float32        `json:"price"`
	Description   sql.NullString `json:"description"`
	ImageUrl      sql.NullString `json:"image_url"`
	ComboServices []string       `json:"combo_services"`
}

func (q *Queries) CreateBarberShopService(ctx context.Context, arg CreateBarberShopServiceParams) (BarberShopService, error) {
	row := q.db.QueryRow(ctx, createBarberShopService,
		arg.BarberShopID,
		arg.CategoryID,
		arg.GenderID,
		arg.Name,
		arg.Timer,
		arg.Price,
		arg.Description,
		arg.ImageUrl,
		arg.ComboServices,
	)
	var i BarberShopService
	err := row.Scan(
		&i.ID,
		&i.BarberShopID,
		&i.CategoryID,
		&i.GenderID,
		&i.Name,
		&i.Timer,
		&i.Price,
		&i.Description,
		&i.ImageUrl,
		&i.ComboServices,
	)
	return i, err
}

const getTimerBarberShopServices = `-- name: GetTimerBarberShopServices :one
SELECT SUM("timer") AS total_timer
FROM "BarberShopServices"
WHERE "id" = ANY($1::uuid[])
`

func (q *Queries) GetTimerBarberShopServices(ctx context.Context, dollar_1 []uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, getTimerBarberShopServices, dollar_1)
	var total_timer int64
	err := row.Scan(&total_timer)
	return total_timer, err
}

const listBarberShopServices = `-- name: ListBarberShopServices :many
SELECT bs."id", bs."name", sc."name" as "category_name"
FROM "BarberShopServices" bs
JOIN "ServiceCategories" sc ON bs."category_id" = sc."id"
WHERE bs."barber_shop_id" = $1
`

type ListBarberShopServicesRow struct {
	ID           uuid.UUID `json:"id"`
	Name         string    `json:"name"`
	CategoryName string    `json:"category_name"`
}

func (q *Queries) ListBarberShopServices(ctx context.Context, barberShopID uuid.UUID) ([]ListBarberShopServicesRow, error) {
	rows, err := q.db.Query(ctx, listBarberShopServices, barberShopID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListBarberShopServicesRow{}
	for rows.Next() {
		var i ListBarberShopServicesRow
		if err := rows.Scan(&i.ID, &i.Name, &i.CategoryName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
