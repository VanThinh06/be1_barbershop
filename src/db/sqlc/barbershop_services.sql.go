// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: barbershop_services.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createBarberShopService = `-- name: CreateBarberShopService :one
INSERT INTO "BarberShopServices" (
barber_shop_id,
category_id,
gender_id,
name,
timer,
price,
description,
image_url,
combo_services
  )
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id, barber_shop_id, category_id, gender_id, name, timer, price, discount_price, discount_start_time, discount_end_time, description, image_url, combo_services, is_active
`

type CreateBarberShopServiceParams struct {
	BarberShopID  uuid.UUID      `json:"barber_shop_id"`
	CategoryID    int16          `json:"category_id"`
	GenderID      int16          `json:"gender_id"`
	Name          string         `json:"name"`
	Timer         int16          `json:"timer"`
	Price         float32        `json:"price"`
	Description   sql.NullString `json:"description"`
	ImageUrl      sql.NullString `json:"image_url"`
	ComboServices []string       `json:"combo_services"`
}

func (q *Queries) CreateBarberShopService(ctx context.Context, arg CreateBarberShopServiceParams) (BarberShopService, error) {
	row := q.db.QueryRow(ctx, createBarberShopService,
		arg.BarberShopID,
		arg.CategoryID,
		arg.GenderID,
		arg.Name,
		arg.Timer,
		arg.Price,
		arg.Description,
		arg.ImageUrl,
		arg.ComboServices,
	)
	var i BarberShopService
	err := row.Scan(
		&i.ID,
		&i.BarberShopID,
		&i.CategoryID,
		&i.GenderID,
		&i.Name,
		&i.Timer,
		&i.Price,
		&i.DiscountPrice,
		&i.DiscountStartTime,
		&i.DiscountEndTime,
		&i.Description,
		&i.ImageUrl,
		&i.ComboServices,
		&i.IsActive,
	)
	return i, err
}

const getBarberShopService = `-- name: GetBarberShopService :one
SELECT id, barber_shop_id, category_id, gender_id, name, timer, price, discount_price, discount_start_time, discount_end_time, description, image_url, combo_services, is_active 
FROM "BarberShopServices" 
WHERE "id" = $1
`

func (q *Queries) GetBarberShopService(ctx context.Context, id uuid.UUID) (BarberShopService, error) {
	row := q.db.QueryRow(ctx, getBarberShopService, id)
	var i BarberShopService
	err := row.Scan(
		&i.ID,
		&i.BarberShopID,
		&i.CategoryID,
		&i.GenderID,
		&i.Name,
		&i.Timer,
		&i.Price,
		&i.DiscountPrice,
		&i.DiscountStartTime,
		&i.DiscountEndTime,
		&i.Description,
		&i.ImageUrl,
		&i.ComboServices,
		&i.IsActive,
	)
	return i, err
}

const getTimerBarberShopServices = `-- name: GetTimerBarberShopServices :one
SELECT SUM("timer") AS total_timer
FROM "BarberShopServices"
WHERE "id" = ANY($1::uuid[])
`

func (q *Queries) GetTimerBarberShopServices(ctx context.Context, dollar_1 []uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, getTimerBarberShopServices, dollar_1)
	var total_timer int64
	err := row.Scan(&total_timer)
	return total_timer, err
}

const listBarberShopServices = `-- name: ListBarberShopServices :many
SELECT bs."id", bs."name", sc."name" as "category_name"
FROM "BarberShopServices" bs
JOIN "ServiceCategories" sc ON bs."category_id" = sc."id"
WHERE bs."barber_shop_id" = $1
AND bs."combo_services" IS NULL
`

type ListBarberShopServicesRow struct {
	ID           uuid.UUID `json:"id"`
	Name         string    `json:"name"`
	CategoryName string    `json:"category_name"`
}

func (q *Queries) ListBarberShopServices(ctx context.Context, barberShopID uuid.UUID) ([]ListBarberShopServicesRow, error) {
	rows, err := q.db.Query(ctx, listBarberShopServices, barberShopID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListBarberShopServicesRow{}
	for rows.Next() {
		var i ListBarberShopServicesRow
		if err := rows.Scan(&i.ID, &i.Name, &i.CategoryName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listComboServices = `-- name: ListComboServices :many
SELECT 
    bs."id" AS "service_id",
    bs."name" AS "service_name",
    bs."gender_id",
    bs."timer",
    bs."price",
    bs."description",
    bs."image_url",
    bs."is_active",
    bs."discount_price",
    bs."discount_start_time",
    bs."discount_end_time",
    combo_services
FROM 
    "BarberShopServices" bs
WHERE 
    bs."barber_shop_id" = $1
    AND bs."combo_services" IS NOT NULL AND array_length(bs."combo_services", 1) > 0
ORDER BY
    bs."gender_id"
`

type ListComboServicesRow struct {
	ServiceID         uuid.UUID        `json:"service_id"`
	ServiceName       string           `json:"service_name"`
	GenderID          int16            `json:"gender_id"`
	Timer             int16            `json:"timer"`
	Price             float32          `json:"price"`
	Description       sql.NullString   `json:"description"`
	ImageUrl          sql.NullString   `json:"image_url"`
	IsActive          bool             `json:"is_active"`
	DiscountPrice     pgtype.Float4    `json:"discount_price"`
	DiscountStartTime pgtype.Timestamp `json:"discount_start_time"`
	DiscountEndTime   pgtype.Timestamp `json:"discount_end_time"`
	ComboServices     []string         `json:"combo_services"`
}

func (q *Queries) ListComboServices(ctx context.Context, barberShopID uuid.UUID) ([]ListComboServicesRow, error) {
	rows, err := q.db.Query(ctx, listComboServices, barberShopID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListComboServicesRow{}
	for rows.Next() {
		var i ListComboServicesRow
		if err := rows.Scan(
			&i.ServiceID,
			&i.ServiceName,
			&i.GenderID,
			&i.Timer,
			&i.Price,
			&i.Description,
			&i.ImageUrl,
			&i.IsActive,
			&i.DiscountPrice,
			&i.DiscountStartTime,
			&i.DiscountEndTime,
			&i.ComboServices,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listServicesByCategory = `-- name: ListServicesByCategory :many
SELECT 
    sc."id" AS "category_id", 
    sc."name" AS "category_name", 
    bs."id" AS "service_id", 
    bs."name" AS "service_name",
    bs."timer",
    bs."price",
    bs."description",
    bs."image_url",
    bs."gender_id",
    bs."is_active",
    bs."discount_price",
    bs."discount_start_time",
    bs."discount_end_time",
    combo_services
FROM 
    "ServiceCategories" sc
LEFT JOIN 
    "BarberShopServices" bs ON sc."id" = bs."category_id"
WHERE 
    bs."barber_shop_id" = $1
    AND (bs."combo_services" IS NULL OR bs."combo_services" = '{}')
ORDER BY
	sc."id",
    bs."gender_id"
`

type ListServicesByCategoryRow struct {
	CategoryID        int16            `json:"category_id"`
	CategoryName      string           `json:"category_name"`
	ServiceID         uuid.NullUUID    `json:"service_id"`
	ServiceName       sql.NullString   `json:"service_name"`
	Timer             pgtype.Int2      `json:"timer"`
	Price             pgtype.Float4    `json:"price"`
	Description       sql.NullString   `json:"description"`
	ImageUrl          sql.NullString   `json:"image_url"`
	GenderID          pgtype.Int2      `json:"gender_id"`
	IsActive          pgtype.Bool      `json:"is_active"`
	DiscountPrice     pgtype.Float4    `json:"discount_price"`
	DiscountStartTime pgtype.Timestamp `json:"discount_start_time"`
	DiscountEndTime   pgtype.Timestamp `json:"discount_end_time"`
	ComboServices     []string         `json:"combo_services"`
}

func (q *Queries) ListServicesByCategory(ctx context.Context, barberShopID uuid.UUID) ([]ListServicesByCategoryRow, error) {
	rows, err := q.db.Query(ctx, listServicesByCategory, barberShopID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListServicesByCategoryRow{}
	for rows.Next() {
		var i ListServicesByCategoryRow
		if err := rows.Scan(
			&i.CategoryID,
			&i.CategoryName,
			&i.ServiceID,
			&i.ServiceName,
			&i.Timer,
			&i.Price,
			&i.Description,
			&i.ImageUrl,
			&i.GenderID,
			&i.IsActive,
			&i.DiscountPrice,
			&i.DiscountStartTime,
			&i.DiscountEndTime,
			&i.ComboServices,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBarberShopService = `-- name: UpdateBarberShopService :exec
UPDATE "BarberShopServices"
SET 
    name = coalesce($2, name),
    timer = coalesce($3, timer),
    category_id = coalesce($4, category_id),
    gender_id = coalesce($5, gender_id),
    price = coalesce($6, price),
    description = coalesce($7, description),
    image_url = coalesce($8, image_url),
    is_active = coalesce($9, is_active),
    discount_price = coalesce($10, discount_price),
    discount_start_time = coalesce($11, discount_start_time),
    discount_end_time = coalesce($12, discount_end_time),
    combo_services = CASE 
                        WHEN COALESCE($13, '{}')::text[] != '{}' THEN COALESCE($13, '{}')::text[]
                        ELSE combo_services
                    END
WHERE "id" = $1
`

type UpdateBarberShopServiceParams struct {
	ID                uuid.UUID        `json:"id"`
	Name              sql.NullString   `json:"name"`
	Timer             pgtype.Int2      `json:"timer"`
	CategoryID        pgtype.Int2      `json:"category_id"`
	GenderID          pgtype.Int2      `json:"gender_id"`
	Price             pgtype.Float4    `json:"price"`
	Description       sql.NullString   `json:"description"`
	ImageUrl          sql.NullString   `json:"image_url"`
	IsActive          pgtype.Bool      `json:"is_active"`
	DiscountPrice     pgtype.Float4    `json:"discount_price"`
	DiscountStartTime pgtype.Timestamp `json:"discount_start_time"`
	DiscountEndTime   pgtype.Timestamp `json:"discount_end_time"`
	ComboServices     []string         `json:"combo_services"`
}

func (q *Queries) UpdateBarberShopService(ctx context.Context, arg UpdateBarberShopServiceParams) error {
	_, err := q.db.Exec(ctx, updateBarberShopService,
		arg.ID,
		arg.Name,
		arg.Timer,
		arg.CategoryID,
		arg.GenderID,
		arg.Price,
		arg.Description,
		arg.ImageUrl,
		arg.IsActive,
		arg.DiscountPrice,
		arg.DiscountStartTime,
		arg.DiscountEndTime,
		arg.ComboServices,
	)
	return err
}
