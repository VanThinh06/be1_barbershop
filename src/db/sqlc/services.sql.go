// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: services.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createService = `-- name: CreateService :one
INSERT INTO "Services" (
    category_id,
    "name",
    timer,
    price,
    "description",
    "image"
  )
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, category_id, shop_id, name, timer, price, description, image, hidden, created_at, updated_at
`

type CreateServiceParams struct {
	CategoryID  uuid.UUID       `json:"category_id"`
	Name        string          `json:"name"`
	Timer       sql.NullInt32   `json:"timer"`
	Price       sql.NullFloat64 `json:"price"`
	Description sql.NullString  `json:"description"`
	Image       sql.NullString  `json:"image"`
}

func (q *Queries) CreateService(ctx context.Context, arg CreateServiceParams) (Service, error) {
	row := q.db.QueryRowContext(ctx, createService,
		arg.CategoryID,
		arg.Name,
		arg.Timer,
		arg.Price,
		arg.Description,
		arg.Image,
	)
	var i Service
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.ShopID,
		&i.Name,
		&i.Timer,
		&i.Price,
		&i.Description,
		&i.Image,
		&i.Hidden,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createServicePrivate = `-- name: CreateServicePrivate :one
INSERT INTO "Services" (
    category_id,
    "shop_id",
    "name",
    timer,
    price,
    "description",
    "image"
  )
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, category_id, shop_id, name, timer, price, description, image, hidden, created_at, updated_at
`

type CreateServicePrivateParams struct {
	CategoryID  uuid.UUID       `json:"category_id"`
	ShopID      uuid.NullUUID   `json:"shop_id"`
	Name        string          `json:"name"`
	Timer       sql.NullInt32   `json:"timer"`
	Price       sql.NullFloat64 `json:"price"`
	Description sql.NullString  `json:"description"`
	Image       sql.NullString  `json:"image"`
}

func (q *Queries) CreateServicePrivate(ctx context.Context, arg CreateServicePrivateParams) (Service, error) {
	row := q.db.QueryRowContext(ctx, createServicePrivate,
		arg.CategoryID,
		arg.ShopID,
		arg.Name,
		arg.Timer,
		arg.Price,
		arg.Description,
		arg.Image,
	)
	var i Service
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.ShopID,
		&i.Name,
		&i.Timer,
		&i.Price,
		&i.Description,
		&i.Image,
		&i.Hidden,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getListServiceDetails = `-- name: GetListServiceDetails :many
SELECT
    sc.id AS category_id,
    sc.name AS category_name,
    s.id AS service_id,
    s.name AS service_name,
    s.timer,
    s.price,
    s.description,
    s.image
FROM
    "ServiceCategories" sc
JOIN
    "Services" s ON sc.id = s.category_id
WHERE
    (sc.chain_id = $1 OR
    sc.shop_id = $2) AND
    sc.hidden = false AND
    s.hidden = false
`

type GetListServiceDetailsParams struct {
	ChainID uuid.NullUUID `json:"chain_id"`
	ShopID  uuid.NullUUID `json:"shop_id"`
}

type GetListServiceDetailsRow struct {
	CategoryID   uuid.UUID       `json:"category_id"`
	CategoryName string          `json:"category_name"`
	ServiceID    uuid.UUID       `json:"service_id"`
	ServiceName  string          `json:"service_name"`
	Timer        sql.NullInt32   `json:"timer"`
	Price        sql.NullFloat64 `json:"price"`
	Description  sql.NullString  `json:"description"`
	Image        sql.NullString  `json:"image"`
}

func (q *Queries) GetListServiceDetails(ctx context.Context, arg GetListServiceDetailsParams) ([]GetListServiceDetailsRow, error) {
	rows, err := q.db.QueryContext(ctx, getListServiceDetails, arg.ChainID, arg.ShopID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetListServiceDetailsRow{}
	for rows.Next() {
		var i GetListServiceDetailsRow
		if err := rows.Scan(
			&i.CategoryID,
			&i.CategoryName,
			&i.ServiceID,
			&i.ServiceName,
			&i.Timer,
			&i.Price,
			&i.Description,
			&i.Image,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getListServices = `-- name: GetListServices :many
SELECT id, category_id, shop_id, name, timer, price, description, image, hidden, created_at, updated_at
FROM "Services"
WHERE (("category_id" = $1 AND "shop_id" IS NULL) OR ("category_id" = $1 AND "shop_id" = $2))
  AND "hidden" = false
`

type GetListServicesParams struct {
	CategoryID uuid.UUID     `json:"category_id"`
	ShopID     uuid.NullUUID `json:"shop_id"`
}

func (q *Queries) GetListServices(ctx context.Context, arg GetListServicesParams) ([]Service, error) {
	rows, err := q.db.QueryContext(ctx, getListServices, arg.CategoryID, arg.ShopID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Service{}
	for rows.Next() {
		var i Service
		if err := rows.Scan(
			&i.ID,
			&i.CategoryID,
			&i.ShopID,
			&i.Name,
			&i.Timer,
			&i.Price,
			&i.Description,
			&i.Image,
			&i.Hidden,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTimerService = `-- name: GetTimerService :one
SELECT SUM("timer") AS total_timer
FROM "Services"
WHERE "id" IN ( $1::uuid[] )
`

func (q *Queries) GetTimerService(ctx context.Context, servicesID []uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, getTimerService, pq.Array(servicesID))
	var total_timer int64
	err := row.Scan(&total_timer)
	return total_timer, err
}
