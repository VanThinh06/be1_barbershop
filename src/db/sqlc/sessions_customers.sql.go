// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: sessions_customers.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createSessionsCustomer = `-- name: CreateSessionsCustomer :one
INSERT INTO "SessionsCustomers" (
                               id,
                               customer_id,
                               refresh_token,
                               user_agent,
                               client_ip,
                               fcm_device,
                               is_blocked,
                               expires_at,
                               timezone,
                               coordinates
                               )
VALUES ($1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8,
        $9,
        ST_GeographyFromText('POINT(' || $10::float8 || ' ' || $11::float8 || ')')
        ) RETURNING id, customer_id, refresh_token, user_agent, client_ip, fcm_device, timezone, coordinates, is_blocked, expires_at, created_at
`

type CreateSessionsCustomerParams struct {
	ID           uuid.UUID `json:"id"`
	CustomerID   uuid.UUID `json:"customer_id"`
	RefreshToken string    `json:"refresh_token"`
	UserAgent    string    `json:"user_agent"`
	ClientIp     string    `json:"client_ip"`
	FcmDevice    string    `json:"fcm_device"`
	IsBlocked    bool      `json:"is_blocked"`
	ExpiresAt    time.Time `json:"expires_at"`
	Timezone     string    `json:"timezone"`
	Longitude    float64   `json:"longitude"`
	Latitude     float64   `json:"latitude"`
}

func (q *Queries) CreateSessionsCustomer(ctx context.Context, arg CreateSessionsCustomerParams) (SessionsCustomer, error) {
	row := q.db.QueryRowContext(ctx, createSessionsCustomer,
		arg.ID,
		arg.CustomerID,
		arg.RefreshToken,
		arg.UserAgent,
		arg.ClientIp,
		arg.FcmDevice,
		arg.IsBlocked,
		arg.ExpiresAt,
		arg.Timezone,
		arg.Longitude,
		arg.Latitude,
	)
	var i SessionsCustomer
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.RefreshToken,
		&i.UserAgent,
		&i.ClientIp,
		&i.FcmDevice,
		&i.Timezone,
		&i.Coordinates,
		&i.IsBlocked,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getSessionsCustomer = `-- name: GetSessionsCustomer :one
SELECT id, customer_id, refresh_token, user_agent, client_ip, fcm_device, timezone, coordinates, is_blocked, expires_at, created_at
FROM "SessionsCustomers"
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetSessionsCustomer(ctx context.Context, id uuid.UUID) (SessionsCustomer, error) {
	row := q.db.QueryRowContext(ctx, getSessionsCustomer, id)
	var i SessionsCustomer
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.RefreshToken,
		&i.UserAgent,
		&i.ClientIp,
		&i.FcmDevice,
		&i.Timezone,
		&i.Coordinates,
		&i.IsBlocked,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateRefreshTokenSessionsCustomer = `-- name: UpdateRefreshTokenSessionsCustomer :one
UPDATE "SessionsCustomers"
set refresh_token = $2,
    expires_at = $3
WHERE id = $1
RETURNING id, customer_id, refresh_token, user_agent, client_ip, fcm_device, timezone, coordinates, is_blocked, expires_at, created_at
`

type UpdateRefreshTokenSessionsCustomerParams struct {
	ID           uuid.UUID `json:"id"`
	RefreshToken string    `json:"refresh_token"`
	ExpiresAt    time.Time `json:"expires_at"`
}

func (q *Queries) UpdateRefreshTokenSessionsCustomer(ctx context.Context, arg UpdateRefreshTokenSessionsCustomerParams) (SessionsCustomer, error) {
	row := q.db.QueryRowContext(ctx, updateRefreshTokenSessionsCustomer, arg.ID, arg.RefreshToken, arg.ExpiresAt)
	var i SessionsCustomer
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.RefreshToken,
		&i.UserAgent,
		&i.ClientIp,
		&i.FcmDevice,
		&i.Timezone,
		&i.Coordinates,
		&i.IsBlocked,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}
