// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: service_categories.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createServiceCategory = `-- name: CreateServiceCategory :one
INSERT INTO "ServiceCategories" ("name", "barber_shop_id")
VALUES ($1, $2)
RETURNING id, name, barber_shop_id
`

type CreateServiceCategoryParams struct {
	Name         string        `json:"name"`
	BarberShopID uuid.NullUUID `json:"barber_shop_id"`
}

func (q *Queries) CreateServiceCategory(ctx context.Context, arg CreateServiceCategoryParams) (ServiceCategory, error) {
	row := q.db.QueryRow(ctx, createServiceCategory, arg.Name, arg.BarberShopID)
	var i ServiceCategory
	err := row.Scan(&i.ID, &i.Name, &i.BarberShopID)
	return i, err
}

const deleteServiceCategories = `-- name: DeleteServiceCategories :exec
DELETE FROM "ServiceCategories"
WHERE "id" = $1
`

func (q *Queries) DeleteServiceCategories(ctx context.Context, id int16) error {
	_, err := q.db.Exec(ctx, deleteServiceCategories, id)
	return err
}

const listServiceCategories = `-- name: ListServiceCategories :many
SELECT 
    sc.id, sc.name, sc.barber_shop_id,
    cp.position,
    cp.visible
FROM 
    "ServiceCategories" sc
LEFT JOIN 
    "CategoryPositions" cp
ON 
    sc.id = cp.category_id 
WHERE sc."barber_shop_id" = $1 OR sc."barber_shop_id" IS NULL
ORDER BY cp.position
`

type ListServiceCategoriesRow struct {
	ID           int16         `json:"id"`
	Name         string        `json:"name"`
	BarberShopID uuid.NullUUID `json:"barber_shop_id"`
	Position     pgtype.Int2   `json:"position"`
	Visible      pgtype.Bool   `json:"visible"`
}

func (q *Queries) ListServiceCategories(ctx context.Context, barberShopID uuid.NullUUID) ([]ListServiceCategoriesRow, error) {
	rows, err := q.db.Query(ctx, listServiceCategories, barberShopID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListServiceCategoriesRow{}
	for rows.Next() {
		var i ListServiceCategoriesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.BarberShopID,
			&i.Position,
			&i.Visible,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCategoryPosition = `-- name: UpdateCategoryPosition :exec
INSERT INTO "CategoryPositions" ("barber_shop_id", "category_id", "position", "visible")
VALUES ($1, $2, $3, $4)
ON CONFLICT ("barber_shop_id", "category_id") 
DO UPDATE SET 
    "position" = EXCLUDED."position",
    "hidden" = EXCLUDED."hidden"
`

type UpdateCategoryPositionParams struct {
	BarberShopID uuid.UUID `json:"barber_shop_id"`
	CategoryID   int16     `json:"category_id"`
	Position     int16     `json:"position"`
	Visible      bool      `json:"visible"`
}

func (q *Queries) UpdateCategoryPosition(ctx context.Context, arg UpdateCategoryPositionParams) error {
	_, err := q.db.Exec(ctx, updateCategoryPosition,
		arg.BarberShopID,
		arg.CategoryID,
		arg.Position,
		arg.Visible,
	)
	return err
}

const updateServiceCategory = `-- name: UpdateServiceCategory :exec
UPDATE "ServiceCategories"
SET "name" = coalesce($2, name)
WHERE "id" = $1
`

type UpdateServiceCategoryParams struct {
	ID   int16          `json:"id"`
	Name sql.NullString `json:"name"`
}

func (q *Queries) UpdateServiceCategory(ctx context.Context, arg UpdateServiceCategoryParams) error {
	_, err := q.db.Exec(ctx, updateServiceCategory, arg.ID, arg.Name)
	return err
}
