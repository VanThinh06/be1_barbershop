// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: service_categories.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createServiceCategory = `-- name: CreateServiceCategory :one
INSERT INTO "ServiceCategories" ("name", "barber_shop_id")
VALUES ($1, $2)
RETURNING id, name, barber_shop_id
`

type CreateServiceCategoryParams struct {
	Name         string        `json:"name"`
	BarberShopID uuid.NullUUID `json:"barber_shop_id"`
}

func (q *Queries) CreateServiceCategory(ctx context.Context, arg CreateServiceCategoryParams) (ServiceCategory, error) {
	row := q.db.QueryRow(ctx, createServiceCategory, arg.Name, arg.BarberShopID)
	var i ServiceCategory
	err := row.Scan(&i.ID, &i.Name, &i.BarberShopID)
	return i, err
}

const deleteServiceCategories = `-- name: DeleteServiceCategories :exec
DELETE FROM "ServiceCategories"
WHERE "id" = $1
`

func (q *Queries) DeleteServiceCategories(ctx context.Context, id int16) error {
	_, err := q.db.Exec(ctx, deleteServiceCategories, id)
	return err
}

const updateServiceCategory = `-- name: UpdateServiceCategory :exec
UPDATE "ServiceCategories"
SET "name" = coalesce($2, name)
WHERE "id" = $1
`

type UpdateServiceCategoryParams struct {
	ID   int16          `json:"id"`
	Name sql.NullString `json:"name"`
}

func (q *Queries) UpdateServiceCategory(ctx context.Context, arg UpdateServiceCategoryParams) error {
	_, err := q.db.Exec(ctx, updateServiceCategory, arg.ID, arg.Name)
	return err
}
