// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: service_categories.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createServiceCategory = `-- name: CreateServiceCategory :one
INSERT INTO "ServiceCategories" (
"name",
"chain_id",
"gender"
) VALUES (
  $1, $2, $3
)
RETURNING id, chain_id, shop_id, gender, name, created_at, updated_at, hidden
`

type CreateServiceCategoryParams struct {
	Name    string        `json:"name"`
	ChainID uuid.NullUUID `json:"chain_id"`
	Gender  int32         `json:"gender"`
}

func (q *Queries) CreateServiceCategory(ctx context.Context, arg CreateServiceCategoryParams) (ServiceCategory, error) {
	row := q.db.QueryRowContext(ctx, createServiceCategory, arg.Name, arg.ChainID, arg.Gender)
	var i ServiceCategory
	err := row.Scan(
		&i.ID,
		&i.ChainID,
		&i.ShopID,
		&i.Gender,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Hidden,
	)
	return i, err
}

const createServiceCategoryPrivate = `-- name: CreateServiceCategoryPrivate :one
INSERT INTO "ServiceCategories" (
shop_id,
"name",
"gender"
) VALUES (
  $1, $2, $3
)
RETURNING id, chain_id, shop_id, gender, name, created_at, updated_at, hidden
`

type CreateServiceCategoryPrivateParams struct {
	ShopID uuid.NullUUID `json:"shop_id"`
	Name   string        `json:"name"`
	Gender int32         `json:"gender"`
}

func (q *Queries) CreateServiceCategoryPrivate(ctx context.Context, arg CreateServiceCategoryPrivateParams) (ServiceCategory, error) {
	row := q.db.QueryRowContext(ctx, createServiceCategoryPrivate, arg.ShopID, arg.Name, arg.Gender)
	var i ServiceCategory
	err := row.Scan(
		&i.ID,
		&i.ChainID,
		&i.ShopID,
		&i.Gender,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Hidden,
	)
	return i, err
}

const getListServiceCategories = `-- name: GetListServiceCategories :many
SELECT sc.id, sc.chain_id, sc.shop_id, sc.gender, sc.name, sc.created_at, sc.updated_at, sc.hidden
FROM "ServiceCategories" sc
JOIN "BarberShops" bs ON sc."shop_id" = bs."shop_id"
WHERE (sc."shop_id" = $1 OR sc."chain_id" = bs."chain_id")
  AND sc."hidden" = false
`

func (q *Queries) GetListServiceCategories(ctx context.Context, shopID uuid.NullUUID) ([]ServiceCategory, error) {
	rows, err := q.db.QueryContext(ctx, getListServiceCategories, shopID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ServiceCategory{}
	for rows.Next() {
		var i ServiceCategory
		if err := rows.Scan(
			&i.ID,
			&i.ChainID,
			&i.ShopID,
			&i.Gender,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Hidden,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
