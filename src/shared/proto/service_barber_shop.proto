syntax = "proto3";

package pb;

import "google/api/annotations.proto";
import "rpc_create_barber.proto";
import "rpc_login_barber.proto";
import "rpc_update_barber.proto";


import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "barbershop/src/barber/pb";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    info: {
      title: "Barber Shop API",
      version: "1.0";
      contact: {
        name: "Thinh Kai";
        url: "";
        email: "dvanthinh06@gmail.com";
      };
    //   license: {
    //     name: "BSD 3-Clause License";
    //     url: "https://github.com/grpc-ecosystem/grpc-gateway/blob/main/LICENSE";
    //   };
    //   extensions: {
    //     key: "x-something-something";
    //     value {string_value: "yadda"}
    //   }
    };
};

service BarberShop {
    rpc CreateBarber (CreateBarberRequest) returns (CreateBarberResponse){
        option (google.api.http) = {
                  post: "/v1/create_barber"
                  body: "*"
                };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
          description: "API endpoint to create a new barber"
          summary: "Create a barber"
        };
    }

    rpc LoginBarber (LoginBarberRequest) returns (LoginBarberResponse) {
      option (google.api.http) = {
        post: "/v1/authenticate_barber"
        body: "*"
      };
      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        description: "API endpoint for barber authentication" 
        summary: "Authenticate a barber"
      };
    }

    rpc UpdateBarber (UpdateBarberRequest) returns (UpdateBarberResponse) {
      option (google.api.http) = {
        patch: "/v1/authenticate_barber"
        body: "*"
      };
      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        description: "API endpoint for barber authentication" 
        summary: "Authenticate a barber"
      };
    }
}

