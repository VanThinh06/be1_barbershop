// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.15.8
// source: service_customer.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AuthCustomerBarberShop_CreateCustomer_FullMethodName = "/pb.AuthCustomerBarberShop/CreateCustomer"
	AuthCustomerBarberShop_LoginCustomer_FullMethodName  = "/pb.AuthCustomerBarberShop/LoginCustomer"
	AuthCustomerBarberShop_UpdateCustomer_FullMethodName = "/pb.AuthCustomerBarberShop/UpdateCustomer"
)

// AuthCustomerBarberShopClient is the client API for AuthCustomerBarberShop service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthCustomerBarberShopClient interface {
	CreateCustomer(ctx context.Context, in *CreateCustomerRequest, opts ...grpc.CallOption) (*CreateCustomerResponse, error)
	LoginCustomer(ctx context.Context, in *LoginCustomerRequest, opts ...grpc.CallOption) (*LoginCustomerResponse, error)
	UpdateCustomer(ctx context.Context, in *UpdateCustomerRequest, opts ...grpc.CallOption) (*UpdateCustomerResponse, error)
}

type authCustomerBarberShopClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthCustomerBarberShopClient(cc grpc.ClientConnInterface) AuthCustomerBarberShopClient {
	return &authCustomerBarberShopClient{cc}
}

func (c *authCustomerBarberShopClient) CreateCustomer(ctx context.Context, in *CreateCustomerRequest, opts ...grpc.CallOption) (*CreateCustomerResponse, error) {
	out := new(CreateCustomerResponse)
	err := c.cc.Invoke(ctx, AuthCustomerBarberShop_CreateCustomer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authCustomerBarberShopClient) LoginCustomer(ctx context.Context, in *LoginCustomerRequest, opts ...grpc.CallOption) (*LoginCustomerResponse, error) {
	out := new(LoginCustomerResponse)
	err := c.cc.Invoke(ctx, AuthCustomerBarberShop_LoginCustomer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authCustomerBarberShopClient) UpdateCustomer(ctx context.Context, in *UpdateCustomerRequest, opts ...grpc.CallOption) (*UpdateCustomerResponse, error) {
	out := new(UpdateCustomerResponse)
	err := c.cc.Invoke(ctx, AuthCustomerBarberShop_UpdateCustomer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthCustomerBarberShopServer is the server API for AuthCustomerBarberShop service.
// All implementations must embed UnimplementedAuthCustomerBarberShopServer
// for forward compatibility
type AuthCustomerBarberShopServer interface {
	CreateCustomer(context.Context, *CreateCustomerRequest) (*CreateCustomerResponse, error)
	LoginCustomer(context.Context, *LoginCustomerRequest) (*LoginCustomerResponse, error)
	UpdateCustomer(context.Context, *UpdateCustomerRequest) (*UpdateCustomerResponse, error)
	mustEmbedUnimplementedAuthCustomerBarberShopServer()
}

// UnimplementedAuthCustomerBarberShopServer must be embedded to have forward compatible implementations.
type UnimplementedAuthCustomerBarberShopServer struct {
}

func (UnimplementedAuthCustomerBarberShopServer) CreateCustomer(context.Context, *CreateCustomerRequest) (*CreateCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomer not implemented")
}
func (UnimplementedAuthCustomerBarberShopServer) LoginCustomer(context.Context, *LoginCustomerRequest) (*LoginCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginCustomer not implemented")
}
func (UnimplementedAuthCustomerBarberShopServer) UpdateCustomer(context.Context, *UpdateCustomerRequest) (*UpdateCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomer not implemented")
}
func (UnimplementedAuthCustomerBarberShopServer) mustEmbedUnimplementedAuthCustomerBarberShopServer() {
}

// UnsafeAuthCustomerBarberShopServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthCustomerBarberShopServer will
// result in compilation errors.
type UnsafeAuthCustomerBarberShopServer interface {
	mustEmbedUnimplementedAuthCustomerBarberShopServer()
}

func RegisterAuthCustomerBarberShopServer(s grpc.ServiceRegistrar, srv AuthCustomerBarberShopServer) {
	s.RegisterService(&AuthCustomerBarberShop_ServiceDesc, srv)
}

func _AuthCustomerBarberShop_CreateCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthCustomerBarberShopServer).CreateCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthCustomerBarberShop_CreateCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthCustomerBarberShopServer).CreateCustomer(ctx, req.(*CreateCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthCustomerBarberShop_LoginCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthCustomerBarberShopServer).LoginCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthCustomerBarberShop_LoginCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthCustomerBarberShopServer).LoginCustomer(ctx, req.(*LoginCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthCustomerBarberShop_UpdateCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthCustomerBarberShopServer).UpdateCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthCustomerBarberShop_UpdateCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthCustomerBarberShopServer).UpdateCustomer(ctx, req.(*UpdateCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthCustomerBarberShop_ServiceDesc is the grpc.ServiceDesc for AuthCustomerBarberShop service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthCustomerBarberShop_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.AuthCustomerBarberShop",
	HandlerType: (*AuthCustomerBarberShopServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCustomer",
			Handler:    _AuthCustomerBarberShop_CreateCustomer_Handler,
		},
		{
			MethodName: "LoginCustomer",
			Handler:    _AuthCustomerBarberShop_LoginCustomer_Handler,
		},
		{
			MethodName: "UpdateCustomer",
			Handler:    _AuthCustomerBarberShop_UpdateCustomer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_customer.proto",
}
