// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.15.8
// source: customer/service_customer.proto

package customer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CustomerBarberShop_CreateCustomer_FullMethodName         = "/pb.CustomerBarberShop/CreateCustomer"
	CustomerBarberShop_UpdateCustomer_FullMethodName         = "/pb.CustomerBarberShop/UpdateCustomer"
	CustomerBarberShop_ChangePasswordCustomer_FullMethodName = "/pb.CustomerBarberShop/ChangePasswordCustomer"
	CustomerBarberShop_LoginCustomer_FullMethodName          = "/pb.CustomerBarberShop/LoginCustomer"
	CustomerBarberShop_RefreshTokenCustomer_FullMethodName   = "/pb.CustomerBarberShop/RefreshTokenCustomer"
	CustomerBarberShop_NewAppointment_FullMethodName         = "/pb.CustomerBarberShop/NewAppointment"
)

// CustomerBarberShopClient is the client API for CustomerBarberShop service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomerBarberShopClient interface {
	// authencation
	CreateCustomer(ctx context.Context, in *CreateCustomerRequest, opts ...grpc.CallOption) (*CreateCustomerResponse, error)
	UpdateCustomer(ctx context.Context, in *UpdateCustomerRequest, opts ...grpc.CallOption) (*UpdateCustomerResponse, error)
	ChangePasswordCustomer(ctx context.Context, in *ChangePasswordCustomerRequest, opts ...grpc.CallOption) (*ChangePasswordCustomerResponse, error)
	LoginCustomer(ctx context.Context, in *LoginCustomerRequest, opts ...grpc.CallOption) (*LoginCustomerResponse, error)
	RefreshTokenCustomer(ctx context.Context, in *RefreshTokenCustomerRequest, opts ...grpc.CallOption) (*RefreshTokenCustomerResponse, error)
	NewAppointment(ctx context.Context, in *CreateAppointmentRequest, opts ...grpc.CallOption) (*CreateAppointmentResponse, error)
}

type customerBarberShopClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomerBarberShopClient(cc grpc.ClientConnInterface) CustomerBarberShopClient {
	return &customerBarberShopClient{cc}
}

func (c *customerBarberShopClient) CreateCustomer(ctx context.Context, in *CreateCustomerRequest, opts ...grpc.CallOption) (*CreateCustomerResponse, error) {
	out := new(CreateCustomerResponse)
	err := c.cc.Invoke(ctx, CustomerBarberShop_CreateCustomer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerBarberShopClient) UpdateCustomer(ctx context.Context, in *UpdateCustomerRequest, opts ...grpc.CallOption) (*UpdateCustomerResponse, error) {
	out := new(UpdateCustomerResponse)
	err := c.cc.Invoke(ctx, CustomerBarberShop_UpdateCustomer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerBarberShopClient) ChangePasswordCustomer(ctx context.Context, in *ChangePasswordCustomerRequest, opts ...grpc.CallOption) (*ChangePasswordCustomerResponse, error) {
	out := new(ChangePasswordCustomerResponse)
	err := c.cc.Invoke(ctx, CustomerBarberShop_ChangePasswordCustomer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerBarberShopClient) LoginCustomer(ctx context.Context, in *LoginCustomerRequest, opts ...grpc.CallOption) (*LoginCustomerResponse, error) {
	out := new(LoginCustomerResponse)
	err := c.cc.Invoke(ctx, CustomerBarberShop_LoginCustomer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerBarberShopClient) RefreshTokenCustomer(ctx context.Context, in *RefreshTokenCustomerRequest, opts ...grpc.CallOption) (*RefreshTokenCustomerResponse, error) {
	out := new(RefreshTokenCustomerResponse)
	err := c.cc.Invoke(ctx, CustomerBarberShop_RefreshTokenCustomer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerBarberShopClient) NewAppointment(ctx context.Context, in *CreateAppointmentRequest, opts ...grpc.CallOption) (*CreateAppointmentResponse, error) {
	out := new(CreateAppointmentResponse)
	err := c.cc.Invoke(ctx, CustomerBarberShop_NewAppointment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomerBarberShopServer is the server API for CustomerBarberShop service.
// All implementations must embed UnimplementedCustomerBarberShopServer
// for forward compatibility
type CustomerBarberShopServer interface {
	// authencation
	CreateCustomer(context.Context, *CreateCustomerRequest) (*CreateCustomerResponse, error)
	UpdateCustomer(context.Context, *UpdateCustomerRequest) (*UpdateCustomerResponse, error)
	ChangePasswordCustomer(context.Context, *ChangePasswordCustomerRequest) (*ChangePasswordCustomerResponse, error)
	LoginCustomer(context.Context, *LoginCustomerRequest) (*LoginCustomerResponse, error)
	RefreshTokenCustomer(context.Context, *RefreshTokenCustomerRequest) (*RefreshTokenCustomerResponse, error)
	NewAppointment(context.Context, *CreateAppointmentRequest) (*CreateAppointmentResponse, error)
	mustEmbedUnimplementedCustomerBarberShopServer()
}

// UnimplementedCustomerBarberShopServer must be embedded to have forward compatible implementations.
type UnimplementedCustomerBarberShopServer struct {
}

func (UnimplementedCustomerBarberShopServer) CreateCustomer(context.Context, *CreateCustomerRequest) (*CreateCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomer not implemented")
}
func (UnimplementedCustomerBarberShopServer) UpdateCustomer(context.Context, *UpdateCustomerRequest) (*UpdateCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomer not implemented")
}
func (UnimplementedCustomerBarberShopServer) ChangePasswordCustomer(context.Context, *ChangePasswordCustomerRequest) (*ChangePasswordCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePasswordCustomer not implemented")
}
func (UnimplementedCustomerBarberShopServer) LoginCustomer(context.Context, *LoginCustomerRequest) (*LoginCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginCustomer not implemented")
}
func (UnimplementedCustomerBarberShopServer) RefreshTokenCustomer(context.Context, *RefreshTokenCustomerRequest) (*RefreshTokenCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshTokenCustomer not implemented")
}
func (UnimplementedCustomerBarberShopServer) NewAppointment(context.Context, *CreateAppointmentRequest) (*CreateAppointmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewAppointment not implemented")
}
func (UnimplementedCustomerBarberShopServer) mustEmbedUnimplementedCustomerBarberShopServer() {}

// UnsafeCustomerBarberShopServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomerBarberShopServer will
// result in compilation errors.
type UnsafeCustomerBarberShopServer interface {
	mustEmbedUnimplementedCustomerBarberShopServer()
}

func RegisterCustomerBarberShopServer(s grpc.ServiceRegistrar, srv CustomerBarberShopServer) {
	s.RegisterService(&CustomerBarberShop_ServiceDesc, srv)
}

func _CustomerBarberShop_CreateCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerBarberShopServer).CreateCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerBarberShop_CreateCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerBarberShopServer).CreateCustomer(ctx, req.(*CreateCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerBarberShop_UpdateCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerBarberShopServer).UpdateCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerBarberShop_UpdateCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerBarberShopServer).UpdateCustomer(ctx, req.(*UpdateCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerBarberShop_ChangePasswordCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerBarberShopServer).ChangePasswordCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerBarberShop_ChangePasswordCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerBarberShopServer).ChangePasswordCustomer(ctx, req.(*ChangePasswordCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerBarberShop_LoginCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerBarberShopServer).LoginCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerBarberShop_LoginCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerBarberShopServer).LoginCustomer(ctx, req.(*LoginCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerBarberShop_RefreshTokenCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerBarberShopServer).RefreshTokenCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerBarberShop_RefreshTokenCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerBarberShopServer).RefreshTokenCustomer(ctx, req.(*RefreshTokenCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerBarberShop_NewAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppointmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerBarberShopServer).NewAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerBarberShop_NewAppointment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerBarberShopServer).NewAppointment(ctx, req.(*CreateAppointmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CustomerBarberShop_ServiceDesc is the grpc.ServiceDesc for CustomerBarberShop service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CustomerBarberShop_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.CustomerBarberShop",
	HandlerType: (*CustomerBarberShopServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCustomer",
			Handler:    _CustomerBarberShop_CreateCustomer_Handler,
		},
		{
			MethodName: "UpdateCustomer",
			Handler:    _CustomerBarberShop_UpdateCustomer_Handler,
		},
		{
			MethodName: "ChangePasswordCustomer",
			Handler:    _CustomerBarberShop_ChangePasswordCustomer_Handler,
		},
		{
			MethodName: "LoginCustomer",
			Handler:    _CustomerBarberShop_LoginCustomer_Handler,
		},
		{
			MethodName: "RefreshTokenCustomer",
			Handler:    _CustomerBarberShop_RefreshTokenCustomer_Handler,
		},
		{
			MethodName: "NewAppointment",
			Handler:    _CustomerBarberShop_NewAppointment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "customer/service_customer.proto",
}
