// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.15.8
// source: barber/barber_service.proto

package barber

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BarberService_UpdateBarberRoles_FullMethodName       = "/pb.BarberService/UpdateBarberRoles"
	BarberService_CreateBarberShopChains_FullMethodName  = "/pb.BarberService/CreateBarberShopChains"
	BarberService_GetBarberShopChains_FullMethodName     = "/pb.BarberService/GetBarberShopChains"
	BarberService_UpdateBarberShopChains_FullMethodName  = "/pb.BarberService/UpdateBarberShopChains"
	BarberService_DeleteBarberShopChains_FullMethodName  = "/pb.BarberService/DeleteBarberShopChains"
	BarberService_CreateBarberShop_FullMethodName        = "/pb.BarberService/CreateBarberShop"
	BarberService_ListBarberShops_FullMethodName         = "/pb.BarberService/ListBarberShops"
	BarberService_GetBarberShop_FullMethodName           = "/pb.BarberService/GetBarberShop"
	BarberService_SearchByNameBarberShops_FullMethodName = "/pb.BarberService/SearchByNameBarberShops"
	BarberService_ListNearbyBarberShops_FullMethodName   = "/pb.BarberService/ListNearbyBarberShops"
	BarberService_UpdateBarberShop_FullMethodName        = "/pb.BarberService/UpdateBarberShop"
	BarberService_DeleteBarberShops_FullMethodName       = "/pb.BarberService/DeleteBarberShops"
	BarberService_CreateBarberManagers_FullMethodName    = "/pb.BarberService/CreateBarberManagers"
	BarberService_ListBarberManagers_FullMethodName      = "/pb.BarberService/ListBarberManagers"
	BarberService_DeleteBarberManagers_FullMethodName    = "/pb.BarberService/DeleteBarberManagers"
	BarberService_CreateServiceCategory_FullMethodName   = "/pb.BarberService/CreateServiceCategory"
	BarberService_UpdateServiceCategory_FullMethodName   = "/pb.BarberService/UpdateServiceCategory"
	BarberService_DeleteServiceCategory_FullMethodName   = "/pb.BarberService/DeleteServiceCategory"
	BarberService_CreateAppointments_FullMethodName      = "/pb.BarberService/CreateAppointments"
	BarberService_ListAppointmentsByDate_FullMethodName  = "/pb.BarberService/ListAppointmentsByDate"
	BarberService_CreateBarber_FullMethodName            = "/pb.BarberService/CreateBarber"
	BarberService_CreateBarberEmployee_FullMethodName    = "/pb.BarberService/CreateBarberEmployee"
	BarberService_CreateBarberEmployees_FullMethodName   = "/pb.BarberService/CreateBarberEmployees"
	BarberService_GetBarberEmployees_FullMethodName      = "/pb.BarberService/GetBarberEmployees"
	BarberService_GetBarber_FullMethodName               = "/pb.BarberService/GetBarber"
	BarberService_UpdateBarber_FullMethodName            = "/pb.BarberService/UpdateBarber"
	BarberService_DeleteBarberEmployee_FullMethodName    = "/pb.BarberService/DeleteBarberEmployee"
	BarberService_LoginBarber_FullMethodName             = "/pb.BarberService/LoginBarber"
	BarberService_RefreshTokenBarber_FullMethodName      = "/pb.BarberService/RefreshTokenBarber"
	BarberService_GetProvinces_FullMethodName            = "/pb.BarberService/GetProvinces"
	BarberService_GetDistricts_FullMethodName            = "/pb.BarberService/GetDistricts"
	BarberService_GetWards_FullMethodName                = "/pb.BarberService/GetWards"
)

// BarberServiceClient is the client API for BarberService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BarberServiceClient interface {
	// / BARBER ROLES
	UpdateBarberRoles(ctx context.Context, in *UpdateBarberRolesRequest, opts ...grpc.CallOption) (*UpdateBarberRolesResponse, error)
	// BARBERSHOP
	// chains
	CreateBarberShopChains(ctx context.Context, in *CreateBarberShopChainsRequest, opts ...grpc.CallOption) (*CreateBarberShopChainsResponse, error)
	GetBarberShopChains(ctx context.Context, in *GetBarberShopChainsRequest, opts ...grpc.CallOption) (*GetBarberShopChainsResponse, error)
	UpdateBarberShopChains(ctx context.Context, in *UpdateBarberShopChainsRequest, opts ...grpc.CallOption) (*UpdateBarberShopChainsResponse, error)
	DeleteBarberShopChains(ctx context.Context, in *DeleteBarberShopChainsRequest, opts ...grpc.CallOption) (*DeleteBarberShopChainsResponse, error)
	// /barbershops
	CreateBarberShop(ctx context.Context, in *CreateBarberShopRequest, opts ...grpc.CallOption) (*CreateBarberShopResponse, error)
	ListBarberShops(ctx context.Context, in *ListBarberShopsRequest, opts ...grpc.CallOption) (*ListBarberShopsResponse, error)
	GetBarberShop(ctx context.Context, in *GetBarberShopRequest, opts ...grpc.CallOption) (*GetBarberShopResponse, error)
	SearchByNameBarberShops(ctx context.Context, in *SearchByNameBarberShopsRequest, opts ...grpc.CallOption) (*SearchByNameBarberShopsResponse, error)
	ListNearbyBarberShops(ctx context.Context, in *ListNearbyBarberShopsRequest, opts ...grpc.CallOption) (*ListNearbyBarberShopsResponse, error)
	UpdateBarberShop(ctx context.Context, in *UpdateBarberShopRequest, opts ...grpc.CallOption) (*UpdateBarberShopResponse, error)
	DeleteBarberShops(ctx context.Context, in *DeleteBarberShopsRequest, opts ...grpc.CallOption) (*DeleteBarberShopsResponse, error)
	// BARBERMANAGERS
	CreateBarberManagers(ctx context.Context, in *CreateBarberManagersRequest, opts ...grpc.CallOption) (*CreateBarberManagersResponse, error)
	ListBarberManagers(ctx context.Context, in *ListBarberManagersRequest, opts ...grpc.CallOption) (*ListBarberManagersResponse, error)
	DeleteBarberManagers(ctx context.Context, in *DeleteBarberManagersRequest, opts ...grpc.CallOption) (*DeleteBarberManagersResponse, error)
	// / SERVICE CATEGORIES
	CreateServiceCategory(ctx context.Context, in *CreateServiceCategoryRequest, opts ...grpc.CallOption) (*CreateServiceCategoryResponse, error)
	UpdateServiceCategory(ctx context.Context, in *UpdateServiceCategoryRequest, opts ...grpc.CallOption) (*UpdateServiceCategoryResponse, error)
	DeleteServiceCategory(ctx context.Context, in *DeleteServiceCategoryRequest, opts ...grpc.CallOption) (*DeleteServiceCategoryResponse, error)
	// Appointments
	CreateAppointments(ctx context.Context, in *CreateAppointmentsRequest, opts ...grpc.CallOption) (*CreateAppointmentsResponse, error)
	ListAppointmentsByDate(ctx context.Context, in *ListAppointmentsByDateRequest, opts ...grpc.CallOption) (*ListAppointmentsByDateResponse, error)
	// Barber
	CreateBarber(ctx context.Context, in *CreateBarberRequest, opts ...grpc.CallOption) (*CreateBarberResponse, error)
	CreateBarberEmployee(ctx context.Context, in *CreateBarberEmployeeRequest, opts ...grpc.CallOption) (*CreateBarberEmployeeResponse, error)
	CreateBarberEmployees(ctx context.Context, in *CreateBarberEmployeesRequest, opts ...grpc.CallOption) (*CreateBarberEmployeesResponse, error)
	GetBarberEmployees(ctx context.Context, in *GetBarberEmployeeRequest, opts ...grpc.CallOption) (*GetBarberEmployeeResponse, error)
	GetBarber(ctx context.Context, in *GetBarbersRequest, opts ...grpc.CallOption) (*GetBarbersResponse, error)
	UpdateBarber(ctx context.Context, in *UpdateBarberRequest, opts ...grpc.CallOption) (*UpdateBarberResponse, error)
	DeleteBarberEmployee(ctx context.Context, in *DeleteBarberEmployeeRequest, opts ...grpc.CallOption) (*DeleteBarberEmployeeResponse, error)
	LoginBarber(ctx context.Context, in *LoginBarberRequest, opts ...grpc.CallOption) (*LoginBarberResponse, error)
	RefreshTokenBarber(ctx context.Context, in *RefreshTokenBarberRequest, opts ...grpc.CallOption) (*RefreshTokenBarberResponse, error)
	// / lookup
	GetProvinces(ctx context.Context, in *GetProvincesRequest, opts ...grpc.CallOption) (*GetProvincesResponse, error)
	GetDistricts(ctx context.Context, in *GetDistrictsRequest, opts ...grpc.CallOption) (*GetDistrictsResponse, error)
	GetWards(ctx context.Context, in *GetWardsRequest, opts ...grpc.CallOption) (*GetWardsResponse, error)
}

type barberServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBarberServiceClient(cc grpc.ClientConnInterface) BarberServiceClient {
	return &barberServiceClient{cc}
}

func (c *barberServiceClient) UpdateBarberRoles(ctx context.Context, in *UpdateBarberRolesRequest, opts ...grpc.CallOption) (*UpdateBarberRolesResponse, error) {
	out := new(UpdateBarberRolesResponse)
	err := c.cc.Invoke(ctx, BarberService_UpdateBarberRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) CreateBarberShopChains(ctx context.Context, in *CreateBarberShopChainsRequest, opts ...grpc.CallOption) (*CreateBarberShopChainsResponse, error) {
	out := new(CreateBarberShopChainsResponse)
	err := c.cc.Invoke(ctx, BarberService_CreateBarberShopChains_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) GetBarberShopChains(ctx context.Context, in *GetBarberShopChainsRequest, opts ...grpc.CallOption) (*GetBarberShopChainsResponse, error) {
	out := new(GetBarberShopChainsResponse)
	err := c.cc.Invoke(ctx, BarberService_GetBarberShopChains_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) UpdateBarberShopChains(ctx context.Context, in *UpdateBarberShopChainsRequest, opts ...grpc.CallOption) (*UpdateBarberShopChainsResponse, error) {
	out := new(UpdateBarberShopChainsResponse)
	err := c.cc.Invoke(ctx, BarberService_UpdateBarberShopChains_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) DeleteBarberShopChains(ctx context.Context, in *DeleteBarberShopChainsRequest, opts ...grpc.CallOption) (*DeleteBarberShopChainsResponse, error) {
	out := new(DeleteBarberShopChainsResponse)
	err := c.cc.Invoke(ctx, BarberService_DeleteBarberShopChains_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) CreateBarberShop(ctx context.Context, in *CreateBarberShopRequest, opts ...grpc.CallOption) (*CreateBarberShopResponse, error) {
	out := new(CreateBarberShopResponse)
	err := c.cc.Invoke(ctx, BarberService_CreateBarberShop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) ListBarberShops(ctx context.Context, in *ListBarberShopsRequest, opts ...grpc.CallOption) (*ListBarberShopsResponse, error) {
	out := new(ListBarberShopsResponse)
	err := c.cc.Invoke(ctx, BarberService_ListBarberShops_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) GetBarberShop(ctx context.Context, in *GetBarberShopRequest, opts ...grpc.CallOption) (*GetBarberShopResponse, error) {
	out := new(GetBarberShopResponse)
	err := c.cc.Invoke(ctx, BarberService_GetBarberShop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) SearchByNameBarberShops(ctx context.Context, in *SearchByNameBarberShopsRequest, opts ...grpc.CallOption) (*SearchByNameBarberShopsResponse, error) {
	out := new(SearchByNameBarberShopsResponse)
	err := c.cc.Invoke(ctx, BarberService_SearchByNameBarberShops_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) ListNearbyBarberShops(ctx context.Context, in *ListNearbyBarberShopsRequest, opts ...grpc.CallOption) (*ListNearbyBarberShopsResponse, error) {
	out := new(ListNearbyBarberShopsResponse)
	err := c.cc.Invoke(ctx, BarberService_ListNearbyBarberShops_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) UpdateBarberShop(ctx context.Context, in *UpdateBarberShopRequest, opts ...grpc.CallOption) (*UpdateBarberShopResponse, error) {
	out := new(UpdateBarberShopResponse)
	err := c.cc.Invoke(ctx, BarberService_UpdateBarberShop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) DeleteBarberShops(ctx context.Context, in *DeleteBarberShopsRequest, opts ...grpc.CallOption) (*DeleteBarberShopsResponse, error) {
	out := new(DeleteBarberShopsResponse)
	err := c.cc.Invoke(ctx, BarberService_DeleteBarberShops_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) CreateBarberManagers(ctx context.Context, in *CreateBarberManagersRequest, opts ...grpc.CallOption) (*CreateBarberManagersResponse, error) {
	out := new(CreateBarberManagersResponse)
	err := c.cc.Invoke(ctx, BarberService_CreateBarberManagers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) ListBarberManagers(ctx context.Context, in *ListBarberManagersRequest, opts ...grpc.CallOption) (*ListBarberManagersResponse, error) {
	out := new(ListBarberManagersResponse)
	err := c.cc.Invoke(ctx, BarberService_ListBarberManagers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) DeleteBarberManagers(ctx context.Context, in *DeleteBarberManagersRequest, opts ...grpc.CallOption) (*DeleteBarberManagersResponse, error) {
	out := new(DeleteBarberManagersResponse)
	err := c.cc.Invoke(ctx, BarberService_DeleteBarberManagers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) CreateServiceCategory(ctx context.Context, in *CreateServiceCategoryRequest, opts ...grpc.CallOption) (*CreateServiceCategoryResponse, error) {
	out := new(CreateServiceCategoryResponse)
	err := c.cc.Invoke(ctx, BarberService_CreateServiceCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) UpdateServiceCategory(ctx context.Context, in *UpdateServiceCategoryRequest, opts ...grpc.CallOption) (*UpdateServiceCategoryResponse, error) {
	out := new(UpdateServiceCategoryResponse)
	err := c.cc.Invoke(ctx, BarberService_UpdateServiceCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) DeleteServiceCategory(ctx context.Context, in *DeleteServiceCategoryRequest, opts ...grpc.CallOption) (*DeleteServiceCategoryResponse, error) {
	out := new(DeleteServiceCategoryResponse)
	err := c.cc.Invoke(ctx, BarberService_DeleteServiceCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) CreateAppointments(ctx context.Context, in *CreateAppointmentsRequest, opts ...grpc.CallOption) (*CreateAppointmentsResponse, error) {
	out := new(CreateAppointmentsResponse)
	err := c.cc.Invoke(ctx, BarberService_CreateAppointments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) ListAppointmentsByDate(ctx context.Context, in *ListAppointmentsByDateRequest, opts ...grpc.CallOption) (*ListAppointmentsByDateResponse, error) {
	out := new(ListAppointmentsByDateResponse)
	err := c.cc.Invoke(ctx, BarberService_ListAppointmentsByDate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) CreateBarber(ctx context.Context, in *CreateBarberRequest, opts ...grpc.CallOption) (*CreateBarberResponse, error) {
	out := new(CreateBarberResponse)
	err := c.cc.Invoke(ctx, BarberService_CreateBarber_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) CreateBarberEmployee(ctx context.Context, in *CreateBarberEmployeeRequest, opts ...grpc.CallOption) (*CreateBarberEmployeeResponse, error) {
	out := new(CreateBarberEmployeeResponse)
	err := c.cc.Invoke(ctx, BarberService_CreateBarberEmployee_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) CreateBarberEmployees(ctx context.Context, in *CreateBarberEmployeesRequest, opts ...grpc.CallOption) (*CreateBarberEmployeesResponse, error) {
	out := new(CreateBarberEmployeesResponse)
	err := c.cc.Invoke(ctx, BarberService_CreateBarberEmployees_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) GetBarberEmployees(ctx context.Context, in *GetBarberEmployeeRequest, opts ...grpc.CallOption) (*GetBarberEmployeeResponse, error) {
	out := new(GetBarberEmployeeResponse)
	err := c.cc.Invoke(ctx, BarberService_GetBarberEmployees_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) GetBarber(ctx context.Context, in *GetBarbersRequest, opts ...grpc.CallOption) (*GetBarbersResponse, error) {
	out := new(GetBarbersResponse)
	err := c.cc.Invoke(ctx, BarberService_GetBarber_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) UpdateBarber(ctx context.Context, in *UpdateBarberRequest, opts ...grpc.CallOption) (*UpdateBarberResponse, error) {
	out := new(UpdateBarberResponse)
	err := c.cc.Invoke(ctx, BarberService_UpdateBarber_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) DeleteBarberEmployee(ctx context.Context, in *DeleteBarberEmployeeRequest, opts ...grpc.CallOption) (*DeleteBarberEmployeeResponse, error) {
	out := new(DeleteBarberEmployeeResponse)
	err := c.cc.Invoke(ctx, BarberService_DeleteBarberEmployee_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) LoginBarber(ctx context.Context, in *LoginBarberRequest, opts ...grpc.CallOption) (*LoginBarberResponse, error) {
	out := new(LoginBarberResponse)
	err := c.cc.Invoke(ctx, BarberService_LoginBarber_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) RefreshTokenBarber(ctx context.Context, in *RefreshTokenBarberRequest, opts ...grpc.CallOption) (*RefreshTokenBarberResponse, error) {
	out := new(RefreshTokenBarberResponse)
	err := c.cc.Invoke(ctx, BarberService_RefreshTokenBarber_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) GetProvinces(ctx context.Context, in *GetProvincesRequest, opts ...grpc.CallOption) (*GetProvincesResponse, error) {
	out := new(GetProvincesResponse)
	err := c.cc.Invoke(ctx, BarberService_GetProvinces_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) GetDistricts(ctx context.Context, in *GetDistrictsRequest, opts ...grpc.CallOption) (*GetDistrictsResponse, error) {
	out := new(GetDistrictsResponse)
	err := c.cc.Invoke(ctx, BarberService_GetDistricts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) GetWards(ctx context.Context, in *GetWardsRequest, opts ...grpc.CallOption) (*GetWardsResponse, error) {
	out := new(GetWardsResponse)
	err := c.cc.Invoke(ctx, BarberService_GetWards_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BarberServiceServer is the server API for BarberService service.
// All implementations must embed UnimplementedBarberServiceServer
// for forward compatibility
type BarberServiceServer interface {
	// / BARBER ROLES
	UpdateBarberRoles(context.Context, *UpdateBarberRolesRequest) (*UpdateBarberRolesResponse, error)
	// BARBERSHOP
	// chains
	CreateBarberShopChains(context.Context, *CreateBarberShopChainsRequest) (*CreateBarberShopChainsResponse, error)
	GetBarberShopChains(context.Context, *GetBarberShopChainsRequest) (*GetBarberShopChainsResponse, error)
	UpdateBarberShopChains(context.Context, *UpdateBarberShopChainsRequest) (*UpdateBarberShopChainsResponse, error)
	DeleteBarberShopChains(context.Context, *DeleteBarberShopChainsRequest) (*DeleteBarberShopChainsResponse, error)
	// /barbershops
	CreateBarberShop(context.Context, *CreateBarberShopRequest) (*CreateBarberShopResponse, error)
	ListBarberShops(context.Context, *ListBarberShopsRequest) (*ListBarberShopsResponse, error)
	GetBarberShop(context.Context, *GetBarberShopRequest) (*GetBarberShopResponse, error)
	SearchByNameBarberShops(context.Context, *SearchByNameBarberShopsRequest) (*SearchByNameBarberShopsResponse, error)
	ListNearbyBarberShops(context.Context, *ListNearbyBarberShopsRequest) (*ListNearbyBarberShopsResponse, error)
	UpdateBarberShop(context.Context, *UpdateBarberShopRequest) (*UpdateBarberShopResponse, error)
	DeleteBarberShops(context.Context, *DeleteBarberShopsRequest) (*DeleteBarberShopsResponse, error)
	// BARBERMANAGERS
	CreateBarberManagers(context.Context, *CreateBarberManagersRequest) (*CreateBarberManagersResponse, error)
	ListBarberManagers(context.Context, *ListBarberManagersRequest) (*ListBarberManagersResponse, error)
	DeleteBarberManagers(context.Context, *DeleteBarberManagersRequest) (*DeleteBarberManagersResponse, error)
	// / SERVICE CATEGORIES
	CreateServiceCategory(context.Context, *CreateServiceCategoryRequest) (*CreateServiceCategoryResponse, error)
	UpdateServiceCategory(context.Context, *UpdateServiceCategoryRequest) (*UpdateServiceCategoryResponse, error)
	DeleteServiceCategory(context.Context, *DeleteServiceCategoryRequest) (*DeleteServiceCategoryResponse, error)
	// Appointments
	CreateAppointments(context.Context, *CreateAppointmentsRequest) (*CreateAppointmentsResponse, error)
	ListAppointmentsByDate(context.Context, *ListAppointmentsByDateRequest) (*ListAppointmentsByDateResponse, error)
	// Barber
	CreateBarber(context.Context, *CreateBarberRequest) (*CreateBarberResponse, error)
	CreateBarberEmployee(context.Context, *CreateBarberEmployeeRequest) (*CreateBarberEmployeeResponse, error)
	CreateBarberEmployees(context.Context, *CreateBarberEmployeesRequest) (*CreateBarberEmployeesResponse, error)
	GetBarberEmployees(context.Context, *GetBarberEmployeeRequest) (*GetBarberEmployeeResponse, error)
	GetBarber(context.Context, *GetBarbersRequest) (*GetBarbersResponse, error)
	UpdateBarber(context.Context, *UpdateBarberRequest) (*UpdateBarberResponse, error)
	DeleteBarberEmployee(context.Context, *DeleteBarberEmployeeRequest) (*DeleteBarberEmployeeResponse, error)
	LoginBarber(context.Context, *LoginBarberRequest) (*LoginBarberResponse, error)
	RefreshTokenBarber(context.Context, *RefreshTokenBarberRequest) (*RefreshTokenBarberResponse, error)
	// / lookup
	GetProvinces(context.Context, *GetProvincesRequest) (*GetProvincesResponse, error)
	GetDistricts(context.Context, *GetDistrictsRequest) (*GetDistrictsResponse, error)
	GetWards(context.Context, *GetWardsRequest) (*GetWardsResponse, error)
	mustEmbedUnimplementedBarberServiceServer()
}

// UnimplementedBarberServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBarberServiceServer struct {
}

func (UnimplementedBarberServiceServer) UpdateBarberRoles(context.Context, *UpdateBarberRolesRequest) (*UpdateBarberRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBarberRoles not implemented")
}
func (UnimplementedBarberServiceServer) CreateBarberShopChains(context.Context, *CreateBarberShopChainsRequest) (*CreateBarberShopChainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBarberShopChains not implemented")
}
func (UnimplementedBarberServiceServer) GetBarberShopChains(context.Context, *GetBarberShopChainsRequest) (*GetBarberShopChainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBarberShopChains not implemented")
}
func (UnimplementedBarberServiceServer) UpdateBarberShopChains(context.Context, *UpdateBarberShopChainsRequest) (*UpdateBarberShopChainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBarberShopChains not implemented")
}
func (UnimplementedBarberServiceServer) DeleteBarberShopChains(context.Context, *DeleteBarberShopChainsRequest) (*DeleteBarberShopChainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBarberShopChains not implemented")
}
func (UnimplementedBarberServiceServer) CreateBarberShop(context.Context, *CreateBarberShopRequest) (*CreateBarberShopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBarberShop not implemented")
}
func (UnimplementedBarberServiceServer) ListBarberShops(context.Context, *ListBarberShopsRequest) (*ListBarberShopsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBarberShops not implemented")
}
func (UnimplementedBarberServiceServer) GetBarberShop(context.Context, *GetBarberShopRequest) (*GetBarberShopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBarberShop not implemented")
}
func (UnimplementedBarberServiceServer) SearchByNameBarberShops(context.Context, *SearchByNameBarberShopsRequest) (*SearchByNameBarberShopsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchByNameBarberShops not implemented")
}
func (UnimplementedBarberServiceServer) ListNearbyBarberShops(context.Context, *ListNearbyBarberShopsRequest) (*ListNearbyBarberShopsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNearbyBarberShops not implemented")
}
func (UnimplementedBarberServiceServer) UpdateBarberShop(context.Context, *UpdateBarberShopRequest) (*UpdateBarberShopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBarberShop not implemented")
}
func (UnimplementedBarberServiceServer) DeleteBarberShops(context.Context, *DeleteBarberShopsRequest) (*DeleteBarberShopsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBarberShops not implemented")
}
func (UnimplementedBarberServiceServer) CreateBarberManagers(context.Context, *CreateBarberManagersRequest) (*CreateBarberManagersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBarberManagers not implemented")
}
func (UnimplementedBarberServiceServer) ListBarberManagers(context.Context, *ListBarberManagersRequest) (*ListBarberManagersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBarberManagers not implemented")
}
func (UnimplementedBarberServiceServer) DeleteBarberManagers(context.Context, *DeleteBarberManagersRequest) (*DeleteBarberManagersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBarberManagers not implemented")
}
func (UnimplementedBarberServiceServer) CreateServiceCategory(context.Context, *CreateServiceCategoryRequest) (*CreateServiceCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServiceCategory not implemented")
}
func (UnimplementedBarberServiceServer) UpdateServiceCategory(context.Context, *UpdateServiceCategoryRequest) (*UpdateServiceCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServiceCategory not implemented")
}
func (UnimplementedBarberServiceServer) DeleteServiceCategory(context.Context, *DeleteServiceCategoryRequest) (*DeleteServiceCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteServiceCategory not implemented")
}
func (UnimplementedBarberServiceServer) CreateAppointments(context.Context, *CreateAppointmentsRequest) (*CreateAppointmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppointments not implemented")
}
func (UnimplementedBarberServiceServer) ListAppointmentsByDate(context.Context, *ListAppointmentsByDateRequest) (*ListAppointmentsByDateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppointmentsByDate not implemented")
}
func (UnimplementedBarberServiceServer) CreateBarber(context.Context, *CreateBarberRequest) (*CreateBarberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBarber not implemented")
}
func (UnimplementedBarberServiceServer) CreateBarberEmployee(context.Context, *CreateBarberEmployeeRequest) (*CreateBarberEmployeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBarberEmployee not implemented")
}
func (UnimplementedBarberServiceServer) CreateBarberEmployees(context.Context, *CreateBarberEmployeesRequest) (*CreateBarberEmployeesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBarberEmployees not implemented")
}
func (UnimplementedBarberServiceServer) GetBarberEmployees(context.Context, *GetBarberEmployeeRequest) (*GetBarberEmployeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBarberEmployees not implemented")
}
func (UnimplementedBarberServiceServer) GetBarber(context.Context, *GetBarbersRequest) (*GetBarbersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBarber not implemented")
}
func (UnimplementedBarberServiceServer) UpdateBarber(context.Context, *UpdateBarberRequest) (*UpdateBarberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBarber not implemented")
}
func (UnimplementedBarberServiceServer) DeleteBarberEmployee(context.Context, *DeleteBarberEmployeeRequest) (*DeleteBarberEmployeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBarberEmployee not implemented")
}
func (UnimplementedBarberServiceServer) LoginBarber(context.Context, *LoginBarberRequest) (*LoginBarberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginBarber not implemented")
}
func (UnimplementedBarberServiceServer) RefreshTokenBarber(context.Context, *RefreshTokenBarberRequest) (*RefreshTokenBarberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshTokenBarber not implemented")
}
func (UnimplementedBarberServiceServer) GetProvinces(context.Context, *GetProvincesRequest) (*GetProvincesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProvinces not implemented")
}
func (UnimplementedBarberServiceServer) GetDistricts(context.Context, *GetDistrictsRequest) (*GetDistrictsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDistricts not implemented")
}
func (UnimplementedBarberServiceServer) GetWards(context.Context, *GetWardsRequest) (*GetWardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWards not implemented")
}
func (UnimplementedBarberServiceServer) mustEmbedUnimplementedBarberServiceServer() {}

// UnsafeBarberServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BarberServiceServer will
// result in compilation errors.
type UnsafeBarberServiceServer interface {
	mustEmbedUnimplementedBarberServiceServer()
}

func RegisterBarberServiceServer(s grpc.ServiceRegistrar, srv BarberServiceServer) {
	s.RegisterService(&BarberService_ServiceDesc, srv)
}

func _BarberService_UpdateBarberRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBarberRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).UpdateBarberRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_UpdateBarberRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).UpdateBarberRoles(ctx, req.(*UpdateBarberRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_CreateBarberShopChains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBarberShopChainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).CreateBarberShopChains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_CreateBarberShopChains_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).CreateBarberShopChains(ctx, req.(*CreateBarberShopChainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_GetBarberShopChains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBarberShopChainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).GetBarberShopChains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_GetBarberShopChains_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).GetBarberShopChains(ctx, req.(*GetBarberShopChainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_UpdateBarberShopChains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBarberShopChainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).UpdateBarberShopChains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_UpdateBarberShopChains_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).UpdateBarberShopChains(ctx, req.(*UpdateBarberShopChainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_DeleteBarberShopChains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBarberShopChainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).DeleteBarberShopChains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_DeleteBarberShopChains_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).DeleteBarberShopChains(ctx, req.(*DeleteBarberShopChainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_CreateBarberShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBarberShopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).CreateBarberShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_CreateBarberShop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).CreateBarberShop(ctx, req.(*CreateBarberShopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_ListBarberShops_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBarberShopsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).ListBarberShops(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_ListBarberShops_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).ListBarberShops(ctx, req.(*ListBarberShopsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_GetBarberShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBarberShopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).GetBarberShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_GetBarberShop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).GetBarberShop(ctx, req.(*GetBarberShopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_SearchByNameBarberShops_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchByNameBarberShopsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).SearchByNameBarberShops(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_SearchByNameBarberShops_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).SearchByNameBarberShops(ctx, req.(*SearchByNameBarberShopsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_ListNearbyBarberShops_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNearbyBarberShopsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).ListNearbyBarberShops(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_ListNearbyBarberShops_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).ListNearbyBarberShops(ctx, req.(*ListNearbyBarberShopsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_UpdateBarberShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBarberShopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).UpdateBarberShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_UpdateBarberShop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).UpdateBarberShop(ctx, req.(*UpdateBarberShopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_DeleteBarberShops_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBarberShopsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).DeleteBarberShops(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_DeleteBarberShops_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).DeleteBarberShops(ctx, req.(*DeleteBarberShopsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_CreateBarberManagers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBarberManagersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).CreateBarberManagers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_CreateBarberManagers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).CreateBarberManagers(ctx, req.(*CreateBarberManagersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_ListBarberManagers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBarberManagersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).ListBarberManagers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_ListBarberManagers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).ListBarberManagers(ctx, req.(*ListBarberManagersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_DeleteBarberManagers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBarberManagersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).DeleteBarberManagers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_DeleteBarberManagers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).DeleteBarberManagers(ctx, req.(*DeleteBarberManagersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_CreateServiceCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServiceCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).CreateServiceCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_CreateServiceCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).CreateServiceCategory(ctx, req.(*CreateServiceCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_UpdateServiceCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServiceCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).UpdateServiceCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_UpdateServiceCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).UpdateServiceCategory(ctx, req.(*UpdateServiceCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_DeleteServiceCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServiceCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).DeleteServiceCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_DeleteServiceCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).DeleteServiceCategory(ctx, req.(*DeleteServiceCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_CreateAppointments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppointmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).CreateAppointments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_CreateAppointments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).CreateAppointments(ctx, req.(*CreateAppointmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_ListAppointmentsByDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppointmentsByDateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).ListAppointmentsByDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_ListAppointmentsByDate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).ListAppointmentsByDate(ctx, req.(*ListAppointmentsByDateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_CreateBarber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBarberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).CreateBarber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_CreateBarber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).CreateBarber(ctx, req.(*CreateBarberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_CreateBarberEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBarberEmployeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).CreateBarberEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_CreateBarberEmployee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).CreateBarberEmployee(ctx, req.(*CreateBarberEmployeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_CreateBarberEmployees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBarberEmployeesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).CreateBarberEmployees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_CreateBarberEmployees_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).CreateBarberEmployees(ctx, req.(*CreateBarberEmployeesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_GetBarberEmployees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBarberEmployeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).GetBarberEmployees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_GetBarberEmployees_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).GetBarberEmployees(ctx, req.(*GetBarberEmployeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_GetBarber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBarbersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).GetBarber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_GetBarber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).GetBarber(ctx, req.(*GetBarbersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_UpdateBarber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBarberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).UpdateBarber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_UpdateBarber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).UpdateBarber(ctx, req.(*UpdateBarberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_DeleteBarberEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBarberEmployeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).DeleteBarberEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_DeleteBarberEmployee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).DeleteBarberEmployee(ctx, req.(*DeleteBarberEmployeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_LoginBarber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginBarberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).LoginBarber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_LoginBarber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).LoginBarber(ctx, req.(*LoginBarberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_RefreshTokenBarber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenBarberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).RefreshTokenBarber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_RefreshTokenBarber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).RefreshTokenBarber(ctx, req.(*RefreshTokenBarberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_GetProvinces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProvincesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).GetProvinces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_GetProvinces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).GetProvinces(ctx, req.(*GetProvincesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_GetDistricts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDistrictsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).GetDistricts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_GetDistricts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).GetDistricts(ctx, req.(*GetDistrictsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_GetWards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).GetWards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_GetWards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).GetWards(ctx, req.(*GetWardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BarberService_ServiceDesc is the grpc.ServiceDesc for BarberService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BarberService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.BarberService",
	HandlerType: (*BarberServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateBarberRoles",
			Handler:    _BarberService_UpdateBarberRoles_Handler,
		},
		{
			MethodName: "CreateBarberShopChains",
			Handler:    _BarberService_CreateBarberShopChains_Handler,
		},
		{
			MethodName: "GetBarberShopChains",
			Handler:    _BarberService_GetBarberShopChains_Handler,
		},
		{
			MethodName: "UpdateBarberShopChains",
			Handler:    _BarberService_UpdateBarberShopChains_Handler,
		},
		{
			MethodName: "DeleteBarberShopChains",
			Handler:    _BarberService_DeleteBarberShopChains_Handler,
		},
		{
			MethodName: "CreateBarberShop",
			Handler:    _BarberService_CreateBarberShop_Handler,
		},
		{
			MethodName: "ListBarberShops",
			Handler:    _BarberService_ListBarberShops_Handler,
		},
		{
			MethodName: "GetBarberShop",
			Handler:    _BarberService_GetBarberShop_Handler,
		},
		{
			MethodName: "SearchByNameBarberShops",
			Handler:    _BarberService_SearchByNameBarberShops_Handler,
		},
		{
			MethodName: "ListNearbyBarberShops",
			Handler:    _BarberService_ListNearbyBarberShops_Handler,
		},
		{
			MethodName: "UpdateBarberShop",
			Handler:    _BarberService_UpdateBarberShop_Handler,
		},
		{
			MethodName: "DeleteBarberShops",
			Handler:    _BarberService_DeleteBarberShops_Handler,
		},
		{
			MethodName: "CreateBarberManagers",
			Handler:    _BarberService_CreateBarberManagers_Handler,
		},
		{
			MethodName: "ListBarberManagers",
			Handler:    _BarberService_ListBarberManagers_Handler,
		},
		{
			MethodName: "DeleteBarberManagers",
			Handler:    _BarberService_DeleteBarberManagers_Handler,
		},
		{
			MethodName: "CreateServiceCategory",
			Handler:    _BarberService_CreateServiceCategory_Handler,
		},
		{
			MethodName: "UpdateServiceCategory",
			Handler:    _BarberService_UpdateServiceCategory_Handler,
		},
		{
			MethodName: "DeleteServiceCategory",
			Handler:    _BarberService_DeleteServiceCategory_Handler,
		},
		{
			MethodName: "CreateAppointments",
			Handler:    _BarberService_CreateAppointments_Handler,
		},
		{
			MethodName: "ListAppointmentsByDate",
			Handler:    _BarberService_ListAppointmentsByDate_Handler,
		},
		{
			MethodName: "CreateBarber",
			Handler:    _BarberService_CreateBarber_Handler,
		},
		{
			MethodName: "CreateBarberEmployee",
			Handler:    _BarberService_CreateBarberEmployee_Handler,
		},
		{
			MethodName: "CreateBarberEmployees",
			Handler:    _BarberService_CreateBarberEmployees_Handler,
		},
		{
			MethodName: "GetBarberEmployees",
			Handler:    _BarberService_GetBarberEmployees_Handler,
		},
		{
			MethodName: "GetBarber",
			Handler:    _BarberService_GetBarber_Handler,
		},
		{
			MethodName: "UpdateBarber",
			Handler:    _BarberService_UpdateBarber_Handler,
		},
		{
			MethodName: "DeleteBarberEmployee",
			Handler:    _BarberService_DeleteBarberEmployee_Handler,
		},
		{
			MethodName: "LoginBarber",
			Handler:    _BarberService_LoginBarber_Handler,
		},
		{
			MethodName: "RefreshTokenBarber",
			Handler:    _BarberService_RefreshTokenBarber_Handler,
		},
		{
			MethodName: "GetProvinces",
			Handler:    _BarberService_GetProvinces_Handler,
		},
		{
			MethodName: "GetDistricts",
			Handler:    _BarberService_GetDistricts_Handler,
		},
		{
			MethodName: "GetWards",
			Handler:    _BarberService_GetWards_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "barber/barber_service.proto",
}
