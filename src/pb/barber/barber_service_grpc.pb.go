// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.15.8
// source: barber/barber_service.proto

package barber

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BarberService_CreateBarber_FullMethodName                 = "/pb.BarberService/CreateBarber"
	BarberService_LoginBarber_FullMethodName                  = "/pb.BarberService/LoginBarber"
	BarberService_RefreshTokenBarber_FullMethodName           = "/pb.BarberService/RefreshTokenBarber"
	BarberService_UpdateBarber_FullMethodName                 = "/pb.BarberService/UpdateBarber"
	BarberService_FindBarberShopsNearby_FullMethodName        = "/pb.BarberService/FindBarberShopsNearby"
	BarberService_CreateBarberShop_FullMethodName             = "/pb.BarberService/CreateBarberShop"
	BarberService_GetBarberShop_FullMethodName                = "/pb.BarberService/GetBarberShop"
	BarberService_UpdateBarberShop_FullMethodName             = "/pb.BarberService/UpdateBarberShop"
	BarberService_QueryBarberShops_FullMethodName             = "/pb.BarberService/QueryBarberShops"
	BarberService_GenerateCodeBarberShop_FullMethodName       = "/pb.BarberService/GenerateCodeBarberShop"
	BarberService_GetBarberInShop_FullMethodName              = "/pb.BarberService/GetBarberInShop"
	BarberService_CreateServiceCategory_FullMethodName        = "/pb.BarberService/CreateServiceCategory"
	BarberService_CreateServiceCategoryPrivate_FullMethodName = "/pb.BarberService/CreateServiceCategoryPrivate"
	BarberService_GetServiceCategories_FullMethodName         = "/pb.BarberService/GetServiceCategories"
	BarberService_CreateService_FullMethodName                = "/pb.BarberService/CreateService"
	BarberService_CreateServicePrivate_FullMethodName         = "/pb.BarberService/CreateServicePrivate"
	BarberService_GetServices_FullMethodName                  = "/pb.BarberService/GetServices"
	BarberService_GetServiceDetails_FullMethodName            = "/pb.BarberService/GetServiceDetails"
	BarberService_CreateChain_FullMethodName                  = "/pb.BarberService/CreateChain"
)

// BarberServiceClient is the client API for BarberService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BarberServiceClient interface {
	CreateBarber(ctx context.Context, in *CreateBarberRequest, opts ...grpc.CallOption) (*CreateBarberResponse, error)
	LoginBarber(ctx context.Context, in *LoginBarberRequest, opts ...grpc.CallOption) (*LoginBarberResponse, error)
	RefreshTokenBarber(ctx context.Context, in *RefreshTokenBarberRequest, opts ...grpc.CallOption) (*RefreshTokenBarberResponse, error)
	UpdateBarber(ctx context.Context, in *UpdateBarberRequest, opts ...grpc.CallOption) (*UpdateBarberResponse, error)
	FindBarberShopsNearby(ctx context.Context, in *FindBarberShopsNearbyRequest, opts ...grpc.CallOption) (*FindBarberShopsNearbyResponse, error)
	CreateBarberShop(ctx context.Context, in *CreateBarberShopRequest, opts ...grpc.CallOption) (*CreateBarberShopResponse, error)
	GetBarberShop(ctx context.Context, in *GetBarberShopRequest, opts ...grpc.CallOption) (*GetBarberShopResponse, error)
	UpdateBarberShop(ctx context.Context, in *UpdateBarberShopRequest, opts ...grpc.CallOption) (*UpdateBarberShopResponse, error)
	QueryBarberShops(ctx context.Context, in *QueryBarberShopsRequest, opts ...grpc.CallOption) (*QueryBarberShopsResponse, error)
	GenerateCodeBarberShop(ctx context.Context, in *CodeBarberShopRequest, opts ...grpc.CallOption) (*CodeBarberShopResponse, error)
	GetBarberInShop(ctx context.Context, in *GetBarberInShopRequest, opts ...grpc.CallOption) (*GetBarberInShopResponse, error)
	// / service
	CreateServiceCategory(ctx context.Context, in *CreateServiceCategoryRequest, opts ...grpc.CallOption) (*CreateServiceCategoryResponse, error)
	CreateServiceCategoryPrivate(ctx context.Context, in *CreateServiceCategoryPrivateRequest, opts ...grpc.CallOption) (*CreateServiceCategoryResponse, error)
	GetServiceCategories(ctx context.Context, in *GetServiceCategoriesRequest, opts ...grpc.CallOption) (*GetServiceCategoriesResponse, error)
	CreateService(ctx context.Context, in *CreateServiceRequest, opts ...grpc.CallOption) (*CreateServiceResponse, error)
	CreateServicePrivate(ctx context.Context, in *CreateServicePrivateRequest, opts ...grpc.CallOption) (*CreateServiceResponse, error)
	GetServices(ctx context.Context, in *GetServicesRequest, opts ...grpc.CallOption) (*GetServicesResponse, error)
	GetServiceDetails(ctx context.Context, in *GetServiceDetailsRequest, opts ...grpc.CallOption) (*GetServiceDetailsResponse, error)
	// /Chain
	CreateChain(ctx context.Context, in *CreateChainRequest, opts ...grpc.CallOption) (*CreateChainResponse, error)
}

type barberServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBarberServiceClient(cc grpc.ClientConnInterface) BarberServiceClient {
	return &barberServiceClient{cc}
}

func (c *barberServiceClient) CreateBarber(ctx context.Context, in *CreateBarberRequest, opts ...grpc.CallOption) (*CreateBarberResponse, error) {
	out := new(CreateBarberResponse)
	err := c.cc.Invoke(ctx, BarberService_CreateBarber_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) LoginBarber(ctx context.Context, in *LoginBarberRequest, opts ...grpc.CallOption) (*LoginBarberResponse, error) {
	out := new(LoginBarberResponse)
	err := c.cc.Invoke(ctx, BarberService_LoginBarber_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) RefreshTokenBarber(ctx context.Context, in *RefreshTokenBarberRequest, opts ...grpc.CallOption) (*RefreshTokenBarberResponse, error) {
	out := new(RefreshTokenBarberResponse)
	err := c.cc.Invoke(ctx, BarberService_RefreshTokenBarber_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) UpdateBarber(ctx context.Context, in *UpdateBarberRequest, opts ...grpc.CallOption) (*UpdateBarberResponse, error) {
	out := new(UpdateBarberResponse)
	err := c.cc.Invoke(ctx, BarberService_UpdateBarber_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) FindBarberShopsNearby(ctx context.Context, in *FindBarberShopsNearbyRequest, opts ...grpc.CallOption) (*FindBarberShopsNearbyResponse, error) {
	out := new(FindBarberShopsNearbyResponse)
	err := c.cc.Invoke(ctx, BarberService_FindBarberShopsNearby_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) CreateBarberShop(ctx context.Context, in *CreateBarberShopRequest, opts ...grpc.CallOption) (*CreateBarberShopResponse, error) {
	out := new(CreateBarberShopResponse)
	err := c.cc.Invoke(ctx, BarberService_CreateBarberShop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) GetBarberShop(ctx context.Context, in *GetBarberShopRequest, opts ...grpc.CallOption) (*GetBarberShopResponse, error) {
	out := new(GetBarberShopResponse)
	err := c.cc.Invoke(ctx, BarberService_GetBarberShop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) UpdateBarberShop(ctx context.Context, in *UpdateBarberShopRequest, opts ...grpc.CallOption) (*UpdateBarberShopResponse, error) {
	out := new(UpdateBarberShopResponse)
	err := c.cc.Invoke(ctx, BarberService_UpdateBarberShop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) QueryBarberShops(ctx context.Context, in *QueryBarberShopsRequest, opts ...grpc.CallOption) (*QueryBarberShopsResponse, error) {
	out := new(QueryBarberShopsResponse)
	err := c.cc.Invoke(ctx, BarberService_QueryBarberShops_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) GenerateCodeBarberShop(ctx context.Context, in *CodeBarberShopRequest, opts ...grpc.CallOption) (*CodeBarberShopResponse, error) {
	out := new(CodeBarberShopResponse)
	err := c.cc.Invoke(ctx, BarberService_GenerateCodeBarberShop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) GetBarberInShop(ctx context.Context, in *GetBarberInShopRequest, opts ...grpc.CallOption) (*GetBarberInShopResponse, error) {
	out := new(GetBarberInShopResponse)
	err := c.cc.Invoke(ctx, BarberService_GetBarberInShop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) CreateServiceCategory(ctx context.Context, in *CreateServiceCategoryRequest, opts ...grpc.CallOption) (*CreateServiceCategoryResponse, error) {
	out := new(CreateServiceCategoryResponse)
	err := c.cc.Invoke(ctx, BarberService_CreateServiceCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) CreateServiceCategoryPrivate(ctx context.Context, in *CreateServiceCategoryPrivateRequest, opts ...grpc.CallOption) (*CreateServiceCategoryResponse, error) {
	out := new(CreateServiceCategoryResponse)
	err := c.cc.Invoke(ctx, BarberService_CreateServiceCategoryPrivate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) GetServiceCategories(ctx context.Context, in *GetServiceCategoriesRequest, opts ...grpc.CallOption) (*GetServiceCategoriesResponse, error) {
	out := new(GetServiceCategoriesResponse)
	err := c.cc.Invoke(ctx, BarberService_GetServiceCategories_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) CreateService(ctx context.Context, in *CreateServiceRequest, opts ...grpc.CallOption) (*CreateServiceResponse, error) {
	out := new(CreateServiceResponse)
	err := c.cc.Invoke(ctx, BarberService_CreateService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) CreateServicePrivate(ctx context.Context, in *CreateServicePrivateRequest, opts ...grpc.CallOption) (*CreateServiceResponse, error) {
	out := new(CreateServiceResponse)
	err := c.cc.Invoke(ctx, BarberService_CreateServicePrivate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) GetServices(ctx context.Context, in *GetServicesRequest, opts ...grpc.CallOption) (*GetServicesResponse, error) {
	out := new(GetServicesResponse)
	err := c.cc.Invoke(ctx, BarberService_GetServices_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) GetServiceDetails(ctx context.Context, in *GetServiceDetailsRequest, opts ...grpc.CallOption) (*GetServiceDetailsResponse, error) {
	out := new(GetServiceDetailsResponse)
	err := c.cc.Invoke(ctx, BarberService_GetServiceDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) CreateChain(ctx context.Context, in *CreateChainRequest, opts ...grpc.CallOption) (*CreateChainResponse, error) {
	out := new(CreateChainResponse)
	err := c.cc.Invoke(ctx, BarberService_CreateChain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BarberServiceServer is the server API for BarberService service.
// All implementations must embed UnimplementedBarberServiceServer
// for forward compatibility
type BarberServiceServer interface {
	CreateBarber(context.Context, *CreateBarberRequest) (*CreateBarberResponse, error)
	LoginBarber(context.Context, *LoginBarberRequest) (*LoginBarberResponse, error)
	RefreshTokenBarber(context.Context, *RefreshTokenBarberRequest) (*RefreshTokenBarberResponse, error)
	UpdateBarber(context.Context, *UpdateBarberRequest) (*UpdateBarberResponse, error)
	FindBarberShopsNearby(context.Context, *FindBarberShopsNearbyRequest) (*FindBarberShopsNearbyResponse, error)
	CreateBarberShop(context.Context, *CreateBarberShopRequest) (*CreateBarberShopResponse, error)
	GetBarberShop(context.Context, *GetBarberShopRequest) (*GetBarberShopResponse, error)
	UpdateBarberShop(context.Context, *UpdateBarberShopRequest) (*UpdateBarberShopResponse, error)
	QueryBarberShops(context.Context, *QueryBarberShopsRequest) (*QueryBarberShopsResponse, error)
	GenerateCodeBarberShop(context.Context, *CodeBarberShopRequest) (*CodeBarberShopResponse, error)
	GetBarberInShop(context.Context, *GetBarberInShopRequest) (*GetBarberInShopResponse, error)
	// / service
	CreateServiceCategory(context.Context, *CreateServiceCategoryRequest) (*CreateServiceCategoryResponse, error)
	CreateServiceCategoryPrivate(context.Context, *CreateServiceCategoryPrivateRequest) (*CreateServiceCategoryResponse, error)
	GetServiceCategories(context.Context, *GetServiceCategoriesRequest) (*GetServiceCategoriesResponse, error)
	CreateService(context.Context, *CreateServiceRequest) (*CreateServiceResponse, error)
	CreateServicePrivate(context.Context, *CreateServicePrivateRequest) (*CreateServiceResponse, error)
	GetServices(context.Context, *GetServicesRequest) (*GetServicesResponse, error)
	GetServiceDetails(context.Context, *GetServiceDetailsRequest) (*GetServiceDetailsResponse, error)
	// /Chain
	CreateChain(context.Context, *CreateChainRequest) (*CreateChainResponse, error)
	mustEmbedUnimplementedBarberServiceServer()
}

// UnimplementedBarberServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBarberServiceServer struct {
}

func (UnimplementedBarberServiceServer) CreateBarber(context.Context, *CreateBarberRequest) (*CreateBarberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBarber not implemented")
}
func (UnimplementedBarberServiceServer) LoginBarber(context.Context, *LoginBarberRequest) (*LoginBarberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginBarber not implemented")
}
func (UnimplementedBarberServiceServer) RefreshTokenBarber(context.Context, *RefreshTokenBarberRequest) (*RefreshTokenBarberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshTokenBarber not implemented")
}
func (UnimplementedBarberServiceServer) UpdateBarber(context.Context, *UpdateBarberRequest) (*UpdateBarberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBarber not implemented")
}
func (UnimplementedBarberServiceServer) FindBarberShopsNearby(context.Context, *FindBarberShopsNearbyRequest) (*FindBarberShopsNearbyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindBarberShopsNearby not implemented")
}
func (UnimplementedBarberServiceServer) CreateBarberShop(context.Context, *CreateBarberShopRequest) (*CreateBarberShopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBarberShop not implemented")
}
func (UnimplementedBarberServiceServer) GetBarberShop(context.Context, *GetBarberShopRequest) (*GetBarberShopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBarberShop not implemented")
}
func (UnimplementedBarberServiceServer) UpdateBarberShop(context.Context, *UpdateBarberShopRequest) (*UpdateBarberShopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBarberShop not implemented")
}
func (UnimplementedBarberServiceServer) QueryBarberShops(context.Context, *QueryBarberShopsRequest) (*QueryBarberShopsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryBarberShops not implemented")
}
func (UnimplementedBarberServiceServer) GenerateCodeBarberShop(context.Context, *CodeBarberShopRequest) (*CodeBarberShopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateCodeBarberShop not implemented")
}
func (UnimplementedBarberServiceServer) GetBarberInShop(context.Context, *GetBarberInShopRequest) (*GetBarberInShopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBarberInShop not implemented")
}
func (UnimplementedBarberServiceServer) CreateServiceCategory(context.Context, *CreateServiceCategoryRequest) (*CreateServiceCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServiceCategory not implemented")
}
func (UnimplementedBarberServiceServer) CreateServiceCategoryPrivate(context.Context, *CreateServiceCategoryPrivateRequest) (*CreateServiceCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServiceCategoryPrivate not implemented")
}
func (UnimplementedBarberServiceServer) GetServiceCategories(context.Context, *GetServiceCategoriesRequest) (*GetServiceCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceCategories not implemented")
}
func (UnimplementedBarberServiceServer) CreateService(context.Context, *CreateServiceRequest) (*CreateServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateService not implemented")
}
func (UnimplementedBarberServiceServer) CreateServicePrivate(context.Context, *CreateServicePrivateRequest) (*CreateServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServicePrivate not implemented")
}
func (UnimplementedBarberServiceServer) GetServices(context.Context, *GetServicesRequest) (*GetServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServices not implemented")
}
func (UnimplementedBarberServiceServer) GetServiceDetails(context.Context, *GetServiceDetailsRequest) (*GetServiceDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceDetails not implemented")
}
func (UnimplementedBarberServiceServer) CreateChain(context.Context, *CreateChainRequest) (*CreateChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChain not implemented")
}
func (UnimplementedBarberServiceServer) mustEmbedUnimplementedBarberServiceServer() {}

// UnsafeBarberServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BarberServiceServer will
// result in compilation errors.
type UnsafeBarberServiceServer interface {
	mustEmbedUnimplementedBarberServiceServer()
}

func RegisterBarberServiceServer(s grpc.ServiceRegistrar, srv BarberServiceServer) {
	s.RegisterService(&BarberService_ServiceDesc, srv)
}

func _BarberService_CreateBarber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBarberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).CreateBarber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_CreateBarber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).CreateBarber(ctx, req.(*CreateBarberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_LoginBarber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginBarberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).LoginBarber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_LoginBarber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).LoginBarber(ctx, req.(*LoginBarberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_RefreshTokenBarber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenBarberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).RefreshTokenBarber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_RefreshTokenBarber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).RefreshTokenBarber(ctx, req.(*RefreshTokenBarberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_UpdateBarber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBarberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).UpdateBarber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_UpdateBarber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).UpdateBarber(ctx, req.(*UpdateBarberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_FindBarberShopsNearby_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindBarberShopsNearbyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).FindBarberShopsNearby(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_FindBarberShopsNearby_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).FindBarberShopsNearby(ctx, req.(*FindBarberShopsNearbyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_CreateBarberShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBarberShopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).CreateBarberShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_CreateBarberShop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).CreateBarberShop(ctx, req.(*CreateBarberShopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_GetBarberShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBarberShopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).GetBarberShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_GetBarberShop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).GetBarberShop(ctx, req.(*GetBarberShopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_UpdateBarberShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBarberShopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).UpdateBarberShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_UpdateBarberShop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).UpdateBarberShop(ctx, req.(*UpdateBarberShopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_QueryBarberShops_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBarberShopsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).QueryBarberShops(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_QueryBarberShops_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).QueryBarberShops(ctx, req.(*QueryBarberShopsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_GenerateCodeBarberShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CodeBarberShopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).GenerateCodeBarberShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_GenerateCodeBarberShop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).GenerateCodeBarberShop(ctx, req.(*CodeBarberShopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_GetBarberInShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBarberInShopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).GetBarberInShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_GetBarberInShop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).GetBarberInShop(ctx, req.(*GetBarberInShopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_CreateServiceCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServiceCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).CreateServiceCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_CreateServiceCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).CreateServiceCategory(ctx, req.(*CreateServiceCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_CreateServiceCategoryPrivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServiceCategoryPrivateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).CreateServiceCategoryPrivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_CreateServiceCategoryPrivate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).CreateServiceCategoryPrivate(ctx, req.(*CreateServiceCategoryPrivateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_GetServiceCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).GetServiceCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_GetServiceCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).GetServiceCategories(ctx, req.(*GetServiceCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_CreateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).CreateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_CreateService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).CreateService(ctx, req.(*CreateServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_CreateServicePrivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServicePrivateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).CreateServicePrivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_CreateServicePrivate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).CreateServicePrivate(ctx, req.(*CreateServicePrivateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_GetServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).GetServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_GetServices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).GetServices(ctx, req.(*GetServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_GetServiceDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).GetServiceDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_GetServiceDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).GetServiceDetails(ctx, req.(*GetServiceDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_CreateChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).CreateChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_CreateChain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).CreateChain(ctx, req.(*CreateChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BarberService_ServiceDesc is the grpc.ServiceDesc for BarberService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BarberService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.BarberService",
	HandlerType: (*BarberServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBarber",
			Handler:    _BarberService_CreateBarber_Handler,
		},
		{
			MethodName: "LoginBarber",
			Handler:    _BarberService_LoginBarber_Handler,
		},
		{
			MethodName: "RefreshTokenBarber",
			Handler:    _BarberService_RefreshTokenBarber_Handler,
		},
		{
			MethodName: "UpdateBarber",
			Handler:    _BarberService_UpdateBarber_Handler,
		},
		{
			MethodName: "FindBarberShopsNearby",
			Handler:    _BarberService_FindBarberShopsNearby_Handler,
		},
		{
			MethodName: "CreateBarberShop",
			Handler:    _BarberService_CreateBarberShop_Handler,
		},
		{
			MethodName: "GetBarberShop",
			Handler:    _BarberService_GetBarberShop_Handler,
		},
		{
			MethodName: "UpdateBarberShop",
			Handler:    _BarberService_UpdateBarberShop_Handler,
		},
		{
			MethodName: "QueryBarberShops",
			Handler:    _BarberService_QueryBarberShops_Handler,
		},
		{
			MethodName: "GenerateCodeBarberShop",
			Handler:    _BarberService_GenerateCodeBarberShop_Handler,
		},
		{
			MethodName: "GetBarberInShop",
			Handler:    _BarberService_GetBarberInShop_Handler,
		},
		{
			MethodName: "CreateServiceCategory",
			Handler:    _BarberService_CreateServiceCategory_Handler,
		},
		{
			MethodName: "CreateServiceCategoryPrivate",
			Handler:    _BarberService_CreateServiceCategoryPrivate_Handler,
		},
		{
			MethodName: "GetServiceCategories",
			Handler:    _BarberService_GetServiceCategories_Handler,
		},
		{
			MethodName: "CreateService",
			Handler:    _BarberService_CreateService_Handler,
		},
		{
			MethodName: "CreateServicePrivate",
			Handler:    _BarberService_CreateServicePrivate_Handler,
		},
		{
			MethodName: "GetServices",
			Handler:    _BarberService_GetServices_Handler,
		},
		{
			MethodName: "GetServiceDetails",
			Handler:    _BarberService_GetServiceDetails_Handler,
		},
		{
			MethodName: "CreateChain",
			Handler:    _BarberService_CreateChain_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "barber/barber_service.proto",
}
