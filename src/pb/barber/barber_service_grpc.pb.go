// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: barber/barber_service.proto

package barber

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BarberService_CreateBarberRoles_FullMethodName                 = "/pb.BarberService/CreateBarberRoles"
	BarberService_GetBarberRoles_FullMethodName                    = "/pb.BarberService/GetBarberRoles"
	BarberService_ListBarberRoles_FullMethodName                   = "/pb.BarberService/ListBarberRoles"
	BarberService_UpdateBarberRoles_FullMethodName                 = "/pb.BarberService/UpdateBarberRoles"
	BarberService_DeleteBarberRoles_FullMethodName                 = "/pb.BarberService/DeleteBarberRoles"
	BarberService_CreateBarberShopChains_FullMethodName            = "/pb.BarberService/CreateBarberShopChains"
	BarberService_GetBarberShopChains_FullMethodName               = "/pb.BarberService/GetBarberShopChains"
	BarberService_UpdateBarberShopChains_FullMethodName            = "/pb.BarberService/UpdateBarberShopChains"
	BarberService_DeleteBarberShopChains_FullMethodName            = "/pb.BarberService/DeleteBarberShopChains"
	BarberService_CreateBarberShops_FullMethodName                 = "/pb.BarberService/CreateBarberShops"
	BarberService_GetBarberShops_FullMethodName                    = "/pb.BarberService/GetBarberShops"
	BarberService_QueryBarberShops_FullMethodName                  = "/pb.BarberService/QueryBarberShops"
	BarberService_ListNearbyBarberShops_FullMethodName             = "/pb.BarberService/ListNearbyBarberShops"
	BarberService_UpdateBarberShops_FullMethodName                 = "/pb.BarberService/UpdateBarberShops"
	BarberService_DeleteBarberShops_FullMethodName                 = "/pb.BarberService/DeleteBarberShops"
	BarberService_CreateBarberShopServiceCategories_FullMethodName = "/pb.BarberService/CreateBarberShopServiceCategories"
	BarberService_CreateBarberManagers_FullMethodName              = "/pb.BarberService/CreateBarberManagers"
	BarberService_GetBarberManagers_FullMethodName                 = "/pb.BarberService/GetBarberManagers"
	BarberService_CreateServiceCategories_FullMethodName           = "/pb.BarberService/CreateServiceCategories"
	BarberService_GetServiceCategories_FullMethodName              = "/pb.BarberService/GetServiceCategories"
	BarberService_UpdateServiceCategories_FullMethodName           = "/pb.BarberService/UpdateServiceCategories"
	BarberService_DeleteServiceCategories_FullMethodName           = "/pb.BarberService/DeleteServiceCategories"
	BarberService_CreateAppointments_FullMethodName                = "/pb.BarberService/CreateAppointments"
	BarberService_ListAppointmentsByDate_FullMethodName            = "/pb.BarberService/ListAppointmentsByDate"
	BarberService_CreateBarber_FullMethodName                      = "/pb.BarberService/CreateBarber"
	BarberService_GetBarber_FullMethodName                         = "/pb.BarberService/GetBarber"
	BarberService_UpdateBarber_FullMethodName                      = "/pb.BarberService/UpdateBarber"
	BarberService_LoginBarber_FullMethodName                       = "/pb.BarberService/LoginBarber"
	BarberService_RefreshTokenBarber_FullMethodName                = "/pb.BarberService/RefreshTokenBarber"
)

// BarberServiceClient is the client API for BarberService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BarberServiceClient interface {
	// / BARBER ROLES
	CreateBarberRoles(ctx context.Context, in *CreateBarberRolesRequest, opts ...grpc.CallOption) (*CreateBarberRolesResponse, error)
	GetBarberRoles(ctx context.Context, in *GetBarberRolesRequest, opts ...grpc.CallOption) (*GetBarberRolesResponse, error)
	ListBarberRoles(ctx context.Context, in *ListBarberRolesRequest, opts ...grpc.CallOption) (*ListBarberRolesResponse, error)
	UpdateBarberRoles(ctx context.Context, in *UpdateBarberRolesRequest, opts ...grpc.CallOption) (*UpdateBarberRolesResponse, error)
	DeleteBarberRoles(ctx context.Context, in *DeleteBarberRolesRequest, opts ...grpc.CallOption) (*DeleteBarberRolesResponse, error)
	// BARBERSHOP
	// chains
	CreateBarberShopChains(ctx context.Context, in *CreateBarberShopChainsRequest, opts ...grpc.CallOption) (*CreateBarberShopChainsResponse, error)
	GetBarberShopChains(ctx context.Context, in *GetBarberShopChainsRequest, opts ...grpc.CallOption) (*GetBarberShopChainsResponse, error)
	UpdateBarberShopChains(ctx context.Context, in *UpdateBarberShopChainsRequest, opts ...grpc.CallOption) (*UpdateBarberShopChainsResponse, error)
	DeleteBarberShopChains(ctx context.Context, in *DeleteBarberRolesRequest, opts ...grpc.CallOption) (*DeleteBarberShopChainsResponse, error)
	// /barbershops
	CreateBarberShops(ctx context.Context, in *CreateBarberShopsRequest, opts ...grpc.CallOption) (*CreateBarberShopsResponse, error)
	GetBarberShops(ctx context.Context, in *GetBarberShopsRequest, opts ...grpc.CallOption) (*GetBarberShopsResponse, error)
	QueryBarberShops(ctx context.Context, in *QueryBarberShopsRequest, opts ...grpc.CallOption) (*QueryBarberShopsResponse, error)
	ListNearbyBarberShops(ctx context.Context, in *ListNearbyBarberShopsRequest, opts ...grpc.CallOption) (*ListNearbyBarberShopsResponse, error)
	UpdateBarberShops(ctx context.Context, in *UpdateBarberShopsRequest, opts ...grpc.CallOption) (*UpdateBarberShopsResponse, error)
	DeleteBarberShops(ctx context.Context, in *DeleteBarberShopsRequest, opts ...grpc.CallOption) (*DeleteBarberShopsResponse, error)
	// service categories
	CreateBarberShopServiceCategories(ctx context.Context, in *CreateBarberShopServiceCategoriesRequest, opts ...grpc.CallOption) (*CreateBarberShopServiceCategoriesResponse, error)
	// BARBERMANAGERS
	CreateBarberManagers(ctx context.Context, in *CreateBarberManagersRequest, opts ...grpc.CallOption) (*CreateBarberManagersResponse, error)
	GetBarberManagers(ctx context.Context, in *GetBarberManagersRequest, opts ...grpc.CallOption) (*GetBarberManagersResponse, error)
	// / SERVICE CATEGORIES
	CreateServiceCategories(ctx context.Context, in *CreateServiceCategoriesRequest, opts ...grpc.CallOption) (*CreateServiceCategoriesResponse, error)
	GetServiceCategories(ctx context.Context, in *GetServiceCategoriesRequest, opts ...grpc.CallOption) (*GetServiceCategoriesResponse, error)
	UpdateServiceCategories(ctx context.Context, in *UpdateServiceCategoriesRequest, opts ...grpc.CallOption) (*UpdateServiceCategoriesResponse, error)
	DeleteServiceCategories(ctx context.Context, in *DeleteServiceCategoriesRequest, opts ...grpc.CallOption) (*DeleteServiceCategoriesResponse, error)
	// Appointments
	CreateAppointments(ctx context.Context, in *CreateAppointmentsRequest, opts ...grpc.CallOption) (*CreateAppointmentsResponse, error)
	ListAppointmentsByDate(ctx context.Context, in *ListAppointmentsByDateRequest, opts ...grpc.CallOption) (*ListAppointmentsByDateResponse, error)
	CreateBarber(ctx context.Context, in *CreateBarbersRequest, opts ...grpc.CallOption) (*CreateBarbersResponse, error)
	GetBarber(ctx context.Context, in *GetBarbersRequest, opts ...grpc.CallOption) (*GetBarbersResponse, error)
	UpdateBarber(ctx context.Context, in *UpdateBarbersRequest, opts ...grpc.CallOption) (*UpdateBarbersResponse, error)
	LoginBarber(ctx context.Context, in *LoginBarberRequest, opts ...grpc.CallOption) (*LoginBarberResponse, error)
	RefreshTokenBarber(ctx context.Context, in *RefreshTokenBarberRequest, opts ...grpc.CallOption) (*RefreshTokenBarberResponse, error)
}

type barberServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBarberServiceClient(cc grpc.ClientConnInterface) BarberServiceClient {
	return &barberServiceClient{cc}
}

func (c *barberServiceClient) CreateBarberRoles(ctx context.Context, in *CreateBarberRolesRequest, opts ...grpc.CallOption) (*CreateBarberRolesResponse, error) {
	out := new(CreateBarberRolesResponse)
	err := c.cc.Invoke(ctx, BarberService_CreateBarberRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) GetBarberRoles(ctx context.Context, in *GetBarberRolesRequest, opts ...grpc.CallOption) (*GetBarberRolesResponse, error) {
	out := new(GetBarberRolesResponse)
	err := c.cc.Invoke(ctx, BarberService_GetBarberRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) ListBarberRoles(ctx context.Context, in *ListBarberRolesRequest, opts ...grpc.CallOption) (*ListBarberRolesResponse, error) {
	out := new(ListBarberRolesResponse)
	err := c.cc.Invoke(ctx, BarberService_ListBarberRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) UpdateBarberRoles(ctx context.Context, in *UpdateBarberRolesRequest, opts ...grpc.CallOption) (*UpdateBarberRolesResponse, error) {
	out := new(UpdateBarberRolesResponse)
	err := c.cc.Invoke(ctx, BarberService_UpdateBarberRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) DeleteBarberRoles(ctx context.Context, in *DeleteBarberRolesRequest, opts ...grpc.CallOption) (*DeleteBarberRolesResponse, error) {
	out := new(DeleteBarberRolesResponse)
	err := c.cc.Invoke(ctx, BarberService_DeleteBarberRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) CreateBarberShopChains(ctx context.Context, in *CreateBarberShopChainsRequest, opts ...grpc.CallOption) (*CreateBarberShopChainsResponse, error) {
	out := new(CreateBarberShopChainsResponse)
	err := c.cc.Invoke(ctx, BarberService_CreateBarberShopChains_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) GetBarberShopChains(ctx context.Context, in *GetBarberShopChainsRequest, opts ...grpc.CallOption) (*GetBarberShopChainsResponse, error) {
	out := new(GetBarberShopChainsResponse)
	err := c.cc.Invoke(ctx, BarberService_GetBarberShopChains_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) UpdateBarberShopChains(ctx context.Context, in *UpdateBarberShopChainsRequest, opts ...grpc.CallOption) (*UpdateBarberShopChainsResponse, error) {
	out := new(UpdateBarberShopChainsResponse)
	err := c.cc.Invoke(ctx, BarberService_UpdateBarberShopChains_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) DeleteBarberShopChains(ctx context.Context, in *DeleteBarberRolesRequest, opts ...grpc.CallOption) (*DeleteBarberShopChainsResponse, error) {
	out := new(DeleteBarberShopChainsResponse)
	err := c.cc.Invoke(ctx, BarberService_DeleteBarberShopChains_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) CreateBarberShops(ctx context.Context, in *CreateBarberShopsRequest, opts ...grpc.CallOption) (*CreateBarberShopsResponse, error) {
	out := new(CreateBarberShopsResponse)
	err := c.cc.Invoke(ctx, BarberService_CreateBarberShops_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) GetBarberShops(ctx context.Context, in *GetBarberShopsRequest, opts ...grpc.CallOption) (*GetBarberShopsResponse, error) {
	out := new(GetBarberShopsResponse)
	err := c.cc.Invoke(ctx, BarberService_GetBarberShops_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) QueryBarberShops(ctx context.Context, in *QueryBarberShopsRequest, opts ...grpc.CallOption) (*QueryBarberShopsResponse, error) {
	out := new(QueryBarberShopsResponse)
	err := c.cc.Invoke(ctx, BarberService_QueryBarberShops_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) ListNearbyBarberShops(ctx context.Context, in *ListNearbyBarberShopsRequest, opts ...grpc.CallOption) (*ListNearbyBarberShopsResponse, error) {
	out := new(ListNearbyBarberShopsResponse)
	err := c.cc.Invoke(ctx, BarberService_ListNearbyBarberShops_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) UpdateBarberShops(ctx context.Context, in *UpdateBarberShopsRequest, opts ...grpc.CallOption) (*UpdateBarberShopsResponse, error) {
	out := new(UpdateBarberShopsResponse)
	err := c.cc.Invoke(ctx, BarberService_UpdateBarberShops_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) DeleteBarberShops(ctx context.Context, in *DeleteBarberShopsRequest, opts ...grpc.CallOption) (*DeleteBarberShopsResponse, error) {
	out := new(DeleteBarberShopsResponse)
	err := c.cc.Invoke(ctx, BarberService_DeleteBarberShops_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) CreateBarberShopServiceCategories(ctx context.Context, in *CreateBarberShopServiceCategoriesRequest, opts ...grpc.CallOption) (*CreateBarberShopServiceCategoriesResponse, error) {
	out := new(CreateBarberShopServiceCategoriesResponse)
	err := c.cc.Invoke(ctx, BarberService_CreateBarberShopServiceCategories_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) CreateBarberManagers(ctx context.Context, in *CreateBarberManagersRequest, opts ...grpc.CallOption) (*CreateBarberManagersResponse, error) {
	out := new(CreateBarberManagersResponse)
	err := c.cc.Invoke(ctx, BarberService_CreateBarberManagers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) GetBarberManagers(ctx context.Context, in *GetBarberManagersRequest, opts ...grpc.CallOption) (*GetBarberManagersResponse, error) {
	out := new(GetBarberManagersResponse)
	err := c.cc.Invoke(ctx, BarberService_GetBarberManagers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) CreateServiceCategories(ctx context.Context, in *CreateServiceCategoriesRequest, opts ...grpc.CallOption) (*CreateServiceCategoriesResponse, error) {
	out := new(CreateServiceCategoriesResponse)
	err := c.cc.Invoke(ctx, BarberService_CreateServiceCategories_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) GetServiceCategories(ctx context.Context, in *GetServiceCategoriesRequest, opts ...grpc.CallOption) (*GetServiceCategoriesResponse, error) {
	out := new(GetServiceCategoriesResponse)
	err := c.cc.Invoke(ctx, BarberService_GetServiceCategories_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) UpdateServiceCategories(ctx context.Context, in *UpdateServiceCategoriesRequest, opts ...grpc.CallOption) (*UpdateServiceCategoriesResponse, error) {
	out := new(UpdateServiceCategoriesResponse)
	err := c.cc.Invoke(ctx, BarberService_UpdateServiceCategories_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) DeleteServiceCategories(ctx context.Context, in *DeleteServiceCategoriesRequest, opts ...grpc.CallOption) (*DeleteServiceCategoriesResponse, error) {
	out := new(DeleteServiceCategoriesResponse)
	err := c.cc.Invoke(ctx, BarberService_DeleteServiceCategories_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) CreateAppointments(ctx context.Context, in *CreateAppointmentsRequest, opts ...grpc.CallOption) (*CreateAppointmentsResponse, error) {
	out := new(CreateAppointmentsResponse)
	err := c.cc.Invoke(ctx, BarberService_CreateAppointments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) ListAppointmentsByDate(ctx context.Context, in *ListAppointmentsByDateRequest, opts ...grpc.CallOption) (*ListAppointmentsByDateResponse, error) {
	out := new(ListAppointmentsByDateResponse)
	err := c.cc.Invoke(ctx, BarberService_ListAppointmentsByDate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) CreateBarber(ctx context.Context, in *CreateBarbersRequest, opts ...grpc.CallOption) (*CreateBarbersResponse, error) {
	out := new(CreateBarbersResponse)
	err := c.cc.Invoke(ctx, BarberService_CreateBarber_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) GetBarber(ctx context.Context, in *GetBarbersRequest, opts ...grpc.CallOption) (*GetBarbersResponse, error) {
	out := new(GetBarbersResponse)
	err := c.cc.Invoke(ctx, BarberService_GetBarber_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) UpdateBarber(ctx context.Context, in *UpdateBarbersRequest, opts ...grpc.CallOption) (*UpdateBarbersResponse, error) {
	out := new(UpdateBarbersResponse)
	err := c.cc.Invoke(ctx, BarberService_UpdateBarber_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) LoginBarber(ctx context.Context, in *LoginBarberRequest, opts ...grpc.CallOption) (*LoginBarberResponse, error) {
	out := new(LoginBarberResponse)
	err := c.cc.Invoke(ctx, BarberService_LoginBarber_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberServiceClient) RefreshTokenBarber(ctx context.Context, in *RefreshTokenBarberRequest, opts ...grpc.CallOption) (*RefreshTokenBarberResponse, error) {
	out := new(RefreshTokenBarberResponse)
	err := c.cc.Invoke(ctx, BarberService_RefreshTokenBarber_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BarberServiceServer is the server API for BarberService service.
// All implementations must embed UnimplementedBarberServiceServer
// for forward compatibility
type BarberServiceServer interface {
	// / BARBER ROLES
	CreateBarberRoles(context.Context, *CreateBarberRolesRequest) (*CreateBarberRolesResponse, error)
	GetBarberRoles(context.Context, *GetBarberRolesRequest) (*GetBarberRolesResponse, error)
	ListBarberRoles(context.Context, *ListBarberRolesRequest) (*ListBarberRolesResponse, error)
	UpdateBarberRoles(context.Context, *UpdateBarberRolesRequest) (*UpdateBarberRolesResponse, error)
	DeleteBarberRoles(context.Context, *DeleteBarberRolesRequest) (*DeleteBarberRolesResponse, error)
	// BARBERSHOP
	// chains
	CreateBarberShopChains(context.Context, *CreateBarberShopChainsRequest) (*CreateBarberShopChainsResponse, error)
	GetBarberShopChains(context.Context, *GetBarberShopChainsRequest) (*GetBarberShopChainsResponse, error)
	UpdateBarberShopChains(context.Context, *UpdateBarberShopChainsRequest) (*UpdateBarberShopChainsResponse, error)
	DeleteBarberShopChains(context.Context, *DeleteBarberRolesRequest) (*DeleteBarberShopChainsResponse, error)
	// /barbershops
	CreateBarberShops(context.Context, *CreateBarberShopsRequest) (*CreateBarberShopsResponse, error)
	GetBarberShops(context.Context, *GetBarberShopsRequest) (*GetBarberShopsResponse, error)
	QueryBarberShops(context.Context, *QueryBarberShopsRequest) (*QueryBarberShopsResponse, error)
	ListNearbyBarberShops(context.Context, *ListNearbyBarberShopsRequest) (*ListNearbyBarberShopsResponse, error)
	UpdateBarberShops(context.Context, *UpdateBarberShopsRequest) (*UpdateBarberShopsResponse, error)
	DeleteBarberShops(context.Context, *DeleteBarberShopsRequest) (*DeleteBarberShopsResponse, error)
	// service categories
	CreateBarberShopServiceCategories(context.Context, *CreateBarberShopServiceCategoriesRequest) (*CreateBarberShopServiceCategoriesResponse, error)
	// BARBERMANAGERS
	CreateBarberManagers(context.Context, *CreateBarberManagersRequest) (*CreateBarberManagersResponse, error)
	GetBarberManagers(context.Context, *GetBarberManagersRequest) (*GetBarberManagersResponse, error)
	// / SERVICE CATEGORIES
	CreateServiceCategories(context.Context, *CreateServiceCategoriesRequest) (*CreateServiceCategoriesResponse, error)
	GetServiceCategories(context.Context, *GetServiceCategoriesRequest) (*GetServiceCategoriesResponse, error)
	UpdateServiceCategories(context.Context, *UpdateServiceCategoriesRequest) (*UpdateServiceCategoriesResponse, error)
	DeleteServiceCategories(context.Context, *DeleteServiceCategoriesRequest) (*DeleteServiceCategoriesResponse, error)
	// Appointments
	CreateAppointments(context.Context, *CreateAppointmentsRequest) (*CreateAppointmentsResponse, error)
	ListAppointmentsByDate(context.Context, *ListAppointmentsByDateRequest) (*ListAppointmentsByDateResponse, error)
	CreateBarber(context.Context, *CreateBarbersRequest) (*CreateBarbersResponse, error)
	GetBarber(context.Context, *GetBarbersRequest) (*GetBarbersResponse, error)
	UpdateBarber(context.Context, *UpdateBarbersRequest) (*UpdateBarbersResponse, error)
	LoginBarber(context.Context, *LoginBarberRequest) (*LoginBarberResponse, error)
	RefreshTokenBarber(context.Context, *RefreshTokenBarberRequest) (*RefreshTokenBarberResponse, error)
	mustEmbedUnimplementedBarberServiceServer()
}

// UnimplementedBarberServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBarberServiceServer struct {
}

func (UnimplementedBarberServiceServer) CreateBarberRoles(context.Context, *CreateBarberRolesRequest) (*CreateBarberRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBarberRoles not implemented")
}
func (UnimplementedBarberServiceServer) GetBarberRoles(context.Context, *GetBarberRolesRequest) (*GetBarberRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBarberRoles not implemented")
}
func (UnimplementedBarberServiceServer) ListBarberRoles(context.Context, *ListBarberRolesRequest) (*ListBarberRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBarberRoles not implemented")
}
func (UnimplementedBarberServiceServer) UpdateBarberRoles(context.Context, *UpdateBarberRolesRequest) (*UpdateBarberRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBarberRoles not implemented")
}
func (UnimplementedBarberServiceServer) DeleteBarberRoles(context.Context, *DeleteBarberRolesRequest) (*DeleteBarberRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBarberRoles not implemented")
}
func (UnimplementedBarberServiceServer) CreateBarberShopChains(context.Context, *CreateBarberShopChainsRequest) (*CreateBarberShopChainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBarberShopChains not implemented")
}
func (UnimplementedBarberServiceServer) GetBarberShopChains(context.Context, *GetBarberShopChainsRequest) (*GetBarberShopChainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBarberShopChains not implemented")
}
func (UnimplementedBarberServiceServer) UpdateBarberShopChains(context.Context, *UpdateBarberShopChainsRequest) (*UpdateBarberShopChainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBarberShopChains not implemented")
}
func (UnimplementedBarberServiceServer) DeleteBarberShopChains(context.Context, *DeleteBarberRolesRequest) (*DeleteBarberShopChainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBarberShopChains not implemented")
}
func (UnimplementedBarberServiceServer) CreateBarberShops(context.Context, *CreateBarberShopsRequest) (*CreateBarberShopsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBarberShops not implemented")
}
func (UnimplementedBarberServiceServer) GetBarberShops(context.Context, *GetBarberShopsRequest) (*GetBarberShopsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBarberShops not implemented")
}
func (UnimplementedBarberServiceServer) QueryBarberShops(context.Context, *QueryBarberShopsRequest) (*QueryBarberShopsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryBarberShops not implemented")
}
func (UnimplementedBarberServiceServer) ListNearbyBarberShops(context.Context, *ListNearbyBarberShopsRequest) (*ListNearbyBarberShopsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNearbyBarberShops not implemented")
}
func (UnimplementedBarberServiceServer) UpdateBarberShops(context.Context, *UpdateBarberShopsRequest) (*UpdateBarberShopsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBarberShops not implemented")
}
func (UnimplementedBarberServiceServer) DeleteBarberShops(context.Context, *DeleteBarberShopsRequest) (*DeleteBarberShopsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBarberShops not implemented")
}
func (UnimplementedBarberServiceServer) CreateBarberShopServiceCategories(context.Context, *CreateBarberShopServiceCategoriesRequest) (*CreateBarberShopServiceCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBarberShopServiceCategories not implemented")
}
func (UnimplementedBarberServiceServer) CreateBarberManagers(context.Context, *CreateBarberManagersRequest) (*CreateBarberManagersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBarberManagers not implemented")
}
func (UnimplementedBarberServiceServer) GetBarberManagers(context.Context, *GetBarberManagersRequest) (*GetBarberManagersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBarberManagers not implemented")
}
func (UnimplementedBarberServiceServer) CreateServiceCategories(context.Context, *CreateServiceCategoriesRequest) (*CreateServiceCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServiceCategories not implemented")
}
func (UnimplementedBarberServiceServer) GetServiceCategories(context.Context, *GetServiceCategoriesRequest) (*GetServiceCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceCategories not implemented")
}
func (UnimplementedBarberServiceServer) UpdateServiceCategories(context.Context, *UpdateServiceCategoriesRequest) (*UpdateServiceCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServiceCategories not implemented")
}
func (UnimplementedBarberServiceServer) DeleteServiceCategories(context.Context, *DeleteServiceCategoriesRequest) (*DeleteServiceCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteServiceCategories not implemented")
}
func (UnimplementedBarberServiceServer) CreateAppointments(context.Context, *CreateAppointmentsRequest) (*CreateAppointmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppointments not implemented")
}
func (UnimplementedBarberServiceServer) ListAppointmentsByDate(context.Context, *ListAppointmentsByDateRequest) (*ListAppointmentsByDateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppointmentsByDate not implemented")
}
func (UnimplementedBarberServiceServer) CreateBarber(context.Context, *CreateBarbersRequest) (*CreateBarbersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBarber not implemented")
}
func (UnimplementedBarberServiceServer) GetBarber(context.Context, *GetBarbersRequest) (*GetBarbersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBarber not implemented")
}
func (UnimplementedBarberServiceServer) UpdateBarber(context.Context, *UpdateBarbersRequest) (*UpdateBarbersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBarber not implemented")
}
func (UnimplementedBarberServiceServer) LoginBarber(context.Context, *LoginBarberRequest) (*LoginBarberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginBarber not implemented")
}
func (UnimplementedBarberServiceServer) RefreshTokenBarber(context.Context, *RefreshTokenBarberRequest) (*RefreshTokenBarberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshTokenBarber not implemented")
}
func (UnimplementedBarberServiceServer) mustEmbedUnimplementedBarberServiceServer() {}

// UnsafeBarberServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BarberServiceServer will
// result in compilation errors.
type UnsafeBarberServiceServer interface {
	mustEmbedUnimplementedBarberServiceServer()
}

func RegisterBarberServiceServer(s grpc.ServiceRegistrar, srv BarberServiceServer) {
	s.RegisterService(&BarberService_ServiceDesc, srv)
}

func _BarberService_CreateBarberRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBarberRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).CreateBarberRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_CreateBarberRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).CreateBarberRoles(ctx, req.(*CreateBarberRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_GetBarberRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBarberRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).GetBarberRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_GetBarberRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).GetBarberRoles(ctx, req.(*GetBarberRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_ListBarberRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBarberRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).ListBarberRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_ListBarberRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).ListBarberRoles(ctx, req.(*ListBarberRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_UpdateBarberRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBarberRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).UpdateBarberRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_UpdateBarberRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).UpdateBarberRoles(ctx, req.(*UpdateBarberRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_DeleteBarberRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBarberRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).DeleteBarberRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_DeleteBarberRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).DeleteBarberRoles(ctx, req.(*DeleteBarberRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_CreateBarberShopChains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBarberShopChainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).CreateBarberShopChains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_CreateBarberShopChains_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).CreateBarberShopChains(ctx, req.(*CreateBarberShopChainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_GetBarberShopChains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBarberShopChainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).GetBarberShopChains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_GetBarberShopChains_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).GetBarberShopChains(ctx, req.(*GetBarberShopChainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_UpdateBarberShopChains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBarberShopChainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).UpdateBarberShopChains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_UpdateBarberShopChains_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).UpdateBarberShopChains(ctx, req.(*UpdateBarberShopChainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_DeleteBarberShopChains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBarberRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).DeleteBarberShopChains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_DeleteBarberShopChains_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).DeleteBarberShopChains(ctx, req.(*DeleteBarberRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_CreateBarberShops_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBarberShopsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).CreateBarberShops(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_CreateBarberShops_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).CreateBarberShops(ctx, req.(*CreateBarberShopsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_GetBarberShops_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBarberShopsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).GetBarberShops(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_GetBarberShops_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).GetBarberShops(ctx, req.(*GetBarberShopsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_QueryBarberShops_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBarberShopsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).QueryBarberShops(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_QueryBarberShops_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).QueryBarberShops(ctx, req.(*QueryBarberShopsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_ListNearbyBarberShops_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNearbyBarberShopsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).ListNearbyBarberShops(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_ListNearbyBarberShops_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).ListNearbyBarberShops(ctx, req.(*ListNearbyBarberShopsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_UpdateBarberShops_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBarberShopsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).UpdateBarberShops(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_UpdateBarberShops_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).UpdateBarberShops(ctx, req.(*UpdateBarberShopsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_DeleteBarberShops_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBarberShopsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).DeleteBarberShops(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_DeleteBarberShops_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).DeleteBarberShops(ctx, req.(*DeleteBarberShopsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_CreateBarberShopServiceCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBarberShopServiceCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).CreateBarberShopServiceCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_CreateBarberShopServiceCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).CreateBarberShopServiceCategories(ctx, req.(*CreateBarberShopServiceCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_CreateBarberManagers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBarberManagersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).CreateBarberManagers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_CreateBarberManagers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).CreateBarberManagers(ctx, req.(*CreateBarberManagersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_GetBarberManagers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBarberManagersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).GetBarberManagers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_GetBarberManagers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).GetBarberManagers(ctx, req.(*GetBarberManagersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_CreateServiceCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServiceCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).CreateServiceCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_CreateServiceCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).CreateServiceCategories(ctx, req.(*CreateServiceCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_GetServiceCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).GetServiceCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_GetServiceCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).GetServiceCategories(ctx, req.(*GetServiceCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_UpdateServiceCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServiceCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).UpdateServiceCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_UpdateServiceCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).UpdateServiceCategories(ctx, req.(*UpdateServiceCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_DeleteServiceCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServiceCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).DeleteServiceCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_DeleteServiceCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).DeleteServiceCategories(ctx, req.(*DeleteServiceCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_CreateAppointments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppointmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).CreateAppointments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_CreateAppointments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).CreateAppointments(ctx, req.(*CreateAppointmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_ListAppointmentsByDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppointmentsByDateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).ListAppointmentsByDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_ListAppointmentsByDate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).ListAppointmentsByDate(ctx, req.(*ListAppointmentsByDateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_CreateBarber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBarbersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).CreateBarber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_CreateBarber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).CreateBarber(ctx, req.(*CreateBarbersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_GetBarber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBarbersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).GetBarber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_GetBarber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).GetBarber(ctx, req.(*GetBarbersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_UpdateBarber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBarbersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).UpdateBarber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_UpdateBarber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).UpdateBarber(ctx, req.(*UpdateBarbersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_LoginBarber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginBarberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).LoginBarber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_LoginBarber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).LoginBarber(ctx, req.(*LoginBarberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberService_RefreshTokenBarber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenBarberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberServiceServer).RefreshTokenBarber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberService_RefreshTokenBarber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberServiceServer).RefreshTokenBarber(ctx, req.(*RefreshTokenBarberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BarberService_ServiceDesc is the grpc.ServiceDesc for BarberService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BarberService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.BarberService",
	HandlerType: (*BarberServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBarberRoles",
			Handler:    _BarberService_CreateBarberRoles_Handler,
		},
		{
			MethodName: "GetBarberRoles",
			Handler:    _BarberService_GetBarberRoles_Handler,
		},
		{
			MethodName: "ListBarberRoles",
			Handler:    _BarberService_ListBarberRoles_Handler,
		},
		{
			MethodName: "UpdateBarberRoles",
			Handler:    _BarberService_UpdateBarberRoles_Handler,
		},
		{
			MethodName: "DeleteBarberRoles",
			Handler:    _BarberService_DeleteBarberRoles_Handler,
		},
		{
			MethodName: "CreateBarberShopChains",
			Handler:    _BarberService_CreateBarberShopChains_Handler,
		},
		{
			MethodName: "GetBarberShopChains",
			Handler:    _BarberService_GetBarberShopChains_Handler,
		},
		{
			MethodName: "UpdateBarberShopChains",
			Handler:    _BarberService_UpdateBarberShopChains_Handler,
		},
		{
			MethodName: "DeleteBarberShopChains",
			Handler:    _BarberService_DeleteBarberShopChains_Handler,
		},
		{
			MethodName: "CreateBarberShops",
			Handler:    _BarberService_CreateBarberShops_Handler,
		},
		{
			MethodName: "GetBarberShops",
			Handler:    _BarberService_GetBarberShops_Handler,
		},
		{
			MethodName: "QueryBarberShops",
			Handler:    _BarberService_QueryBarberShops_Handler,
		},
		{
			MethodName: "ListNearbyBarberShops",
			Handler:    _BarberService_ListNearbyBarberShops_Handler,
		},
		{
			MethodName: "UpdateBarberShops",
			Handler:    _BarberService_UpdateBarberShops_Handler,
		},
		{
			MethodName: "DeleteBarberShops",
			Handler:    _BarberService_DeleteBarberShops_Handler,
		},
		{
			MethodName: "CreateBarberShopServiceCategories",
			Handler:    _BarberService_CreateBarberShopServiceCategories_Handler,
		},
		{
			MethodName: "CreateBarberManagers",
			Handler:    _BarberService_CreateBarberManagers_Handler,
		},
		{
			MethodName: "GetBarberManagers",
			Handler:    _BarberService_GetBarberManagers_Handler,
		},
		{
			MethodName: "CreateServiceCategories",
			Handler:    _BarberService_CreateServiceCategories_Handler,
		},
		{
			MethodName: "GetServiceCategories",
			Handler:    _BarberService_GetServiceCategories_Handler,
		},
		{
			MethodName: "UpdateServiceCategories",
			Handler:    _BarberService_UpdateServiceCategories_Handler,
		},
		{
			MethodName: "DeleteServiceCategories",
			Handler:    _BarberService_DeleteServiceCategories_Handler,
		},
		{
			MethodName: "CreateAppointments",
			Handler:    _BarberService_CreateAppointments_Handler,
		},
		{
			MethodName: "ListAppointmentsByDate",
			Handler:    _BarberService_ListAppointmentsByDate_Handler,
		},
		{
			MethodName: "CreateBarber",
			Handler:    _BarberService_CreateBarber_Handler,
		},
		{
			MethodName: "GetBarber",
			Handler:    _BarberService_GetBarber_Handler,
		},
		{
			MethodName: "UpdateBarber",
			Handler:    _BarberService_UpdateBarber_Handler,
		},
		{
			MethodName: "LoginBarber",
			Handler:    _BarberService_LoginBarber_Handler,
		},
		{
			MethodName: "RefreshTokenBarber",
			Handler:    _BarberService_RefreshTokenBarber_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "barber/barber_service.proto",
}
