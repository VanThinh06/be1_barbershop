// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.15.8
// source: barber/service_barber_shop.proto

package barber

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BarberShop_CreateBarber_FullMethodName                         = "/pb.BarberShop/CreateBarber"
	BarberShop_LoginBarber_FullMethodName                          = "/pb.BarberShop/LoginBarber"
	BarberShop_RefreshTokenBarber_FullMethodName                   = "/pb.BarberShop/RefreshTokenBarber"
	BarberShop_UpdateBarber_FullMethodName                         = "/pb.BarberShop/UpdateBarber"
	BarberShop_FindBarberShopsNearby_FullMethodName                = "/pb.BarberShop/FindBarberShopsNearby"
	BarberShop_NewServicesCategory_FullMethodName                  = "/pb.BarberShop/NewServicesCategory"
	BarberShop_NewServiceCategoryPrivate_FullMethodName            = "/pb.BarberShop/NewServiceCategoryPrivate"
	BarberShop_UpdateServicesCategoryPublicSeparate_FullMethodName = "/pb.BarberShop/UpdateServicesCategoryPublicSeparate"
	BarberShop_NewServices_FullMethodName                          = "/pb.BarberShop/NewServices"
	BarberShop_NewServicesPrivate_FullMethodName                   = "/pb.BarberShop/NewServicesPrivate"
	BarberShop_UpdateServicesPublicSeparate_FullMethodName         = "/pb.BarberShop/UpdateServicesPublicSeparate"
	BarberShop_NewBarberShops_FullMethodName                       = "/pb.BarberShop/NewBarberShops"
	BarberShop_GenerateCodeBarberShop_FullMethodName               = "/pb.BarberShop/GenerateCodeBarberShop"
)

// BarberShopClient is the client API for BarberShop service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BarberShopClient interface {
	CreateBarber(ctx context.Context, in *CreateBarberRequest, opts ...grpc.CallOption) (*CreateBarberResponse, error)
	LoginBarber(ctx context.Context, in *LoginBarberRequest, opts ...grpc.CallOption) (*LoginBarberResponse, error)
	RefreshTokenBarber(ctx context.Context, in *RefreshTokenBarberRequest, opts ...grpc.CallOption) (*RefreshTokenBarberResponse, error)
	UpdateBarber(ctx context.Context, in *UpdateBarberRequest, opts ...grpc.CallOption) (*UpdateBarberResponse, error)
	FindBarberShopsNearby(ctx context.Context, in *FindBarberShopsNearbyRequest, opts ...grpc.CallOption) (*FindBarberShopsNearbyResponse, error)
	NewServicesCategory(ctx context.Context, in *CreateServicesCategoryPublicRequest, opts ...grpc.CallOption) (*CreateServicesCategoryResponse, error)
	NewServiceCategoryPrivate(ctx context.Context, in *CreateServicesCategoryPrivateRequest, opts ...grpc.CallOption) (*CreateServicesCategoryResponse, error)
	UpdateServicesCategoryPublicSeparate(ctx context.Context, in *UpdateServicesCategoryPublicSeparateRequest, opts ...grpc.CallOption) (*CreateServicesCategoryResponse, error)
	NewServices(ctx context.Context, in *CreateServicesPublicRequest, opts ...grpc.CallOption) (*CreateServicesResponse, error)
	NewServicesPrivate(ctx context.Context, in *CreateServicesPrivateRequest, opts ...grpc.CallOption) (*CreateServicesResponse, error)
	UpdateServicesPublicSeparate(ctx context.Context, in *UpdateServicesPublicSeparateRequest, opts ...grpc.CallOption) (*CreateServicesResponse, error)
	NewBarberShops(ctx context.Context, in *CreateBarberShopsRequest, opts ...grpc.CallOption) (*CreateBarberShopsResponse, error)
	GenerateCodeBarberShop(ctx context.Context, in *CodeBarberShopRequest, opts ...grpc.CallOption) (*CodeBarberShopResponse, error)
}

type barberShopClient struct {
	cc grpc.ClientConnInterface
}

func NewBarberShopClient(cc grpc.ClientConnInterface) BarberShopClient {
	return &barberShopClient{cc}
}

func (c *barberShopClient) CreateBarber(ctx context.Context, in *CreateBarberRequest, opts ...grpc.CallOption) (*CreateBarberResponse, error) {
	out := new(CreateBarberResponse)
	err := c.cc.Invoke(ctx, BarberShop_CreateBarber_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberShopClient) LoginBarber(ctx context.Context, in *LoginBarberRequest, opts ...grpc.CallOption) (*LoginBarberResponse, error) {
	out := new(LoginBarberResponse)
	err := c.cc.Invoke(ctx, BarberShop_LoginBarber_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberShopClient) RefreshTokenBarber(ctx context.Context, in *RefreshTokenBarberRequest, opts ...grpc.CallOption) (*RefreshTokenBarberResponse, error) {
	out := new(RefreshTokenBarberResponse)
	err := c.cc.Invoke(ctx, BarberShop_RefreshTokenBarber_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberShopClient) UpdateBarber(ctx context.Context, in *UpdateBarberRequest, opts ...grpc.CallOption) (*UpdateBarberResponse, error) {
	out := new(UpdateBarberResponse)
	err := c.cc.Invoke(ctx, BarberShop_UpdateBarber_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberShopClient) FindBarberShopsNearby(ctx context.Context, in *FindBarberShopsNearbyRequest, opts ...grpc.CallOption) (*FindBarberShopsNearbyResponse, error) {
	out := new(FindBarberShopsNearbyResponse)
	err := c.cc.Invoke(ctx, BarberShop_FindBarberShopsNearby_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberShopClient) NewServicesCategory(ctx context.Context, in *CreateServicesCategoryPublicRequest, opts ...grpc.CallOption) (*CreateServicesCategoryResponse, error) {
	out := new(CreateServicesCategoryResponse)
	err := c.cc.Invoke(ctx, BarberShop_NewServicesCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberShopClient) NewServiceCategoryPrivate(ctx context.Context, in *CreateServicesCategoryPrivateRequest, opts ...grpc.CallOption) (*CreateServicesCategoryResponse, error) {
	out := new(CreateServicesCategoryResponse)
	err := c.cc.Invoke(ctx, BarberShop_NewServiceCategoryPrivate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberShopClient) UpdateServicesCategoryPublicSeparate(ctx context.Context, in *UpdateServicesCategoryPublicSeparateRequest, opts ...grpc.CallOption) (*CreateServicesCategoryResponse, error) {
	out := new(CreateServicesCategoryResponse)
	err := c.cc.Invoke(ctx, BarberShop_UpdateServicesCategoryPublicSeparate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberShopClient) NewServices(ctx context.Context, in *CreateServicesPublicRequest, opts ...grpc.CallOption) (*CreateServicesResponse, error) {
	out := new(CreateServicesResponse)
	err := c.cc.Invoke(ctx, BarberShop_NewServices_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberShopClient) NewServicesPrivate(ctx context.Context, in *CreateServicesPrivateRequest, opts ...grpc.CallOption) (*CreateServicesResponse, error) {
	out := new(CreateServicesResponse)
	err := c.cc.Invoke(ctx, BarberShop_NewServicesPrivate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberShopClient) UpdateServicesPublicSeparate(ctx context.Context, in *UpdateServicesPublicSeparateRequest, opts ...grpc.CallOption) (*CreateServicesResponse, error) {
	out := new(CreateServicesResponse)
	err := c.cc.Invoke(ctx, BarberShop_UpdateServicesPublicSeparate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberShopClient) NewBarberShops(ctx context.Context, in *CreateBarberShopsRequest, opts ...grpc.CallOption) (*CreateBarberShopsResponse, error) {
	out := new(CreateBarberShopsResponse)
	err := c.cc.Invoke(ctx, BarberShop_NewBarberShops_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barberShopClient) GenerateCodeBarberShop(ctx context.Context, in *CodeBarberShopRequest, opts ...grpc.CallOption) (*CodeBarberShopResponse, error) {
	out := new(CodeBarberShopResponse)
	err := c.cc.Invoke(ctx, BarberShop_GenerateCodeBarberShop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BarberShopServer is the server API for BarberShop service.
// All implementations must embed UnimplementedBarberShopServer
// for forward compatibility
type BarberShopServer interface {
	CreateBarber(context.Context, *CreateBarberRequest) (*CreateBarberResponse, error)
	LoginBarber(context.Context, *LoginBarberRequest) (*LoginBarberResponse, error)
	RefreshTokenBarber(context.Context, *RefreshTokenBarberRequest) (*RefreshTokenBarberResponse, error)
	UpdateBarber(context.Context, *UpdateBarberRequest) (*UpdateBarberResponse, error)
	FindBarberShopsNearby(context.Context, *FindBarberShopsNearbyRequest) (*FindBarberShopsNearbyResponse, error)
	NewServicesCategory(context.Context, *CreateServicesCategoryPublicRequest) (*CreateServicesCategoryResponse, error)
	NewServiceCategoryPrivate(context.Context, *CreateServicesCategoryPrivateRequest) (*CreateServicesCategoryResponse, error)
	UpdateServicesCategoryPublicSeparate(context.Context, *UpdateServicesCategoryPublicSeparateRequest) (*CreateServicesCategoryResponse, error)
	NewServices(context.Context, *CreateServicesPublicRequest) (*CreateServicesResponse, error)
	NewServicesPrivate(context.Context, *CreateServicesPrivateRequest) (*CreateServicesResponse, error)
	UpdateServicesPublicSeparate(context.Context, *UpdateServicesPublicSeparateRequest) (*CreateServicesResponse, error)
	NewBarberShops(context.Context, *CreateBarberShopsRequest) (*CreateBarberShopsResponse, error)
	GenerateCodeBarberShop(context.Context, *CodeBarberShopRequest) (*CodeBarberShopResponse, error)
	mustEmbedUnimplementedBarberShopServer()
}

// UnimplementedBarberShopServer must be embedded to have forward compatible implementations.
type UnimplementedBarberShopServer struct {
}

func (UnimplementedBarberShopServer) CreateBarber(context.Context, *CreateBarberRequest) (*CreateBarberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBarber not implemented")
}
func (UnimplementedBarberShopServer) LoginBarber(context.Context, *LoginBarberRequest) (*LoginBarberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginBarber not implemented")
}
func (UnimplementedBarberShopServer) RefreshTokenBarber(context.Context, *RefreshTokenBarberRequest) (*RefreshTokenBarberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshTokenBarber not implemented")
}
func (UnimplementedBarberShopServer) UpdateBarber(context.Context, *UpdateBarberRequest) (*UpdateBarberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBarber not implemented")
}
func (UnimplementedBarberShopServer) FindBarberShopsNearby(context.Context, *FindBarberShopsNearbyRequest) (*FindBarberShopsNearbyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindBarberShopsNearby not implemented")
}
func (UnimplementedBarberShopServer) NewServicesCategory(context.Context, *CreateServicesCategoryPublicRequest) (*CreateServicesCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewServicesCategory not implemented")
}
func (UnimplementedBarberShopServer) NewServiceCategoryPrivate(context.Context, *CreateServicesCategoryPrivateRequest) (*CreateServicesCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewServiceCategoryPrivate not implemented")
}
func (UnimplementedBarberShopServer) UpdateServicesCategoryPublicSeparate(context.Context, *UpdateServicesCategoryPublicSeparateRequest) (*CreateServicesCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServicesCategoryPublicSeparate not implemented")
}
func (UnimplementedBarberShopServer) NewServices(context.Context, *CreateServicesPublicRequest) (*CreateServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewServices not implemented")
}
func (UnimplementedBarberShopServer) NewServicesPrivate(context.Context, *CreateServicesPrivateRequest) (*CreateServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewServicesPrivate not implemented")
}
func (UnimplementedBarberShopServer) UpdateServicesPublicSeparate(context.Context, *UpdateServicesPublicSeparateRequest) (*CreateServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServicesPublicSeparate not implemented")
}
func (UnimplementedBarberShopServer) NewBarberShops(context.Context, *CreateBarberShopsRequest) (*CreateBarberShopsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewBarberShops not implemented")
}
func (UnimplementedBarberShopServer) GenerateCodeBarberShop(context.Context, *CodeBarberShopRequest) (*CodeBarberShopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateCodeBarberShop not implemented")
}
func (UnimplementedBarberShopServer) mustEmbedUnimplementedBarberShopServer() {}

// UnsafeBarberShopServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BarberShopServer will
// result in compilation errors.
type UnsafeBarberShopServer interface {
	mustEmbedUnimplementedBarberShopServer()
}

func RegisterBarberShopServer(s grpc.ServiceRegistrar, srv BarberShopServer) {
	s.RegisterService(&BarberShop_ServiceDesc, srv)
}

func _BarberShop_CreateBarber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBarberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberShopServer).CreateBarber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberShop_CreateBarber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberShopServer).CreateBarber(ctx, req.(*CreateBarberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberShop_LoginBarber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginBarberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberShopServer).LoginBarber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberShop_LoginBarber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberShopServer).LoginBarber(ctx, req.(*LoginBarberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberShop_RefreshTokenBarber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenBarberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberShopServer).RefreshTokenBarber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberShop_RefreshTokenBarber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberShopServer).RefreshTokenBarber(ctx, req.(*RefreshTokenBarberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberShop_UpdateBarber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBarberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberShopServer).UpdateBarber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberShop_UpdateBarber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberShopServer).UpdateBarber(ctx, req.(*UpdateBarberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberShop_FindBarberShopsNearby_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindBarberShopsNearbyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberShopServer).FindBarberShopsNearby(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberShop_FindBarberShopsNearby_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberShopServer).FindBarberShopsNearby(ctx, req.(*FindBarberShopsNearbyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberShop_NewServicesCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServicesCategoryPublicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberShopServer).NewServicesCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberShop_NewServicesCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberShopServer).NewServicesCategory(ctx, req.(*CreateServicesCategoryPublicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberShop_NewServiceCategoryPrivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServicesCategoryPrivateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberShopServer).NewServiceCategoryPrivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberShop_NewServiceCategoryPrivate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberShopServer).NewServiceCategoryPrivate(ctx, req.(*CreateServicesCategoryPrivateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberShop_UpdateServicesCategoryPublicSeparate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServicesCategoryPublicSeparateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberShopServer).UpdateServicesCategoryPublicSeparate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberShop_UpdateServicesCategoryPublicSeparate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberShopServer).UpdateServicesCategoryPublicSeparate(ctx, req.(*UpdateServicesCategoryPublicSeparateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberShop_NewServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServicesPublicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberShopServer).NewServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberShop_NewServices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberShopServer).NewServices(ctx, req.(*CreateServicesPublicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberShop_NewServicesPrivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServicesPrivateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberShopServer).NewServicesPrivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberShop_NewServicesPrivate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberShopServer).NewServicesPrivate(ctx, req.(*CreateServicesPrivateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberShop_UpdateServicesPublicSeparate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServicesPublicSeparateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberShopServer).UpdateServicesPublicSeparate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberShop_UpdateServicesPublicSeparate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberShopServer).UpdateServicesPublicSeparate(ctx, req.(*UpdateServicesPublicSeparateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberShop_NewBarberShops_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBarberShopsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberShopServer).NewBarberShops(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberShop_NewBarberShops_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberShopServer).NewBarberShops(ctx, req.(*CreateBarberShopsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarberShop_GenerateCodeBarberShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CodeBarberShopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarberShopServer).GenerateCodeBarberShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarberShop_GenerateCodeBarberShop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarberShopServer).GenerateCodeBarberShop(ctx, req.(*CodeBarberShopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BarberShop_ServiceDesc is the grpc.ServiceDesc for BarberShop service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BarberShop_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.BarberShop",
	HandlerType: (*BarberShopServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBarber",
			Handler:    _BarberShop_CreateBarber_Handler,
		},
		{
			MethodName: "LoginBarber",
			Handler:    _BarberShop_LoginBarber_Handler,
		},
		{
			MethodName: "RefreshTokenBarber",
			Handler:    _BarberShop_RefreshTokenBarber_Handler,
		},
		{
			MethodName: "UpdateBarber",
			Handler:    _BarberShop_UpdateBarber_Handler,
		},
		{
			MethodName: "FindBarberShopsNearby",
			Handler:    _BarberShop_FindBarberShopsNearby_Handler,
		},
		{
			MethodName: "NewServicesCategory",
			Handler:    _BarberShop_NewServicesCategory_Handler,
		},
		{
			MethodName: "NewServiceCategoryPrivate",
			Handler:    _BarberShop_NewServiceCategoryPrivate_Handler,
		},
		{
			MethodName: "UpdateServicesCategoryPublicSeparate",
			Handler:    _BarberShop_UpdateServicesCategoryPublicSeparate_Handler,
		},
		{
			MethodName: "NewServices",
			Handler:    _BarberShop_NewServices_Handler,
		},
		{
			MethodName: "NewServicesPrivate",
			Handler:    _BarberShop_NewServicesPrivate_Handler,
		},
		{
			MethodName: "UpdateServicesPublicSeparate",
			Handler:    _BarberShop_UpdateServicesPublicSeparate_Handler,
		},
		{
			MethodName: "NewBarberShops",
			Handler:    _BarberShop_NewBarberShops_Handler,
		},
		{
			MethodName: "GenerateCodeBarberShop",
			Handler:    _BarberShop_GenerateCodeBarberShop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "barber/service_barber_shop.proto",
}
