// Code generated by sqlc. DO NOT EDIT.
// source: manager.sql

package db

import (
	"context"


	"github.com/google/uuid"
	"github.com/lib/pq"
	null "gopkg.in/guregu/null.v4"
)

const createManager = `-- name: CreateManager :one
INSERT INTO manager ( username, role, image, store_id)
VALUES ( $1,
         $2,
         $3,
         $4) RETURNING id, username, role, image, store_id, created_at, update_at
`

type CreateManagerParams struct {
	Username string      `json:"username"`
	Role     string      `json:"role"`
	Image    null.String `json:"image"`
	StoreID  []uuid.UUID `json:"store_id"`
}

func (q *Queries) CreateManager(ctx context.Context, arg CreateManagerParams) (Manager, error) {
	row := q.db.QueryRowContext(ctx, createManager,
		arg.Username,
		arg.Role,
		arg.Image,
		pq.Array(arg.StoreID),
	)
	var i Manager
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Role,
		&i.Image,
		pq.Array(&i.StoreID),
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}

const updateManager = `-- name: UpdateManager :one
UPDATE manager
set username = $2,
    image = $3,
    role = $4
WHERE id = $1 RETURNING id, username, role, image, store_id, created_at, update_at
`

type UpdateManagerParams struct {
	ID       uuid.UUID   `json:"id"`
	Username string      `json:"username"`
	Image    null.String `json:"image"`
	Role     string      `json:"role"`
}

func (q *Queries) UpdateManager(ctx context.Context, arg UpdateManagerParams) (Manager, error) {
	row := q.db.QueryRowContext(ctx, updateManager,
		arg.ID,
		arg.Username,
		arg.Image,
		arg.Role,
	)
	var i Manager
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Role,
		&i.Image,
		pq.Array(&i.StoreID),
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}
