// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: service_category.sql

package db

import (
	"context"

	"github.com/google/uuid"
	null "gopkg.in/guregu/null.v4"
)

const createServiceCategory = `-- name: CreateServiceCategory :one
INSERT INTO service_category (
store_id,
work,
description
) VALUES (
  $1, $2, $3
)
RETURNING id, store_id, work, description, created_at, update_at
`

type CreateServiceCategoryParams struct {
	StoreID     uuid.UUID   `json:"store_id"`
	Work        string      `json:"work"`
	Description null.String `json:"description"`
}

func (q *Queries) CreateServiceCategory(ctx context.Context, arg CreateServiceCategoryParams) (ServiceCategory, error) {
	row := q.db.QueryRowContext(ctx, createServiceCategory, arg.StoreID, arg.Work, arg.Description)
	var i ServiceCategory
	err := row.Scan(
		&i.ID,
		&i.StoreID,
		&i.Work,
		&i.Description,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}

const deleteServiceCategory = `-- name: DeleteServiceCategory :one
DELETE FROM service_category
WHERE id = $1
RETURNING id, store_id, work, description, created_at, update_at
`

func (q *Queries) DeleteServiceCategory(ctx context.Context, id uuid.UUID) (ServiceCategory, error) {
	row := q.db.QueryRowContext(ctx, deleteServiceCategory, id)
	var i ServiceCategory
	err := row.Scan(
		&i.ID,
		&i.StoreID,
		&i.Work,
		&i.Description,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}

const getListServiceCategorywithStore = `-- name: GetListServiceCategorywithStore :many
SELECT id, store_id, work, description, created_at, update_at
FROM service_category
WHERE store_id = $1
`

func (q *Queries) GetListServiceCategorywithStore(ctx context.Context, storeID uuid.UUID) ([]ServiceCategory, error) {
	rows, err := q.db.QueryContext(ctx, getListServiceCategorywithStore, storeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ServiceCategory{}
	for rows.Next() {
		var i ServiceCategory
		if err := rows.Scan(
			&i.ID,
			&i.StoreID,
			&i.Work,
			&i.Description,
			&i.CreatedAt,
			&i.UpdateAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getServiceCategory = `-- name: GetServiceCategory :one
SELECT id, store_id, work, description, created_at, update_at
FROM service_category
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetServiceCategory(ctx context.Context, id uuid.UUID) (ServiceCategory, error) {
	row := q.db.QueryRowContext(ctx, getServiceCategory, id)
	var i ServiceCategory
	err := row.Scan(
		&i.ID,
		&i.StoreID,
		&i.Work,
		&i.Description,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}

const updateServiceCategory = `-- name: UpdateServiceCategory :one
UPDATE service_category
set store_id = $2,
  work= $3,
  description =$4
WHERE id = $1
RETURNING id, store_id, work, description, created_at, update_at
`

type UpdateServiceCategoryParams struct {
	ID          uuid.UUID   `json:"id"`
	StoreID     uuid.UUID   `json:"store_id"`
	Work        string      `json:"work"`
	Description null.String `json:"description"`
}

func (q *Queries) UpdateServiceCategory(ctx context.Context, arg UpdateServiceCategoryParams) (ServiceCategory, error) {
	row := q.db.QueryRowContext(ctx, updateServiceCategory,
		arg.ID,
		arg.StoreID,
		arg.Work,
		arg.Description,
	)
	var i ServiceCategory
	err := row.Scan(
		&i.ID,
		&i.StoreID,
		&i.Work,
		&i.Description,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}
