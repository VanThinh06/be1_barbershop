// Code generated by sqlc. DO NOT EDIT.
// source: service.sql

package db

import (
	"context"

	"github.com/google/uuid"
	null "gopkg.in/guregu/null.v4"
)

const createService = `-- name: CreateService :one

INSERT INTO "service"( store_id,
                      work,
                       timer,
                       price,
                       description,
                       image)
VALUES ($1,
        $2,
        $3,
        $4,
        $5,
        $6 ) RETURNING id, store_id, work, timer, price, description, image, created_at, update_at
`

type CreateServiceParams struct {
	StoreID     uuid.UUID   `json:"store_id"`
	Work        string      `json:"work"`
	Timer       int32       `json:"timer"`
	Price       float32     `json:"price"`
	Description null.String `json:"description"`
	Image       null.String `json:"image"`
}

func (q *Queries) CreateService(ctx context.Context, arg CreateServiceParams) (Service, error) {
	row := q.db.QueryRowContext(ctx, createService,
		arg.StoreID,
		arg.Work,
		arg.Timer,
		arg.Price,
		arg.Description,
		arg.Image,
	)
	var i Service
	err := row.Scan(
		&i.ID,
		&i.StoreID,
		&i.Work,
		&i.Timer,
		&i.Price,
		&i.Description,
		&i.Image,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}

const getService = `-- name: GetService :many

SELECT id, store_id, work, timer, price, description, image, created_at, update_at FROM "service"
WHERE store_id = $1 LIMIT 10
`

func (q *Queries) GetService(ctx context.Context, storeID uuid.UUID) ([]Service, error) {
	rows, err := q.db.QueryContext(ctx, getService, storeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Service{}
	for rows.Next() {
		var i Service
		if err := rows.Scan(
			&i.ID,
			&i.StoreID,
			&i.Work,
			&i.Timer,
			&i.Price,
			&i.Description,
			&i.Image,
			&i.CreatedAt,
			&i.UpdateAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
