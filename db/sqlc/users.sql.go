// Code generated by sqlc. DO NOT EDIT.
// source: users.sql

package db

import (
	"context"

	null "gopkg.in/guregu/null.v4"
)

const createUsers = `-- name: CreateUsers :one

INSERT INTO users (username, full_name, email, hashed_password, fcm_device, image, role, address )
VALUES ($1,
        $2,
        $3,
        $4,
        $5, $6, $7, $8
        ) RETURNING username, full_name, email, image, fcm_device, role, location, address, hashed_password, password_changed_at, created_at
`

type CreateUsersParams struct {
	Username       string      `json:"username"`
	FullName       string      `json:"full_name"`
	Email          string      `json:"email"`
	HashedPassword string      `json:"hashed_password"`
	FcmDevice      string      `json:"fcm_device"`
	Image          null.String `json:"image"`
	Role           null.String `json:"role"`
	Address        null.String `json:"address"`
}

func (q *Queries) CreateUsers(ctx context.Context, arg CreateUsersParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUsers,
		arg.Username,
		arg.FullName,
		arg.Email,
		arg.HashedPassword,
		arg.FcmDevice,
		arg.Image,
		arg.Role,
		arg.Address,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.FullName,
		&i.Email,
		&i.Image,
		&i.FcmDevice,
		&i.Role,
		&i.Location,
		&i.Address,
		&i.HashedPassword,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUsers = `-- name: DeleteUsers :exec
DELETE FROM users WHERE username = $1
`

func (q *Queries) DeleteUsers(ctx context.Context, username string) error {
	_, err := q.db.ExecContext(ctx, deleteUsers, username)
	return err
}

const getUsers = `-- name: GetUsers :one

SELECT username, full_name, email, image, fcm_device, role, location, address, hashed_password, password_changed_at, created_at
FROM users
WHERE username = $1
LIMIT 1
`

func (q *Queries) GetUsers(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUsers, username)
	var i User
	err := row.Scan(
		&i.Username,
		&i.FullName,
		&i.Email,
		&i.Image,
		&i.FcmDevice,
		&i.Role,
		&i.Location,
		&i.Address,
		&i.HashedPassword,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}
