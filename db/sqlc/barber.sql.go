// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: barber.sql

package db

import (
	"context"

	"github.com/google/uuid"
	null "gopkg.in/guregu/null.v4"
)

const createBarber = `-- name: CreateBarber :one

INSERT INTO barber(username, full_name, email, hashed_password, avatar, role, status, store_work)
VALUES ($1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8) RETURNING username, full_name, email, hashed_password, avatar, role, status, is_manager, store_work, password_changed_at, created_at, update_at
`

type CreateBarberParams struct {
	Username       string        `json:"username"`
	FullName       string        `json:"full_name"`
	Email          string        `json:"email"`
	HashedPassword string        `json:"hashed_password"`
	Avatar         null.String   `json:"avatar"`
	Role           null.String   `json:"role"`
	Status         null.String   `json:"status"`
	StoreWork      uuid.NullUUID `json:"store_work"`
}

func (q *Queries) CreateBarber(ctx context.Context, arg CreateBarberParams) (Barber, error) {
	row := q.db.QueryRowContext(ctx, createBarber,
		arg.Username,
		arg.FullName,
		arg.Email,
		arg.HashedPassword,
		arg.Avatar,
		arg.Role,
		arg.Status,
		arg.StoreWork,
	)
	var i Barber
	err := row.Scan(
		&i.Username,
		&i.FullName,
		&i.Email,
		&i.HashedPassword,
		&i.Avatar,
		&i.Role,
		&i.Status,
		&i.IsManager,
		&i.StoreWork,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}

const getBarber = `-- name: GetBarber :one

SELECT username, full_name, email, hashed_password, avatar, role, status, is_manager, store_work, password_changed_at, created_at, update_at
FROM barber
WHERE username = $1
LIMIT 1
`

func (q *Queries) GetBarber(ctx context.Context, username string) (Barber, error) {
	row := q.db.QueryRowContext(ctx, getBarber, username)
	var i Barber
	err := row.Scan(
		&i.Username,
		&i.FullName,
		&i.Email,
		&i.HashedPassword,
		&i.Avatar,
		&i.Role,
		&i.Status,
		&i.IsManager,
		&i.StoreWork,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}
