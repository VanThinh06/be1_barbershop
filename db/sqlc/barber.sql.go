// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: barber.sql

package db

import (
	"context"

	"github.com/google/uuid"
	null "gopkg.in/guregu/null.v4"
)

const createBarber = `-- name: CreateBarber :one
INSERT INTO "Barbers" (
    shop_id,
    nick_name,
    full_name,
    phone,
    email,
    gender,
    "role",
    hashed_password,
    avatar
  )
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9
  )
RETURNING barber_id, shop_id, nick_name, full_name, phone, email, gender, role, hashed_password, avatar, status, password_changed_at, created_at, update_at
`

type CreateBarberParams struct {
	ShopID         uuid.NullUUID `json:"shop_id"`
	NickName       string        `json:"nick_name"`
	FullName       string        `json:"full_name"`
	Phone          string        `json:"phone"`
	Email          string        `json:"email"`
	Gender         int32         `json:"gender"`
	Role           int32         `json:"role"`
	HashedPassword string        `json:"hashed_password"`
	Avatar         null.String   `json:"avatar"`
}

func (q *Queries) CreateBarber(ctx context.Context, arg CreateBarberParams) (Barber, error) {
	row := q.db.QueryRowContext(ctx, createBarber,
		arg.ShopID,
		arg.NickName,
		arg.FullName,
		arg.Phone,
		arg.Email,
		arg.Gender,
		arg.Role,
		arg.HashedPassword,
		arg.Avatar,
	)
	var i Barber
	err := row.Scan(
		&i.BarberID,
		&i.ShopID,
		&i.NickName,
		&i.FullName,
		&i.Phone,
		&i.Email,
		&i.Gender,
		&i.Role,
		&i.HashedPassword,
		&i.Avatar,
		&i.Status,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}

const getEmailBarber = `-- name: GetEmailBarber :one
SELECT barber_id, shop_id, nick_name, full_name, phone, email, gender, role, hashed_password, avatar, status, password_changed_at, created_at, update_at
FROM "Barbers"
WHERE email = $1
LIMIT 1
`

func (q *Queries) GetEmailBarber(ctx context.Context, email string) (Barber, error) {
	row := q.db.QueryRowContext(ctx, getEmailBarber, email)
	var i Barber
	err := row.Scan(
		&i.BarberID,
		&i.ShopID,
		&i.NickName,
		&i.FullName,
		&i.Phone,
		&i.Email,
		&i.Gender,
		&i.Role,
		&i.HashedPassword,
		&i.Avatar,
		&i.Status,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}

const updateBarber = `-- name: UpdateBarber :one
UPDATE "Barbers"
set shop_id = $1,
  nick_name = $2,
  full_name = $3,
  phone = $4,
  email = $5,
  gender = $6,
  "role" = $7,
  avatar = $8,
  "status" = $9,
  "update_at" = $10
WHERE barber_id = $11
RETURNING barber_id, shop_id, nick_name, full_name, phone, email, gender, role, hashed_password, avatar, status, password_changed_at, created_at, update_at
`

type UpdateBarberParams struct {
	ShopID   uuid.NullUUID `json:"shop_id"`
	NickName string        `json:"nick_name"`
	FullName string        `json:"full_name"`
	Phone    string        `json:"phone"`
	Email    string        `json:"email"`
	Gender   int32         `json:"gender"`
	Role     int32         `json:"role"`
	Avatar   null.String   `json:"avatar"`
	Status   null.Int      `json:"status"`
	UpdateAt null.Time     `json:"update_at"`
	BarberID uuid.UUID     `json:"barber_id"`
}

func (q *Queries) UpdateBarber(ctx context.Context, arg UpdateBarberParams) (Barber, error) {
	row := q.db.QueryRowContext(ctx, updateBarber,
		arg.ShopID,
		arg.NickName,
		arg.FullName,
		arg.Phone,
		arg.Email,
		arg.Gender,
		arg.Role,
		arg.Avatar,
		arg.Status,
		arg.UpdateAt,
		arg.BarberID,
	)
	var i Barber
	err := row.Scan(
		&i.BarberID,
		&i.ShopID,
		&i.NickName,
		&i.FullName,
		&i.Phone,
		&i.Email,
		&i.Gender,
		&i.Role,
		&i.HashedPassword,
		&i.Avatar,
		&i.Status,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}

const updateStatusBarber = `-- name: UpdateStatusBarber :one
UPDATE "Barbers"
set "status" = $1
WHERE barber_id = $2
RETURNING barber_id, shop_id, nick_name, full_name, phone, email, gender, role, hashed_password, avatar, status, password_changed_at, created_at, update_at
`

type UpdateStatusBarberParams struct {
	Status   null.Int  `json:"status"`
	BarberID uuid.UUID `json:"barber_id"`
}

func (q *Queries) UpdateStatusBarber(ctx context.Context, arg UpdateStatusBarberParams) (Barber, error) {
	row := q.db.QueryRowContext(ctx, updateStatusBarber, arg.Status, arg.BarberID)
	var i Barber
	err := row.Scan(
		&i.BarberID,
		&i.ShopID,
		&i.NickName,
		&i.FullName,
		&i.Phone,
		&i.Email,
		&i.Gender,
		&i.Role,
		&i.HashedPassword,
		&i.Avatar,
		&i.Status,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}
