// Code generated by sqlc. DO NOT EDIT.
// source: store.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/lib/pq"
	null "gopkg.in/guregu/null.v4"
)

const createStore = `-- name: CreateStore :one

INSERT INTO store (
name_id,
name_store,
location,
image,
manager_id,
employee_id,
status
)
VALUES ($1,
        $2,
        $3,
        $4,
        $5, $6, $7
        ) RETURNING id, name_id, name_store, location, image, list_image, manager_id, employee_id, status, created_at, update_at
`

type CreateStoreParams struct {
	NameID     string        `json:"name_id"`
	NameStore  string        `json:"name_store"`
	Location   null.Int      `json:"location"`
	Image      null.String   `json:"image"`
	ManagerID  uuid.NullUUID `json:"manager_id"`
	EmployeeID []uuid.UUID   `json:"employee_id"`
	Status     int32         `json:"status"`
}

func (q *Queries) CreateStore(ctx context.Context, arg CreateStoreParams) (Store, error) {
	row := q.db.QueryRowContext(ctx, createStore,
		arg.NameID,
		arg.NameStore,
		arg.Location,
		arg.Image,
		arg.ManagerID,
		pq.Array(arg.EmployeeID),
		arg.Status,
	)
	var i Store
	err := row.Scan(
		&i.ID,
		&i.NameID,
		&i.NameStore,
		&i.Location,
		&i.Image,
		pq.Array(&i.ListImage),
		&i.ManagerID,
		pq.Array(&i.EmployeeID),
		&i.Status,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}

const getStore = `-- name: GetStore :one

SELECT id, name_id, name_store, location, image, list_image, manager_id, employee_id, status, created_at, update_at
FROM store
WHERE name_id = $1
LIMIT 1
`

func (q *Queries) GetStore(ctx context.Context, nameID string) (Store, error) {
	row := q.db.QueryRowContext(ctx, getStore, nameID)
	var i Store
	err := row.Scan(
		&i.ID,
		&i.NameID,
		&i.NameStore,
		&i.Location,
		&i.Image,
		pq.Array(&i.ListImage),
		&i.ManagerID,
		pq.Array(&i.EmployeeID),
		&i.Status,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}
